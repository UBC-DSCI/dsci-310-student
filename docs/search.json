{
  "articles": [
    {
      "path": "coc.html",
      "title": "Code of Conduct",
      "description": "Code of conduct governing in-person and online learning spaces for DSCI 310.\n",
      "author": [],
      "contents": "\n\nContents\nIntroduction\nThe DSCI 310 Code of Conduct\nIncident Reporting Guidelines\nAttribution\n\nIntroduction\nWe are committed to creating a friendly and respectful place for learning, teaching and contributing. All participants in our course and communications are expected to show respect and courtesy to others.\nTo make clear what is expected, everyone participating in DSCI 310 activities is required to conform to the Code of Conduct. This Code of Conduct applies to all spaces managed by DSCI 310 including, but not limited to, class meetings, email communication, and online forums such as Piazza and GitHub. The DSCI 310 teaching team are expected to assist with the enforcement of the Code of Conduct.\nThe DSCI 310 Instructor(s) is responsible for enforcing the Code of Conduct. All reports will be reviewed by the Instructor(s) and will be kept confidential.\nThe DSCI 310 Code of Conduct\nWe are dedicated to providing a welcoming and supportive environment for all people, regardless of background or identity. As such, we do not tolerate behaviour that is disrespectful to our teachers or learners or that excludes, intimidates, or causes discomfort to others. We do not tolerate discrimination or harassment based on characteristics that include, but are not limited to, gender identity and expression, sexual orientation, disability, physical appearance, body size, citizenship, nationality, ethnic or social origin, pregnancy, familial status, veteran status, genetic information, religion or belief (or lack thereof), membership of a national minority, property, age, education, socio-economic status, technical choices, and experience level.\nEveryone who participates in DSCI 310 activities is required to conform to this Code of Conduct. It applies to all spaces managed by DSCI 310 including, but not limited to, class meetings, email communication, and online forums such as Piazza and GitHub. The DSCI 310 teaching team are expected to assist with the enforcement of the Code of Conduct.\nExpected Behavior\nAll participants in our events and communications are expected to show respect and courtesy to others. All interactions should be professional regardless of platform: either online or in-person. In order to foster a positive and professional learning environment we encourage the following kinds of behaviours in all DSCI 310 events and platforms:\nUse welcoming and inclusive language\nBe respectful of different viewpoints and experiences\nGracefully accept constructive criticism\nFocus on what is best for the community\nShow courtesy and respect towards other community members\nNote: See the four social rules for further recommendations.\nUnacceptable Behavior\nExamples of unacceptable behavior by participants at any DSCI 310 event/platform include:\nwritten or verbal comments which have the effect of excluding people on the basis of membership of any specific group\ncausing someone to fear for their safety, such as through stalking, following, or intimidation\nviolent threats or language directed against another person\nthe display of sexual or violent images\nunwelcome sexual attention\nnonconsensual or unwelcome physical contact\nsustained disruption of talks, events or communications\ninsults or put downs\nsexist, racist, homophobic, transphobic, ableist, or exclusionary jokes\nexcessive swearing\nincitement to violence, suicide, or self-harm\ncontinuing to initiate interaction (including photography or recording) with someone after being asked to stop publication of private communication without consent\nConsequences of Unacceptable Behavior\nParticipants who are asked to stop any inappropriate behavior are expected to comply immediately. This applies to any DSCI 310 events and platforms, either online or in-person. If a participant engages in behavior that violates this code of conduct, the teaching team may warn the offender and or engage the DSCI 310 Instructor to investigate the Code of Conduct violation and impose appropriate sanctions.\nIncident Reporting Guidelines\nIf someone violates the Code of Conduct during a DSCI 310 event or in an online space outside of organised events, we ask that you report it to the Instructor(s). The current instructor(s) of DSCI 310 is(are) Tiffany Timbers. An email to tiffay[-at-]stat.ubc.ca will be seen by Tiffany Timbers. To report a DSCI 310 code of conduct violation that will not be seen by your instructor, an alternative contact person is Bruce Dunham, Professor of Teaching in the Department of Statistics at UBC. His email is b.dunham[-at-]stat.ubc.ca.\nAttribution\nDerived from the Carpentries Code of Conduct\n\n\n\n",
      "last_modified": "2022-01-04T16:50:54+00:00"
    },
    {
      "path": "computer-setup.html",
      "title": "Computer setup",
      "description": "Computer requirements and software installation instructions for DSCI 310.\n",
      "author": [],
      "contents": "\n\nContents\nLaptop requirements\nSoftware installation instructions\n\nThese instructions will walk you through how to install the required Data Science software stack for DSCI 310. Before starting with the installation instructions, ensure that your laptop meets our program requirements. If your computer does not meet the requirements please reach out to the teaching team on Piazza and describe how it does not. We will work to accomodate you where we can.\nLaptop requirements\nRuns one of the following operating systems: Ubuntu 20.04, macOS Big Sur (version 11.4.x or 11.5.x), Windows 10 Professional, Enterprise or Education (version 2004, 20H2, or 21H1).\nWindows 10 Home is not sufficient as not all the software required for the program can be installed on that OS. Click here to download Windows 10 Education for free from UBC.\nWhen installing Ubuntu, checking the box “Install third party…” will (among other things) install proprietary drivers, which can be helpful for wifi and graphics cards.\n\nCan connect to networks via a wireless connection for on campus work\nHas access to an internet connection that is fast and stable enough for video calling and conducting online quizzes\nHas at least 30 GB disk space available\nHas at least 4 GB of RAM\nUses a 64-bit CPU\nIs at most 6 years old (4 years old or newer is recommended)\nUses English as the default language\nStudent user has full administrative access to the computer\nSoftware installation instructions\nPlease click the appropriate link below to view the installation instructions for your operating system:\nmacOS x86 or macOS arm\nUbuntu\nWindows\nThe following people contributed to these instructions: Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers.\n\n\n\n",
      "last_modified": "2022-01-04T16:50:55+00:00"
    },
    {
      "path": "faq.html",
      "title": "FAQ",
      "description": "Frequently asked questions about DSCI 310.",
      "author": [],
      "contents": "\nWork in progress…\n\n\n\n",
      "last_modified": "2022-01-04T16:50:56+00:00"
    },
    {
      "path": "index.html",
      "title": "DSCI 310",
      "description": "Course website for DSCI 310: Reproducible and trustworthy workflows for data science.\n",
      "author": [],
      "contents": "\nWelcome to the course website for DSCI 310! Course-specific information is contained within this website. General resources (course notes and textbook readings) are located at the links below:\nDSCI 310 course notes\nR packages\nPython packages\nWe will also be using Canvas for this course. Please ensure you can access the DSCI 310 Canvas course shell at canvas.ubc.ca.\n\n\n\n",
      "last_modified": "2022-01-04T16:50:56+00:00"
    },
    {
      "path": "install_stack_mac_arm.html",
      "title": "macOS (ARM)",
      "description": "DSCI 310 software stack install instructions for macOS (ARM).",
      "author": [],
      "contents": "\n\nContents\nInstallation notes\nWeb browser\nBash shell\nVisual Studio Code\nInstalling\n\nGitHub\nGit\nConfiguring Git user info\nSetting VS Code as the default editor\n\nPython, Conda, and JupyterLab\nPython and Conda\n\nInstalling Python packages\nJupyterLab setup\nR, XQuartz, IRkernel, and RStudio\nR\nXQuartz\nRStudio\nInstalling R packages\nIRkernel\n\nLaTeX\nWebPDF export\n\nDocker\nPost-installation notes\nAttributions\n\nInstallation notes\nIf you have already installed Git, Latex, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly.\nWeb browser\nIn DSCI 310 we will be using many tools that work most reliably on Google Chrome and Firefox (including our online quiz software), so we recommend that you use one of these browsers.\nTo install Chrome, go to https://www.google.com/chrome/, click on “Download Chrome” and follow the instructions on the website to finish the installation.\nTo install Firefox, go to https://www.mozilla.org/en-US/firefox/new/, click on “Download Firefox” and follow the instructions on the website to finish the installation.\nBash shell\nApple recently changed the Mac default shell in the Terminal to Zsh, however, we aim to teach with the same shell across all three operating systems we support, which is the Bash shell. Thus, we ask that you change the default shell in your Terminal to Bash by opening the Terminal (how to video) and typing:\nchsh -s /bin/bash\nYou will have to quit all instances of open Terminals and then restart the Terminal for this to take effect.\nVisual Studio Code\nInstalling\nThe open-source text editor Visual Studio Code (VS Code) is both a powerful text editor and a full-blown Python IDE, which we will use for more complex analysis. You can download and install the macOS version of VS Code from the VS code website https://code.visualstudio.com/download. Once the download is finished, click “Open with Archive utility”, and move the extracted VS Code application from “Downloads” to “Applications”. In addition to reading the getting started instructions, be sure to follow the “Launching from the command line” steps as well.\nYou can test that VS code is installed and can be opened from Terminal by restarting terminal and typing the following command:\ncode --version\nyou should see something like this if you were successful:\n1.62.2\n3a6960b964327f0e3882ce18fcebd07ed191b316\narm64\n\nNote: If you get an error message such as -bash: code: command not found, but you can see the VS Code application has been installed, then something went wrong with setting up the launch from the command line. Try following these instructions again, in particular you might want to try the described manual method of adding VS Code to your path.\n\nGitHub\nIn DSCI 310 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already.\nGit\nWe will be using the command line version of Git as well as Git through RStudio and JupyterLab. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the Xcode command line tools (not all of Xcode), which includes Git.\nOpen Terminal and type the following command to install Xcode command line tools:\nxcode-select --install\nAfter installation, in terminal type the following to ask for the version:\ngit --version\nyou should see something like this (does not have to be the exact same version) if you were successful:\ngit version 2.30.1 (Apple Git-130)\n\nNote: If you run into trouble, please see that Install Git Mac OS section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\nNote: To ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command code ~/.gitconfig) or by typing git config --list --global.\n\nSetting VS Code as the default editor\nTo make programs run from the terminal (such as git) use vscode by default, we will modify ~/.bash_profile. First, open it using VS Code (this will also create the file if it doesn’t already exist):\ncode ~/.bash_profile\n\nNote: If you see any existing lines in your ~/.bash_profile related to a previous Python or R installation, please remove these.\n\nNow append the following lines to ~/.bash_profile:\n# Set the default editor for programs launch from terminal\nEDITOR=\"code --wait\"\nVISUAL=$EDITOR  # Use the same value as for \"EDITOR\" in the line above\nThen save the file and exit VS Code.\n\nNote: Most terminal programs will read the EDITOR environmental variable when determining which editor to use, but some read VISUAL, so we’re setting both to the same value.\n\nIn some cases, VScode is not set as the default text editor for git even after appending the two lines above, so to make sure it is registered properly, also run the following from your terminal:\ngit config --global core.editor \"code --wait\"\nOn MacOS, VScode sometimes reads a different configuration file than your other programs. To avoid this, open your ~/.bashrc file:\ncode ~/.bashrc\nAnd append the following lines:\nif [ -f ~/.bash_profile ]; then . ~/.bash_profile; fi\nPython, Conda, and JupyterLab\nPython and Conda\nIn DSCI 310 we will be using Python and the conda pacakge manager. Currently there is no official native Miniconda installation for Macs with the ARM system architecture. As an alternative, we will install the unofficial Miniforge platform. To install it, first download the OS X arm64 installer.\nEnsure it was placed in your “Downloads” folder. Next, open the terminal and run the following:\nbash /Users/$(whoami)/Downloads/Miniforge3-MacOSX-arm64.sh \nThis will start the installation process, follow the directions that appear in the terminal.\nInitially, you will be greeted with a message like this:\nWelcome to Miniforge3 4.10.3-10\n\nIn order to continue the installation process, please review the license\nagreement.\nPlease, press ENTER to continue\nPress ENTER. You may have to use your arrow keys to scroll down to accept the terms and conditions. Scroll down until you see\nDo you accept the license terms? [yes|no]\nType yes and then hit ENTER. You will be asked if you would like to keep the default installation location. Press ENTER to accept the default location. Now the terminal will show you the installation process. Once it is completed you will see the following message:\nDo you wish the installer to initialize Miniforge3\nby running conda init? [yes|no]\nIMPORTANT: type no and then press ENTER.\nNow, run the following in the terminal to open your .bash_profile in VSCode:\ncode ~/.bash_profile\nNow append the following line to ~/.bash_profile, replace  with your computer’s username, which you can find by typing echo $USER into the terminal.\nexport PATH=\"/Users/<USERNAME>/miniforge3/bin:$PATH\"\nAfterwards, restart the terminal. If the installation was successful, you will see (miniforge3) prepending to your prompt string. To confirm that conda is working, you can ask it which version was installed:\nconda --version\nwhich should return something like this:\nconda 4.11.0\n\nNote: If you see zsh: command not found: conda, see the section on Bash above to set your default Terminal shell to Bash as opposed to Zsh.\nOr, if you see bash: command not found: conda be sure you typed your username correctly when modifying ~/.bash_profile above.\n\nNext, type the following to ask for the version of Python:\npython --version\nwhich should return Python 3.9.0 or greater:\nPython 3.9.5\n\nNote: If instead you see Python 2.7.X you installed the wrong version. Uninstall the Miniconda you just installed (which usually lives in the /opt directory), and try the installation again, selecting Python 3.9.\n\nInstalling Python packages\nTo install packages individually, we can now use the following command: conda install <package-name>. After running that command conda will show you the packages that will be downloaded, and you can press enter to proceed with the installation. If you want to answer yes by default and skip this confirmation step, you can replace conda install with conda install -y. Also note that we may occasionally need to install packages using pip, the standard Python package manager. The installation command is very similar to that of conda: pip install <package-name>. Let’s try this out in the next section, by installing some of the key packages we will use in DSCI 310.\nJupyterLab setup\nJupyterLab is a coding environment that we will be using frequently throughout the course and pandas is one of the key Python data analyses packages. The Jupytext Python package and the JupyterLab git extension facilitates using notebooks in JupyterLab together with Git & GitHub. The spellchecker helps us correcting typos in our writing and the LSP packages fill the same function for our code. Install them via the following commands:\nconda install jupyterlab jupyterlab-git jupyterlab-spellchecker jupytext jupyterlab-lsp jupyter-lsp-python\nTo test that your JupyterLab installation is functional, you can type jupyter lab into a terminal, which should open a new tab in your default browser with the JupyterLab interface. To exit out of JupyterLab you can click File -> Shutdown, or go to the terminal from which you launched JupyterLab and hold Ctrl while pressing c twice.\nR, XQuartz, IRkernel, and RStudio\nR is the second language that we will be using frequently in this course. We will use R both in Jupyter notebooks and in RStudio.\nR\nGo to https://cran.r-project.org/bin/macosx/ and download the latest version of R for Mac. Open the file and follow the installer instructions.\nAfter installation, open a new terminal window and type the following:\nR --version\nYou should see something like this if you were successful:\nR version 4.1.1 (2021-08-10) -- \"Kick Things\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: aarch64-apple-darwin20 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under the terms of the\nGNU General Public License versions 2 or 3.\nFor more information about these matters see\nhttps://www.gnu.org/licenses/.\n\nNote: Although it is possible to install R through conda, we highly recommend not doing so. In case you have already installed R using conda you can remove it by executing conda uninstall r-base.\n\nXQuartz\nSome R packages rely on the dependency XQuartz which no longer ships with the Mac OS, thus we need to install it separately. Download it from here: https://www.xquartz.org/ and follow the installation instructions.\nRStudio\nDownload the macOS Desktop version (not Pro) of RStudio Preview from https://rstudio.com/products/rstudio/download/preview/. Open the file and follow the installer instructions.\nTo see if you were successful, try opening RStudio by clicking on its icon (from Finder, Applications or Launchpad).\nNow we are going to change RStudio’s Insert Pipe shortcut so that it inserts the new native pipe operator |>. Go to Tools > Global Options > Code > Editing and tick the following option:\n\nOnce the change is made you can try in the RStudio console Command + Shift + m to check if works.\nInstalling R packages\nNext, install the key R packages needed for the course by opening up RStudio and typing the following into the R console inside RStudio:\ninstall.packages(c(\"cowplot\", \"GGally\", \"kknn\", \"scales\", \"tidyverse\", \"tidymodels\"))\nIRkernel\nThe IRkernel package is needed to make R work in Jupyter notebooks. To enable this kernel in the notebooks, install by pasting the following command into the RStudio Console:\ninstall.packages('IRkernel')\nNext, open a terminal and type the following (you can’t use RStudio for this step since it doesn’t honor $PATH changes in ~/.bash_profile)\nR -e \"IRkernel::installspec()\"\nTo see if you were successful, try running JupyterLab and check if you have a working R kernel. To launch JupyterLab, type the following in Terminal:\njupyter lab\nA browser should have launched and you should see a page that looks like the screenshot below. Now click on “R” notebook (circled in red on the screenshot below) to launch an JupyterLab with an R kernel.\n\nSometimes a kernel loads, but doesn’t work as expected. To test whether your installation was done correctly now type library(tidyverse) in the code cell and click on the run button to run the cell. If your R kernel works you should see something like the image below:\n\nTo improve the experience of using R in JupyterLab, we will add keyboard shortcuts for inserting the common R operators <- and |>. Go to Settings -> Advanced Settings Editor -> Keyboard Shortcuts and paste the following in the rightmost panel that says User Preferences (replacing the {}):\n{\n    \"shortcuts\": [\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Alt -\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"<- \"}\n            }\n        },\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Accel Shift M\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"|> \"}\n            }\n        }\n    ]\n}\nAfter you have pasted this text, hit the small floppy disk in the top right (or Ctrl + s) to save the settings. Here is a screenshot of what it looks like with the settings saved:\n\nTo check that the extension is working, open JupyterLab, launch an R notebook, and try inserting the operators by pressing Alt + - or Command + Shift + m, respectively. You could add any arbitrary text insertion command the same way, but this is all that we suggest for this course.\nLaTeX\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, run the following command to make sure that /usr/local/bin is writable:\nsudo chown -R $(whoami):admin /usr/local/bin\n\nNote: You might be asked to enter your password during installation.\n\nNow open RStudio and run the following commands to install the tinytex package and setup tinytex:\ninstall.packages('tinytex')\ntinytex::install_tinytex()\nYou can check that the installation is working by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.23 (TeX Live 2022/dev)\nkpathsea version 6.3.4/dev\nCopyright 2021 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.03\nThe above is all we need to have LaTeX work with R Markdown documents, however for Jupyter we need to add several more packages. Do this by opening a terminal and copying the following there press enter:\ntlmgr install eurosym \\\n  adjustbox \\\n  caption \\\n  collectbox \\\n  enumitem \\\n  environ \\\n  fp \\\n  jknapltx \\\n  ms \\\n  parskip \\\n  pgf \\\n  rsfs \\\n  tcolorbox \\\n  titling \\\n  trimspaces \\\n  ucs \\\n  ulem \\\n  upquote \\\n  lwarp \\\n  oberdiek \\\n  pgfplots \\\n  bbm-macros \\\n  cmap \\\n  polyglossia \\\n  gnu-freefont \\\n  fncychap \\\n  wrapfig \\\n  capt-of \\\n  needspace \\\n  tabulary \\\n  varwidth \\\n  fancyhdr \\\n  titlesec \\\n  ucharclasses\nTo test that your latex installation is working with jupyter notebooks, launch jupyter lab from a terminal and open either a new notebook or the same one you used to test IRkernel above. Go to File -> Export notebook as... -> Export Notebook to PDF. If the PDF file is created, your LaTeX environment is set up correctly.\nWebPDF export\nJupyter recently added another way to export notebooks to PDF which does not require Latex and makes the exported PDF look similar to notebooks exported to HTML. This requires the pyppeteer package, which we can install as follows.\nconda install pyppeteer\npyppeteer-install\nTry this by going to File -> Export notebook as... -> Export Notebook to WebPDF.\nDocker\nYou will use Docker to create reproducible, sharable, and shippable computing environments for your analyses. For this you will need a Docker account. You can sign up for a free one here.\nAfter signing-up and signing into the Docker Store, go here: https://store.docker.com/editions/community/docker-ce-desktop-mac and click on the “Get Docker” button on the right hand side of the screen. Then, follow the installation instructions on that screen to install the stable version.\nTo test if Docker is working, after installation open the Docker app by clicking on its icon (from Finder, Applications or Launchpad). Next open Terminal and type the following:\ndocker run hello-world\nyou should see something like this if you were successful:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n93288797bd35: Pull complete\nDigest: sha256:cc15c5b292d8525effc0f89cb299f1804f3a725c8d05e158653a563f15e4f685\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (arm64v8)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\nPost-installation notes\nYou have completed the installation instructions, well done 🙌! We have created a script to help you check that your installation was successful, and to provide instructions for how you can troubleshoot any potential issues. To run this script, please execute the following command from your terminal.\nbash <(curl -Ss https://raw.githubusercontent.com/UBC-DSCI/dsci-310-student/main/src/check_setup.sh)\nThe output from running the script will look something like this:\n# DSCI 310 setup check 1.0\n\nIf a program or package is marked as MISSING,\nthis means that you are missing the required version of that program or package.\nEither it is not installed at all or the wrong version is installed.\nThe required version is indicated with a number and an asterisk (*),\ne.g. 4.* means that all versions starting with 4 are accepted (4.0.1, 4.2.5, etc).\n\nYou can run the following commands to find out which version\nof a program or package is installed (if any):\n```\nname_of_program --version  # For system programs\nconda list  # For Python packages\nR -q -e \"installed.packages()[,c(Package, Version)]\"  # For R packages\n```\n\nChecking program and package versions...\n\n## Operating system\nProductName:    macOS\nProductVersion: 12.0\nBuildVersion:   21A344\n\n## System programs\nOK        rstudio 2021.09.0+351\nOK        R 4.1.1 (2021-08-10) -- \"Kick Things\"\nOK        python 3.9.7\nOK        conda 4.11.0\nOK        bash 3.2.57(1)-release (x86_64-apple-darwin20)\nOK        git 2.30.1 (Apple Git-130)\nOK        make 3.81\nOK        latex 3.141592653-2.6-1.40.23 (TeX Live 2022/dev)\nOK        tlmgr 5 +0200)\nOK        docker 20.10.8, build 3967b7d\nOK        code 1.62.2\n\n## Python packages\nMISSING   pandas=1.*\nMISSING   pyppeteer=0.*\nOK        nbconvert=6.3.0\nOK        jupyterlab=3.2.4\nOK        jupyterlab-git=0.34.0\nOK        jupytext=1.13.3\nOK        jupyterlab-spellchecker=0.7.2\nOK        jupyterlab PDF-generation was successful.\nMISSING   jupyterlab WebPDF-generation failed. It seems like you did not run `pip install \"nbconvert[webpdf]\"` to install pyppeteer.\nOK        jupyterlab HTML-generation was successful.\n\n## R packages\nOK        cowplot=1.1.1\nOK        GGally=2.1.2\nOK        kknn=1.3.1\nOK        scales=1.1.1\nOK        tidyverse=1.3.1\nOK        tidymodels=0.1.4\nOK        tinytex=0.36\nOK        rmarkdown PDF-generation was successful.\nOK        rmarkdown HTML-generation was successful.\n\nThe above output has been saved to the file /Users/jbourak/check_setup.log\ntogether with system configuration details and any detailed error messages about PDF and HTML generation.\nYou can open this folder in your file browser by typing `open .` (without the surrounding backticks).\nAs you can see at the end of the output, a log file is saved in your current directory. We might ask you to upload this file if we need to troubleshoot your installation, so that we can help you more effectively. If any of your packages are marked as “MISSING” you will need to figure out what is wrong and possibly reinstall them. Once all packages are marked as “OK” we will ask you to submit this log file, so that we can confirm that your installation was successful. Details on where to submit will be provided later.\n\nNote: In general you should be careful running scripts unless they come from a trusted source as in this case (just like how you should be careful when downloading and installing programs on your computer).\n\nAttributions\nUBC MDS Software Stack Install Instructions\nHarvard CS109\nUBC STAT 545 licensed under the CC BY-NC 3.0\nSoftware Carpentry\n\n\n\n",
      "last_modified": "2022-01-04T16:50:57+00:00"
    },
    {
      "path": "install_stack_mac_x86.html",
      "title": "macOS (x86)",
      "description": "DSCI 310 software stack install instructions for macOS (x86).",
      "author": [],
      "contents": "\n\nContents\nInstallation notes\nWeb browser\nBash shell\nVisual Studio Code\nInstalling\n\nGitHub\nGit\nConfiguring Git user info\nSetting VS Code as the default editor\n\nPython, Conda, and JupyterLab\nPython and Conda\n\nInstalling Python packages\nJupyterLab setup\nR, XQuartz, IRkernel, and RStudio\nR\nXQuartz\nRStudio\nInstalling R packages\nIRkernel\n\nLaTeX\nWebPDF export\n\nDocker\nPost-installation notes\nAttributions\n\nInstallation notes\nIf you have already installed Git, Latex, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly.\nWeb browser\nIn DSCI 310 we will be using several tools that work most reliably on Google Chrome and Firefox (including our online quiz software), so we recommend that you use one of these browsers.\nTo install Chrome, go to https://www.google.com/chrome/, click on “Download Chrome” and follow the instructions on the website to finish the installation.\nTo install Firefox, go to https://www.mozilla.org/en-US/firefox/new/, click on “Download Firefox” and follow the instructions on the website to finish the installation.\nBash shell\nApple recently changed the Mac default shell in the Terminal to Zsh, however, we aim to teach with the same shell across all three operating systems we support, which is the Bash shell. Thus, we ask that you change the default shell in your Terminal to Bash by opening the Terminal (how to video) and typing:\nchsh -s /bin/bash\nYou will have to quit all instances of open Terminals and then restart the Terminal for this to take effect.\nVisual Studio Code\nInstalling\nThe open-source text editor Visual Studio Code (VS Code) is both a powerful text editor and a full-blown Python IDE, which we will use for more complex analysis. You can download and install the macOS version of VS Code from the VS code website https://code.visualstudio.com/download. Once the download is finished, click “Open with Archive utility”, and move the extracted VS Code application from “Downloads” to “Applications”. In addition to reading the getting started instructions, be sure to follow the “Launching from the command line” steps as well.\nYou can test that VS code is installed and can be opened from Terminal by restarting terminal and typing the following command:\ncode --version\nyou should see something like this if you were successful:\n1.61.2\n6cba118ac49a1b88332f312a8f67186f7f3c1643\nx64\n\nNote: If you get an error message such as -bash: code: command not found, but you can see the VS Code application has been installed, then something went wrong with setting up the launch from the command line. Try following these instructions again, in particular you might want to try the described manual method of adding VS Code to your path.\n\nGitHub\nIn DSCI 310 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already.\nGit\nWe will be using the command line version of Git as well as Git through RStudio and JupyterLab. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the Xcode command line tools (not all of Xcode), which includes Git.\nOpen Terminal and type the following command to install Xcode command line tools:\nxcode-select --install\nAfter installation, in terminal type the following to ask for the version:\ngit --version\nyou should see something like this (does not have to be the exact same version) if you were successful:\ngit version 2.24.2 (Apple Git-127)\n\nNote: If you run into trouble, please see that Install Git Mac OS section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\nNote: To ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command code ~/.gitconfig) or by typing git config --list --global.\n\nSetting VS Code as the default editor\nTo make programs run from the terminal (such as git) use vscode by default, we will modify ~/.bash_profile. First, open it using VS Code (this will also create the file if it doesn’t already exist):\ncode ~/.bash_profile\n\nNote: If you see any existing lines in your ~/.bash_profile related to a previous Python or R installation, please remove these.\n\nNow append the following lines to ~/.bash_profile:\n# Set the default editor for programs launch from terminal\nEDITOR=\"code --wait\"\nVISUAL=$EDITOR  # Use the same value as for \"EDITOR\" in the line above\nThen save the file and exit VS Code. Ensure there is a blank line at the end of the file.\n\nNote: Most terminal programs will read the EDITOR environmental variable when determining which editor to use, but some read VISUAL, so we’re setting both to the same value.\n\nIn some cases, VScode is not set as the default text editor for git even after appending the two lines above, so to make sure it is registered properly, also run the following from your terminal:\ngit config --global core.editor \"code --wait\"\nOn MacOS, VScode sometimes reads a different configuration file than your other programs. To avoid this, open your ~/.bashrc file:\ncode ~/.bashrc\nAnd append the following lines:\nif [ -f ~/.bash_profile ]; then . ~/.bash_profile; fi\nPython, Conda, and JupyterLab\nPython and Conda\nIn DSCI 310 we will be using Python and the conda pacakge manager. To install them, we will use the Miniconda platform (read more here). Then Miniconda MacOSX 64-bit pkg install for Python 3.x can be downloaded here..\nAfter installation, restart the terminal. If the installation was successful, you will see (base) prepending to your prompt string. To confirm that conda is working, you can ask it which version was installed:\nconda --version\nwhich should return something like this:\nconda 4.10.3\n\nNote: If you see zsh: command not found: conda, see the section on Bash above to set your default Terminal shell to Bash as opposed to Zsh.\n\nNext, type the following to ask for the version of Python:\npython --version\nwhich should return Python 3.9.0 or greater:\nPython 3.9.5\n\nNote: If instead you see Python 2.7.X you installed the wrong version. Uninstall the Miniconda you just installed (which usually lives in the /opt directory), and try the installation again, selecting Python 3.9.\n\nInstalling Python packages\nconda installs Python packages from different online repositories which are called “channels”. A package needs to go through thorough testing before it is included in the default channel, which is good for stability, but also means that new versions will be delayed and fewer packages are available overall. There is a community-driven effort called the conda-forge (read more here), which provides more up to date packages. To enable us to access the most up to date version of the Python packages we are going to use, we will add the more up to date channel. To add the conda-forge channel by typing the following in the terminal:\nconda config --add channels conda-forge\nTo install packages individually, we can now use the following command: conda install <package-name>. After running that command conda will show you the packages that will be downloaded, and you can press enter to proceed with the installation. If you want to answer yes by default and skip this confirmation step, you can replace conda install with conda install -y. Also note that we may occasionally need to install packages using pip, the standard Python package manager. The installation command is very similar to that of conda: pip install <package-name>. Let’s try this out in the next section, by installing some of the key packages we will use in DSCI 310.\nJupyterLab setup\nWe will be using JupyterLab as our main coding environment and pandas is one of the key data analyses packages. The Jupytext Python package and the JupyterLab git extension facilitates using notebooks in JupyterLab together with Git & GitHub. The spellchecker helps us correcting typos in our writing and the LSP packages fill the same function for our code. Install them via the following commands:\nconda install jupyterlab jupyterlab-git jupyterlab-spellchecker jupytext jupyterlab-lsp jupyter-lsp-python\nTo test that your JupyterLab installation is functional, you can type jupyter lab into a terminal, which should open a new tab in your default browser with the JupyterLab interface. To exit out of JupyterLab you can click File -> Shutdown, or go to the terminal from which you launched JupyterLab and hold Ctrl while pressing c twice.\nR, XQuartz, IRkernel, and RStudio\nR is the second language that we will be using frequently in this course. We will use R both in Jupyter notebooks and in RStudio.\nR\nGo to https://cran.r-project.org/bin/macosx/ and download the latest version of R for Mac. Open the file and follow the installer instructions.\nAfter installation, open a new terminal window and type the following:\nR --version\nYou should see something like this if you were successful:\nR version 4.0.0 (2020-04-24) -- \"Arbor Day\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin17.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under the terms of the\nGNU General Public License versions 2 or 3.\nFor more information about these matters see\nhttps://www.gnu.org/licenses/.\n\nNote: Although it is possible to install R through conda, we highly recommend not doing so. In case you have already installed R using conda you can remove it by executing conda uninstall r-base.\n\nXQuartz\nSome R packages rely on the dependency XQuartz which no longer ships with the Mac OS, thus we need to install it separately. Download it from here: https://www.xquartz.org/ and follow the installation instructions.\nRStudio\nDownload the macOS Desktop version (not Pro) of RStudio Preview from https://rstudio.com/products/rstudio/download/preview/. Open the file and follow the installer instructions.\nTo see if you were successful, try opening RStudio by clicking on its icon (from Finder, Applications or Launchpad). It should open and look something like this picture below:\n\nNow we are going to change RStudio’s Insert Pipe shortcut so that it inserts the new native pipe operator |>. Go to Tools > Global Options > Code > Editing and tick the following option:\n\nOnce the change is made you can try in the RStudio console Command + Shift + m to check if works.\nInstalling R packages\nNext, install the key R packages needed for the course by opening up RStudio and typing the following into the R console inside RStudio:\ninstall.packages(c(\"cowplot\", \"GGally\", \"kknn\", \"scales\", \"tidyverse\", \"tidymodels\"))\nIRkernel\nThe IRkernel package is needed to make R work in Jupyter notebooks. To enable this kernel in the notebooks, install by pasting the following command into the RStudio Console:\ninstall.packages('IRkernel')\nNext, open a terminal and type the following (you can’t use RStudio for this step since it doesn’t honor $PATH changes in ~/.bash_profile)\nR -e \"IRkernel::installspec()\"\nTo see if you were successful, try running JupyterLab and check if you have a working R kernel. To launch the JupyterLab type the following in Terminal:\njupyter lab\nA browser should have launched and you should see a page that looks like the screenshot below. Now click on “R” notebook (circled in red on the screenshot below) to launch an JupyterLab with an R kernel.\n\nSometimes a kernel loads, but doesn’t work as expected. To test whether your installation was done correctly now type library(tidyverse) in the code cell and click on the run button to run the cell. If your R kernel works you should see something like the image below:\n\nTo improve the experience of using R in JupyterLab, we will add keyboard shortcuts for inserting the common R operators <- and |>. Go to Settings -> Advanced Settings Editor -> Keyboard Shortcuts and paste the following in the rightmost panel that says User Preferences (replacing the {}):\n{\n    \"shortcuts\": [\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Alt -\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"<- \"}\n            }\n        },\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Accel Shift M\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"|> \"}\n            }\n        }\n    ]\n}\nAfter you have pasted this text, hit the small floppy disk in the top right (or Ctrl + s) to save the settings. Here is a screenshot of what it looks like with the settings saved:\n\nTo check that the extension is working, open JupyterLab, launch an R notebook, and try inserting the operators by pressing Alt + - or Command + Shift + m, respectively. You could add any arbitrary text insertion command the same way, but this is all that we suggest for this course.\nLaTeX\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, run the following command to make sure that /usr/local/bin is writable:\nsudo chown -R $(whoami):admin /usr/local/bin\n\nNote: You might be asked to enter your password during installation.\n\nNow open RStudio and run the following commands to install the tinytex package and setup tinytex:\ninstall.packages('tinytex')\ntinytex::install_tinytex()\nYou can check that the installation is working by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.23 (TeX Live 2022/dev)\nkpathsea version 6.3.4/dev\nCopyright 2021 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.03\nThe above is all we need to have LaTeX work with R Markdown documents, however for Jupyter we need to add several more packages. Do this by opening a terminal and copying the following there press enter:\ntlmgr install eurosym \\\n  adjustbox \\\n  caption \\\n  collectbox \\\n  enumitem \\\n  environ \\\n  fp \\\n  jknapltx \\\n  ms \\\n  parskip \\\n  pgf \\\n  rsfs \\\n  tcolorbox \\\n  titling \\\n  trimspaces \\\n  ucs \\\n  ulem \\\n  upquote \\\n  lwarp \\\n  oberdiek \\\n  pgfplots \\\n  bbm-macros \\\n  cmap \\\n  polyglossia \\\n  gnu-freefont \\\n  fncychap \\\n  wrapfig \\\n  capt-of \\\n  needspace \\\n  tabulary \\\n  varwidth \\\n  fancyhdr \\\n  titlesec \\\n  ucharclasses\nTo test that your latex installation is working with jupyter notebooks, launch jupyter lab from a terminal and open either a new notebook or the same one you used to test IRkernel above. Go to File -> Export notebook as... -> Export Notebook to PDF. If the PDF file is created, your LaTeX environment is set up correctly.\nWebPDF export\nJupyter recently added another way to export notebooks to PDF which does not require Latex and makes the exported PDF look similar to notebooks exported to HTML. This requires the pyppeteer package, which we can install as follows.\nconda install pyppeteer\npyppeteer-install\nTry this by going to File -> Export notebook as... -> Export Notebook to WebPDF.\nDocker\nYou will use Docker to create reproducible, sharable, and shippable computing environments for your analyses. For this you will need a Docker account. You can sign up for a free one here.\nAfter signing-up and signing into the Docker Store, go here: https://store.docker.com/editions/community/docker-ce-desktop-mac and click on the “Get Docker” button on the right hand side of the screen. Then, follow the installation instructions on that screen to install the stable version.\nTo test if Docker is working, after installation open the Docker app by clicking on its icon (from Finder, Applications or Launchpad). Next open Terminal and type the following:\ndocker run hello-world\nyou should see something like this if you were successful:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:451ce787d12369c5df2a32c85e5a03d52cbcef6eb3586dd03075f3034f10adcd\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\nPost-installation notes\nYou have completed the installation instructions, well done 🙌! We have created a script to help you check that your installation was successful, and to provide instructions for how you can troubleshoot any potential issues. To run this script, please execute the following command from your terminal.\nbash <(curl -Ss https://raw.githubusercontent.com/UBC-DSCI/dsci-310-student/main/src/check_setup.sh)\nThe output from running the script will look something like this:\n# DSCI 310 setup check 1.0\n\nIf a program or package is marked as MISSING,\nthis means that you are missing the required version of that program or package.\nEither it is not installed at all or the wrong version is installed.\nThe required version is indicated with a number and an asterisk (*),\ne.g. 4.* means that all versions starting with 4 are accepted (4.0.1, 4.2.5, etc).\n\nYou can run the following commands to find out which version\nof a program or package is installed (if any):\n```\nname_of_program --version  # For system programs\nconda list  # For Python packages\nR -q -e \"installed.packages()[,c(Package, Version)]\"  # For R packages\n```\n\nChecking program and package versions...\n\n## Operating system\nProductName:    macOS\nProductVersion: 12.0\nBuildVersion:   21A344\n\n## System programs\nOK        rstudio 2021.09.0+351\nOK        R 4.1.1 (2021-08-10) -- \"Kick Things\"\nOK        python 3.9.7\nOK        conda 4.11.0\nOK        bash 3.2.57(1)-release (x86_64-apple-darwin20)\nOK        git 2.30.1 (Apple Git-130)\nOK        make 3.81\nOK        latex 3.141592653-2.6-1.40.23 (TeX Live 2022/dev)\nOK        tlmgr 5 +0200)\nOK        docker 20.10.8, build 3967b7d\nOK        code 1.62.2\n\n## Python packages\nMISSING   pandas=1.*\nMISSING   pyppeteer=0.*\nOK        nbconvert=6.3.0\nOK        jupyterlab=3.2.4\nOK        jupyterlab-git=0.34.0\nOK        jupytext=1.13.3\nOK        jupyterlab-spellchecker=0.7.2\nOK        jupyterlab PDF-generation was successful.\nMISSING   jupyterlab WebPDF-generation failed. It seems like you did not run `pip install \"nbconvert[webpdf]\"` to install pyppeteer.\nOK        jupyterlab HTML-generation was successful.\n\n## R packages\nOK        cowplot=1.1.1\nOK        GGally=2.1.2\nOK        kknn=1.3.1\nOK        scales=1.1.1\nOK        tidyverse=1.3.1\nOK        tidymodels=0.1.4\nOK        tinytex=0.36\nOK        rmarkdown PDF-generation was successful.\nOK        rmarkdown HTML-generation was successful.\n\nThe above output has been saved to the file /Users/jbourak/check_setup.log\ntogether with system configuration details and any detailed error messages about PDF and HTML generation.\nYou can open this folder in your file browser by typing `open .` (without the surrounding backticks).\nAs you can see at the end of the output, a log file is saved in your current directory. We might ask you to upload this file if we need to troubleshoot your installation, so that we can help you more effectively. If any of your packages are marked as “MISSING” you will need to figure out what is wrong and possibly reinstall them. Once all packages are marked as “OK” we will ask you to submit this log file, so that we can confirm that your installation was successful. Details on where to submit will be provided later.\n\nNote: In general you should be careful running scripts unless they come from a trusted source as in this case (just like how you should be careful when downloading and installing programs on your computer).\n\nAttributions\nUBC MDS Software Stack Install Instructions\nHarvard CS109\nUBC STAT 545 licensed under the CC BY-NC 3.0\nSoftware Carpentry\n\n\n\n",
      "last_modified": "2022-01-04T16:50:58+00:00"
    },
    {
      "path": "install_stack_ubuntu.html",
      "title": "Ubuntu",
      "description": "DSCI 310 software stack install instructions for Ubuntu.",
      "author": [],
      "contents": "\n\nContents\nInstallation notes\nUbuntu software settings\nWeb browser\nVisual Studio Code\nGitHub\nGit\nConfiguring Git user info\nSetting VS Code as the default editor\n\nPython, Conda, and JupyterLab\nPython and Conda\n\nInstalling Python packages\nJupyterLab setup\nR, IRkernel, and RStudio\nR\nRStudio\nInstalling R packages\nIRkernel\n\nLaTeX\nWebPDF export\n\nDocker\nPost-installation notes\nAttributions\n\nInstallation notes\nIf you have already installed Git, Latex, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we require all students to install the software stack the same way.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly.\nUbuntu software settings\nTo ensure that you are installing the right version of the software in this guide, open “Software & Updates” and make sure that the boxes in the screenshot are checked (this is the default configuration).\n\nWeb browser\nIn DSCI 310 we will be using several tools that work most reliably on Google Chrome and Firefox (including our online quiz software), so we recommend that you use one of these browsers.\nFirefox comes preinstalled with Ubuntu, so there is not need to download anything.\nTo install Chrome, go to https://www.google.com/chrome/, click on “Download Chrome” choose the deb-file, download it to your computer and click on the downloaded file to install it.\n\nNote: If you select “open with” and try to open the file directly with the Ubuntu Software app instead of downloading it first, the software app might complain that the file is not supported.\n\nVisual Studio Code\nThe open-source text editor Visual Studio Code (VS Code) is both a powerful text editor and a full-blown Python IDE, which we will use for more complex analysis. You can install VS Code either via the Snap store/Ubuntu software app through this link or via the downloadable deb-file from the VS code website https://code.visualstudio.com/download. The getting started instructions are here: https://code.visualstudio.com/docs/?dv=linux64_deb.\nYou can test that VS code is installed and can be opened from Terminal by restarting terminal and typing the following command:\ncode --version\nyou should see something like this if you were successful:\n1.59.0\nd5e9aa0227e057a60c82568bf31c04730dc15dcd\nx64\nGitHub\nIn DSCI 310 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already.\nGit\nWe will be using the command line version of Git as well as Git through RStudio and JupyterLab. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the following commands:\nsudo apt update\nsudo apt install git\nYou can check your git version with the following command:\ngit --version\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\nNote: To ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command code ~/.gitconfig) or by typing git config --list --global.\n\nSetting VS Code as the default editor\nTo make programs run from the terminal (such as git) use VS Code by default, we will modify the bash configuration file ~/.bashrc. First, open it using VS Code:\ncode ~/.bashrc\n\nNote: If you see any existing lines in your ~/.bashrc related to a previous Python or R installation, please remove these.\n\nAppend the following lines:\n# Set the default editor for programs launch from terminal\nEDITOR=\"code --wait\"\nVISUAL=$EDITOR  # Use the same value as for \"EDITOR\" in the line above\n\nThen save the file and exit VS Code.\n\nNote: Most terminal programs will read the EDITOR environmental variable when determining which editor to use, but some read VISUAL, so we’re setting both to the same value.\n\nIn some cases, VScode is not set as the default text editor for git even after appending the two lines above, so to make sure it is registered properly, also run the following from your terminal:\ngit config --global core.editor \"code --wait\"\nPython, Conda, and JupyterLab\nPython and Conda\nIn DSCI 310 we will be using Python and the conda package manager. To install Python and the conda package manager, we will use the Miniconda platform (read more here), for which the Python 3.x 64-bit version can be downloaded here.\nOnce the download is finished, open Terminal and execute the following commands:\nbash path/to/file\n\nNote: Most often this file is downloaded to the Downloads directory, and thus the command will look like this:\nbash Downloads/Miniconda3-latest-Linux-x86_64.sh\n\nThe instructions for the installation will then appear:\nPress Enter.\nOnce the licence agreement shows, you can press space scroll down, or press q to skip reading it.\nType yes and press enter to accept the licence agreement.\nPress enter to accept the default installation location.\nType yes and press enter to instruct the installer to run conda init, which makes conda available from the terminal/shell.\nAfter installation, restart the terminal. If the installation was successful, you will see (base) prepending to your prompt string. To confirm that conda is working, you can ask it which version was installed:\nconda --version\nwhich should return something like this:\nconda 4.10.3\nNext, type the following to ask for the version of Python:\npython --version\nwhich should return Python 3.9.0 or greater:\nPython 3.9.5\n\nNote: If instead you see Python 2.7.X you installed the wrong version. Uninstall the Miniconda you just installed (which usually lives in the /home/<USER> directory), and try the installation again, selecting Python 3.9.\n\nInstalling Python packages\nconda installs Python packages from different online repositories which are called “channels”. A package needs to go through thorough testing before it is included in the default channel, which is good for stability, but also means that new versions will be delayed and fewer packages are available overall. There is a community-driven effort called the conda-forge (read more here), which provides more up to date packages. To enable us to access the most up to date version of the Python packages we are going to use, we will add the more up to date channel. To add the conda-forge channel by typing the following in the terminal:\nconda config --add channels conda-forge\nTo install packages individually, we can now use the following command: conda install <package-name>. After running that command conda will show you the packages that will be downloaded, and you can press enter to proceed with the installation. If you want to answer yes by default and skip this confirmation step, you can replace conda install with conda install -y. Also note that we may occasionally need to install packages using pip, the standard Python package manager. The installation command is very similar to that of conda: pip install <package-name>. Let’s try this out in the next section, by installing some of the key packages we will use in MDS.\nJupyterLab setup\nJupyterLab is a coding environment that we will be using frequently throughout the course and pandas is one of the key Python data analyses packages. The Jupytext Python package and the JupyterLab git extension facilitates using notebooks in JupyterLab together with Git & GitHub. The spellchecker helps us correcting typos in our writing and the LSP packages fill the same function for our code. Install them via the following commands:\nconda install pandas jupyterlab jupyterlab-git jupyterlab-spellchecker jupytext jupyterlab-lsp jupyter-lsp-python\nTo test that your JupyterLab installation is functional, you can type jupyter lab into a terminal, which should open a new tab in your default browser with the JupyterLab interface. To exit out of JupyterLab you can click File -> Shutdown, or go to the terminal from which you launched JupyterLab and hold Ctrl while pressing c twice.\nR, IRkernel, and RStudio\nR is the second language that we will be using frequently in this course. We will use R both in Jupyter notebooks and in RStudio.\nR\nThe version of R available in the default Ubuntu repositories is older than the one we will be using in this course. To obtain the latest R packages, we need to add a new repository which is maintained directly by the r-project. To do this, first add the key for this repository by typing the following:\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\nThen add the URL to the repository:\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\nNext, install r-base and r-base-dev (useful for compiling R packages from source):\nsudo apt install r-base r-base-dev\nAfter installation, type the following in a new terminal window:\nR --version\nYou should see something like this if you were successful:\nR version 4.1.0 (2021-05-18) -- \"Camp Pontanezen\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under the terms of the\nGNU General Public License versions 2 or 3.\nFor more information about these matters see\nhttps://www.gnu.org/licenses/.\n\nNote: See this page for additoinal instructions if you run into troubles while installing R.\n\n\nNote: Although it is possible to install R through conda, we highly recommend not doing so. In case you have already installed R using conda you can remove it by executing conda uninstall r-base.\n\nRStudio\nDownload the Ubuntu 18/Debian 10 Desktop version (not Pro) of RStudio Preview from https://rstudio.com/products/rstudio/download/preview/. Open the file and follow the installer instructions.\n\nNote: There is not yet an official RStudio version for Ubuntu 20.04, so it is recommended to use the Ubuntu 18 version. Also note that if you select “open with” and try to open the file directly with the Ubuntu Software app instead of downloading it first, the software app might complain that the file is not supported.\n\nTo see if you were successful, try opening RStudio by clicking on its icon or typing rstudio in a terminal.\n\nNote: Since we installed RStudio directly from a deb file rather than from a repository or a snap package, it will not be updated when we run sudo apt upgrade and not automatically as for snap packages. Instead, RStudio will notify you of any available updates when the program is launched.\n\nNow we are going to change RStudio’s Insert Pipe shortcut so that it inserts the new native pipe operator |>. Go to Tools > Global Options > Code > Editing and tick the following option:\n\nOnce the change is made you can try in the RStudio console Control + Shift + m to check if works.\nInstalling R packages\nThe tidyverse R package (and some others) have external dependencies on Ubuntu outside of R. We need to install these first before we install such R packages:\nsudo apt install libcurl4-openssl-dev libssl-dev libxml2-dev\nNext, install the key R packages needed for the course by opening up RStudio and typing the following into the R console inside RStudio:\ninstall.packages(c(\"cowplot\", \"GGally\", \"kknn\", \"scales\", \"tidyverse\", \"tidymodels\"))\nIRkernel\nThe IRkernel package is needed to make R work in Jupyter notebooks. To enable this kernel in the notebooks, install by pasting the following command into the RStudio Console:\ninstall.packages('IRkernel')\nIRkernel::installspec()\n\nNote: If you see an error message saying “jupyter-client has to be installed…”, close RStudio and run the following line from your terminal instead R -e \"IRkernel::installspec()\".\n\nTo see if you were successful, try running JupyterLab and check if you have a working R kernel. To launch JupyterLab, type the following in a terminal:\njupyter lab\nA browser should have launched and you should see a page that looks like the screenshot below. Now click on “R” notebook (circled in red on the screenshot below) to launch an JupyterLab with an R kernel.\n\nSometimes a kernel loads, but doesn’t work as expected. To test whether your installation was done correctly now type library(tidyverse) in the code cell and click on the run button to run the cell. If your R kernel works you should see something like the image below:\n\nTo improve the experience of using R in JupyterLab, we will add keyboard shortcuts for inserting the common R operators <- and |>. Go to Settings -> Advanced Settings Editor -> Keyboard Shortcuts and paste the following in the rightmost panel that says User Preferences (replacing the {}):\n{\n    \"shortcuts\": [\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Alt -\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"<- \"}\n            }\n        },\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Accel Shift M\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"|> \"}\n            }\n        }\n    ]\n}\nAfter you have pasted this text, hit the small floppy disk in the top right (or Ctrl + s) to save the settings. Here is a screenshot of what it looks like with the settings saved:\n\nTo check that the extension is working, open JupyterLab, launch an R notebook, and try inserting the operators by pressing Alt + - or Shift + Ctrl + m, respectively. You could add any arbitrary text insertion command the same way, but this is all that is required for MDS.\nLaTeX\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, open RStudio and run the following commands to install the tinytex package and setup tinytex:\ninstall.packages('tinytex')\ntinytex::install_tinytex()\nThe above is all we need to have LaTeX work with R Markdown documents, however for Jupyter we need to add the TinyTex executables to our PATH and install several more packages (PATH is a collection of directories which contain the available executable programs on your computer).\nTo append the TinyTex executables to our PATH we need to edit our .bashrc file. The TinyTex executables are usually installed in ~/bin. Thus, add the lines below to the bottom of your .bashrc file (which you can open by code ~/.bashrc) and save the file:\n# Append TinyTex executables to the path\nexport PATH=\"$PATH:~/bin\"\nWhen you launch a new terminal instance, this directory will have been added to your path (you can check this by running echo $PATH in the terminal). Now you can check that the latex installation is working by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.14159265-2.6-1.40.21 (TeX Live 2020)\nkpathsea version 6.3.2\nCopyright 2020 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.02\nNext, install the additional LaTeX packages needed for Jupyter by pasting the following into the new terminal instance and press enter:\ntlmgr install eurosym \\\n  adjustbox \\\n  caption \\\n  collectbox \\\n  enumitem \\\n  environ \\\n  fp \\\n  jknapltx \\\n  ms \\\n  parskip \\\n  pgf \\\n  rsfs \\\n  tcolorbox \\\n  titling \\\n  trimspaces \\\n  ucs \\\n  ulem \\\n  upquote \\\n  lwarp \\\n  oberdiek \\\n  pgfplots \\\n  bbm-macros \\\n  cmap \\\n  polyglossia \\\n  gnu-freefont \\\n  fncychap \\\n  wrapfig \\\n  capt-of \\\n  needspace \\\n  tabulary \\\n  varwidth \\\n  fancyhdr \\\n  titlesec \\\n  ucharclasses\nTo test that your latex installation is working with jupyter notebooks, launch jupyter lab from a terminal and open either a new notebook or the same one you used to test IRkernel above. Go to File -> Export notebook as... -> Export Notebook to PDF. If the PDF file is created, your LaTeX environment is set up correctly.\nWebPDF export\nJupyter recently added another way to export notebooks to PDF which does not require Latex and makes the exported PDF look similar to notebooks exported to HTML. This requires the pyppeteer package, which we can install as follows.\nconda install pyppeteer\npyppeteer-install\nTry this by going to File -> Export notebook as... -> Export Notebook to WebPDF.\nDocker\nYou will use Docker to create reproducible, sharable, and shippable computing environments for your analyses. For this you will need a Docker account. You can sign up for a free one here.\nAfter signing-up and signing into the Docker Store, go here: https://store.docker.com/editions/community/docker-ce-desktop-mac and click on the “Get Docker” button on the right hand side of the screen. Then, follow the installation instructions on that screen to install the stable version.\nNext, follow the Linux post installation steps here so that you can run Docker without typing sudo (only the subheading “Managing docker as a non-root user”). Confirm that docker is working by following the verification instructions on that same page.\nPost-installation notes\nYou have completed the installation instructions, well done 🙌! We have created a script to help you check that your installation was successful, and to provide instructions for how you can troubleshoot any potential issues. To run this script, please execute the following command from your terminal.\nbash <(curl -Ss https://raw.githubusercontent.com/UBC-DSCI/dsci-310-student/main/src/check_setup.sh)\nThe output from running the script will look something like this:\n# DSCI 310 setup check 1.0\n\nIf a program or package is marked as MISSING,\nthis means that you are missing the required version of that program or package.\nEither it is not installed at all or the wrong version is installed.\nThe required version is indicated with a number and an asterisk (*),\ne.g. 4.* means that all versions starting with 4 are accepted (4.0.1, 4.2.5, etc).\n\nYou can run the following commands to find out which version\nof a program or package is installed (if any):\n```\nname_of_program --version  # For system programs\nconda list  # For Python packages\nR -q -e \"installed.packages()[,c(Package, Version)]\"  # For R packages\n```\n\nChecking program and package versions...\n\n## Operating system\nOperating System: Ubuntu 20.04\nArchitecture:     x86-64\nKernel:           Linux 5.11.0-7620-generic\n\n## System programs\nOK        rstudio 1.4.1725\nOK        R 4.1.0 (2021-05-18) -- \"Camp Pontanezen\"\nOK        python 3.9.1\nOK        conda 4.10.3\nOK        bash 5.1.4(1)-release (x86_64-pc-linux-gnu)\nOK        git 2.32.0\nOK        make 4.3\nOK        latex 3.141592653-2.6-1.40.23 (TeX Live 2021)\nOK        tlmgr revision 59291 (2021-05-21 05:14:40 +0200)\nOK        docker 20.10.7, build f0df350\nOK        code 1.58.2\n\n## Python packages\nMISSING   pandas=1.*\nMISSING   pyppeteer=0.*\nOK        nbconvert=6.3.0\nOK        jupyterlab=3.2.4\nOK        jupyterlab-git=0.34.0\nOK        jupytext=1.13.3\nOK        jupyterlab-spellchecker=0.7.2\nOK        jupyterlab PDF-generation was successful.\nMISSING   jupyterlab WebPDF-generation failed. It seems like you did not run `pip install \"nbconvert[webpdf]\"` to install pyppeteer.\nOK        jupyterlab HTML-generation was successful.\n\n## R packages\nOK        cowplot=1.1.1\nOK        GGally=2.1.2\nOK        kknn=1.3.1\nOK        scales=1.1.1\nOK        tidyverse=1.3.1\nOK        tidymodels=0.1.4\nOK        tinytex=0.36\nOK        rmarkdown PDF-generation was successful.\nOK        rmarkdown HTML-generation was successful.\n\nThe above output has been saved to the file /home/joel/check-setup-mds.log\ntogether with system configuration details and any detailed error messages about PDF and HTML generation.\nYou can open this folder in your file browser by typing `xdg-open .` (without the surrounding backticks).\nAs you can see at the end of the output, a log file is saved in your current directory. We might ask you to upload this file if we need to troubleshoot your installation, so that we can help you more effectively. If any of your packages are marked as “MISSING” you will need to figure out what is wrong and possibly reinstall them. Once all packages are marked as “OK” we will ask you to submit this log file, so that we can confirm that your installation was successful. Details on where to submit will be provided later.\n\nNote: In general you should be careful running scripts unless they come from a trusted source as in this case (just like how you should be careful when downloading and installing programs on your computer).\n\nAttributions\nUBC MDS Software Stack Install Instructions\nHarvard CS109\nUBC STAT 545 licensed under the CC BY-NC 3.0\nSoftware Carpentry\n\n\n\n",
      "last_modified": "2022-01-04T16:50:58+00:00"
    },
    {
      "path": "install_stack_windows.html",
      "title": "Windows",
      "description": "DSCI 310 software stack install instructions for Windows.",
      "author": [],
      "contents": "\n\nContents\nInstallation notes\nWeb browser\nVisual Studio Code\nGitHub\nGit, Bash, and Windows Terminal\nConfiguring Git user info\nSetting VS Code as the default editor\n\nPython, Conda, and JupyterLab\nPython and Conda\nIntegrating Python with the Git Bash terminal\n\nInstalling Python packages\nJupyterLab setup\nR, IRkernel, Rtools, and RStudio\nR\nRStudio\nRtools\nInstalling R packages\nIRkernel\n\nLaTeX\nWebPDF export\n\nMake\nDocker\nPost-installation notes\nAttributions\n\nInstallation notes\nIf you have already installed Git, Latex, Make, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we require all students to install the software stack the same way.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly.\nWeb browser\nIn DSCI 310 we will be using several tools that work most reliably on Google Chrome and Firefox (including our online quiz software), so we recommend that you use one of these browsers.\nTo install Chrome, go to https://www.google.com/chrome/, click on “Download Chrome” and follow the instructions on the website to finish the installation.\nTo install Firefox, go to https://www.mozilla.org/en-US/firefox/new/, click on “Download Firefox” and follow the instructions on the website to finish the installation.\nVisual Studio Code\nThe open-source text editor Visual Studio Code (VS Code) is both a powerful text editor and a full-blown Python IDE, which we will use for more complex analysis. Go to https://code.visualstudio.com/download and download the windows version of VS Code. After the download has finished, run the installer and accept the default configuration for all pages except for the following:\nOptional On the Select Additional Tasks page, check “Create a desktop icon” under “Additional icons”.\nAlso on the Select Additional Tasks page check all four boxes under “Other”\n“Add ‘Open with Code’ action to Windows file context menu”\n“Add ‘Open with Code’ action to Windows directory context menu”\n“Register Code as an editor for supported file types”\n“Add to PATH” (this should be selected by default).\n\n\nGitHub\nIn DSCI 310 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already.\nGit, Bash, and Windows Terminal\nAlthough these three are separate programs, we are including them in the same section here since they are packaged together in the same installer on Windows. Briefly, we will be using the Bash shell to interact with our computers via a command line interface, Git to keep a version history of our files and upload to/download from to GitHub, and Windows Terminal to run the both Bash and Git.\nGo to https://git-scm.com/download/win and download the windows version of git. After the download has finished, run the installer and accept the default configuration for all pages except for the following:\nOn the Select Components page, add a Git Bash profile to Windows Terminal.\n\nOn the Choosing the default editor used by Git page, select “Use Visual Studio Code as Git’s default editor” from the drop-down menu’\n\nTo install windows terminal visit this link and click Get to open it in Windows Store. Inside the Store, click Get again and then click Install. After installation, click Launch to start Windows Terminal. In the top of the window, you will see the tab bar with one open tab, a plus sign, and a down arrow. Click the down arrow and select Settings (or type the shortcut Ctrl + ,). In the Startup section, click the dropdown menu under Default profile and select Git Bash.\n\nYou can now launch the Windows terminal from the start menu or pin it to the taskbar like any other program (you can read the rest of the article linked above for additional tips if you wish). To make sure everything worked, close down Windows Terminal, and open it again. Git Bash should open by default, the text should be green and purple, and the tab should read MINGW64:/c/Users/$USERNAME (you should also see /c/Users/$USERNAME if you type pwd into the terminal). This screenshot shows what it should look like:\n\n\nNote: Whenever we refer to “the terminal” in these installation instructions, we want you to use the Windows Terminal that you just installed with the Git Bash profile. Do not use Windows PowerShell, CMD, or anything else unless explicitly instructed to do so.\n\nTo open a new tab you can click the plus sign or use Ctrl + Shift + t (you can close a tab with Ctrl + Shift + w). To copy text from the terminal, you can highlight it with the mouse and then click Ctrl + Shift + c. To paste text you use Ctrl + Shift + v, try it by pasting the following into the terminal to check which version of Bash you just installed:\nbash --version\nThe output should look similar to this:\nGNU bash, version 4.4.23(1)-release (x86_64-pc-sys)\nCopyright (C) 2019 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nNote: If there is a newline (the enter character) in the clipboard when you are pasting into the terminal, you will be asked if you are sure you want to paste since this newline will act as if you pressed enter and run the command. As a guideline you can press Paste anyway unless you are sure you don’t want this to happen.\n\nLet’s also check which version of git was installed:\ngit --version\ngit version 2.32.0.windows.2\n\nNote: Some of the Git commands we will use are only available since Git 2.23, so make sure your if your Git is at least this version.\n\nYou can launch many windows programs from the terminal, e.g. to launch VS Code that we installed previously, you would type in code, let’s use this to check the version of vscode that we installed:\ncode --version\n1.59.0\nc3f126316369cd610563c75b1b1725e0679adfb3\nx64\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\nNote: To ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command code ~/.gitconfig) or by typing git config --list --global.\n\nSetting VS Code as the default editor\nTo make programs run from the terminal (such as git) use VS Code by default, we will modify ~/.bash_profile. First, open it using VS Code:\ncode ~/.bash_profile\n\nNote: If you see any existing lines in your ~/.bash_profile related to a previous Python or R installation, please remove these.\n\nAppend the following lines:\n# Set the default editor for programs launch from terminal\nEDITOR=\"code --wait\"\nVISUAL=$EDITOR  # Use the same value as for \"EDITOR\" in the line above\nThen save the file and exit VS Code.\n\nNote: Most terminal programs will read the EDITOR environmental variable when determining which editor to use, but some read VISUAL, so we’re setting both to the same value.\n\nIn some cases, VScode is not set as the default text editor for git even after appending the two lines above, so to make sure it is registered properly, also run the following from your terminal:\ngit config --global core.editor \"code --wait\"\nOn Windows, VScode sometimes reads a different configuration file than Git Bash. To avoid this, open your ~/.bashrc file:\ncode ~/.bashrc\nAnd append the following line:\nif [ -f ~/.bash_profile ]; then . ~/.bash_profile; fi\nPython, Conda, and JupyterLab\nPython and Conda\nIn DSCI 310 we will be using Python and the conda package manager. To install Python and the conda package manager, we will use the Miniconda platform (read more here), for which the Python 3.x 64-bit version can be downloaded here. After the download has finished, run the installer and accept the default configuration for all pages.\n\nNote: Do not add miniconda to PATH. We will set this up later.\n\nAfter installation, open the Start Menu and search for the program called “Anaconda Prompt (miniconda3)”. When this opens you will see a prompt similar to (base) C:\\Users\\your_name. Type the following to check that your Python installation is working:\npython --version\nwhich should return Python 3.9.0 or greater:\nPython 3.9.5\n\nNote: If instead you see Python 2.7.X you installed the wrong version. Follow these instructions to delete this installation and try the installation again, selecting Python 3.9.\n\nIntegrating Python with the Git Bash terminal\nTo avoid having to open the separate Anaconda Prompt every time we want to use Python, we can make it available from the (Git Bash) terminal, which is what we will be using most of the time. To set this up, open the “Anaconda Prompt (miniconda3)” again and type:\nconda init bash\nYou will see that this modified a few configuration files, which makes conda visible to the terminal. Close all open terminal windows and launch a new one, you should now see that the prompt string has changed to include the word (base) as in the screenshot below:\n\nIf you type\npython --version\nyou should now see the same output as above:\nPython 3.9.5\nLet’s also check the version of the conda package manager. If you type\nconda --version\nyou should see something like this\nconda 4.10.3\n\nOptional: One annoyance with our current terminal setup is that the word (base) is not on the same row as the rest of the prompt string (the part with your_name@your_computer. To fix this we can edit the .bash_profile configuration file to indicate that we do not want a newline at the beginning of the prompt string. Open up the configuration file using VS Code by typing the following command into a terminal:\ncode \"/c/Program Files/Git/etc/profile.d/git-prompt.sh\"\nDelete the line that reads the following (it should be line 13):\nPS1=\"$PS1\"'\\n'       # new line\nWhile we are in this file, let’s also remove the line that says PS1=\"$PS1\"'$MSYSTEM '          # show MSYSTEM (line 17), to remove some clutter from the terminal.\nClick to save the file, when VS Code prompts you that the saving failed, click “Retry as Admin” and then “Yes”. That’s it! Now if you launch a new terminal instance, you will see (base) on the same line as the rest of the prompt string as in the screenshot below.\n\n\nInstalling Python packages\nconda installs Python packages from different online repositories which are called “channels”. A package needs to go through thorough testing before it is included in the default channel, which is good for stability, but also means that new versions will be delayed and fewer packages are available overall. There is a community-driven effort called the conda-forge (read more here), which provides more up to date packages. To enable us to access the most up to date version of the Python packages we are going to use, we will add the more up to date channel. To add the conda-forge channel by typing the following in the terminal:\nconda config --add channels conda-forge\nTo install packages individually, we can now use the following command: conda install <package-name>. After running that command conda will show you the packages that will be downloaded, and you can press enter to proceed with the installation. If you want to answer yes by default and skip this confirmation step, you can replace conda install with conda install -y. Also note that we may occasionally need to install packages using pip, the standard Python package manager. The installation command is very similar to that of conda: pip install <package-name>. Let’s try this out in the next section, by installing some of the key packages we will use in MDS.\nJupyterLab setup\nWe will be using JupyterLab as our main coding environment and pandas is one of the key data analyses packages in MDS. The Jupytext Python package and the JupyterLab git extension facilitates using notebooks in JupyterLab together with Git & GitHub. The spellchecker helps us correcting typos in our writing and the LSP packages fill the same function for our code. Install them via the following commands:\nconda install pandas jupyterlab jupyterlab-git jupyterlab-spellchecker jupytext jupyterlab-lsp jupyter-lsp-python\nTo test that your JupyterLab installation is functional, you can type jupyter lab into a terminal, which should open a new tab in your default browser with the JupyterLab interface. To exit out of JupyterLab you can click File -> Shutdown, or go to the terminal from which you launched JupyterLab and hold Ctrl while pressing c twice.\nR, IRkernel, Rtools, and RStudio\nR is another programming language that we will be using a lot in the MDS program. We will use R both in Jupyter notebooks and in RStudio.\nR\nGo to https://cran.r-project.org/bin/windows/base/ and download the latest version of R for Windows. Open the file and follow the installer instructions accepting the default configuration.\nAfter the installation is complete, we will add the R executables to the PATH variable in terminal so that you can use it without typing the full path to R each time Open a terminal and type:\ncode ~/.bash_profile\nAppend the following lines to the file\n# Automatically expand the R version number\nR_DIR=(/c/Program\\ Files/R/*/bin/x64)\n# Add R and Rscript to PATH\nexport PATH=\"${R_DIR}:$PATH\"\nThen save the file and exit VS Code. Now you can open a new terminal window and type\nR --version\nwhich should return something like:\nR version 4.1.1 (2021-05-18) -- \"Camp Pontanezen\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under the terms of the\nGNU General Public License versions 2 or 3.\nFor more information about these matters see\nhttps://www.gnu.org/licenses/.\n\nNote: Although it is possible to install R through conda, we highly recommend not doing so. In case you have already installed R using conda you can remove it by executing conda uninstall r-base.\n\nRStudio\nDownload the Windows preview version of RStudio Desktop (not Pro) from https://www.rstudio.com/products/rstudio/download/preview. Open the file and follow the installer instructions.\nTo see if you were successful, try opening RStudio by clicking on its icon.\nNext, we will make sure that Rstudio uses the same directories as R from terminal for its configuration. To do this, we will need to set an environmental variable in Windows. First, open the start menu, type “env” and select the match that reads “Edit the system environment variables”. Click the button at the bottom that reads “Environmental Variables…”:\n\nUnder “User variable” click the “New…” button:\n\nAnd type in R_USER as the “Variable name” and C:\\Users\\username as the “Variable value”, replacing username with your actual user name (if you don’t know your user name, look at the top of the screenshot above where it says “User variables for your_username”):\n\nClick “OK” on all of the three windows we opened above and you’re done! If you open the console in RStudio and also R from the Windows Terminal (open Windows Terminal, type R, and then press enter) and type the following in both:\n.libPaths()\nboth applications should return the same values, and the first one should be a path inside your user directory e.g.\n\"C:/Users/florencia/R/win-library/4.1\" \"C:/Program Files/R/R-4.1.0/library\"\nIf they don’t return the same paths, please try to setting up your environmental variable again and making sure that it is pointing to the correct folder.\nDo not continue unless both R from terminal and R from RStudio return the same paths here or later parts of the installation will fail.\nNow we are going to change RStudio’s Insert Pipe shortcut so that it inserts the new native pipe operator |>. Go to Tools > Global Options > Code > Editing and tick the following option:\n\nOnce the change is made you can try in the RStudio console Ctrl + Shift + m to check if works.\nRtools\nWindows users will also need to install Rtools, which will allow you to use external libraries. Go to http://cran.r-project.org/bin/windows/Rtools/ and download the latest version (e.g., Rtools40.exe). After the download has finished, run the installer with the default configuration. Do not follow the Rtools’ website instructions for “Putting Rtools on the PATH”. RStudio will put Rtools on the PATH automatically when it is needed.\nTo test if your installation was successful, open RStudio (restart it if you already have it open) and type the following into the Console:\ninstall.packages(\"jsonlite\", type = \"source\")\nIf the jsonlite package installs without errors, Rtools is setup correctly.\nInstalling R packages\nNext, install the key R packages needed for the course by opening up RStudio and typing the following into the R console inside RStudio:\ninstall.packages(c(\"cowplot\", \"GGally\", \"kknn\", \"scales\", \"tidyverse\", \"tidymodels\"))\nIRkernel\nThe IRkernel package is needed to make R work in Jupyter notebooks. To enable this kernel in the notebooks, open R from the Windows Terminal (not R Studio) and run the setup via the following two commands:\ninstall.packages('IRkernel')\nIRkernel::installspec()\nWhen asked to select a mirror, pick one at a location close to where you live for faster downloads.\n\nNote: You cannot use RStudio for this step because it will not be able to find the jupyter installation R from terminal will since the correct PATH for jupyter is set when the terminal is launched.\n\nTo see if you were successful, try running JupyterLab and check if you have a working R kernel. To launch the JupyterLab type the following in the terminal:\njupyter lab\nA browser should have launched and you should see a page that looks like the screenshot below. Now click on “R” notebook (circled in red on the screenshot below) to launch an JupyterLab with an R kernel.\n\nSometimes a kernel loads, but doesn’t work as expected. To test whether your installation was done correctly now type library(tidyverse) in the code cell and click on the run button to run the cell. If your R kernel works you should see something like the image below:\n\nTo improve the experience of using R in JupyterLab, we will add keyboard shortcuts for inserting the common R operators <- and |>. Go to Settings -> Advanced Settings Editor -> Keyboard Shortcuts and paste the following in the rightmost panel that says User Preferences (replacing the {}):\n{\n    \"shortcuts\": [\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Alt -\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"<- \"}\n            }\n        },\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Accel Shift M\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"|> \"}\n            }\n        }\n    ]\n}\nAfter you have pasted this text, hit the small floppy disk in the top right (or Ctrl + s) to save the settings. Here is a screenshot of what it looks like with the settings saved:\n\nTo check that the extension is working, open JupyterLab, launch an R notebook, and try inserting the operators by pressing Alt + - or Shift + Ctrl + m, respectively. You could add any arbitrary text insertion command the same way, but this is all that is required for MDS.\nLaTeX\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, open RStudio and run the following commands to install the tinytex package and setup tinytex:\ninstall.packages('tinytex')\ntinytex::install_tinytex()\nNote that you might see two error messages regarding lua during the installation, you can safely ignore these, the installation will complete successfully after clicking “OK”.\nIn order for Git Bash to be able to find the location of TinyTex, you will need to sign out of Windows and back in again. After doing that, you can check that the installation worked by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.23 (TeX Live 2021/W32TeX)\nkpathsea version 6.3.3\nCopyright 2021 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.03\nThe above is all we need to have LaTeX work with R Markdown documents, however for Jupyter we need to add several more packages.\nWhen you sign back in, install the additional LaTeX packages needed for Jupyter by pasting the following into the new terminal instance and press enter: by pasting the following:\ntlmgr.bat install eurosym \\\n  adjustbox \\\n  caption \\\n  collectbox \\\n  enumitem \\\n  environ \\\n  fp \\\n  jknapltx \\\n  ms \\\n  parskip \\\n  pgf \\\n  rsfs \\\n  tcolorbox \\\n  titling \\\n  trimspaces \\\n  ucs \\\n  ulem \\\n  upquote \\\n  lwarp \\\n  oberdiek \\\n  pgfplots \\\n  bbm-macros \\\n  cmap \\\n  polyglossia \\\n  gnu-freefont \\\n  fncychap \\\n  wrapfig \\\n  capt-of \\\n  needspace \\\n  tabulary \\\n  varwidth \\\n  fancyhdr \\\n  titlesec \\\n  ucharclasses\nTo test that your latex installation is working with jupyter notebooks, launch jupyter lab from a terminal and open either a new notebook or the same one you used to test IRkernel above. Go to File -> Export notebook as... -> Export Notebook to PDF. If the PDF file is created, your LaTeX environment is set up correctly.\nWebPDF export\nJupyter recently added another way to export notebooks to PDF which does not require Latex and makes the exported PDF look similar to notebooks exported to HTML. This requires the pyppeteer package, which we can install by typing the following into Windows Terminal.\nconda install pyppeteer=0.2.2\npyppeteer-install\nNow try exporting a notebook by clicking File -> Export notebook as... -> Export Notebook to WebPDF.\nMake\nLater in the program, we will be using make to automate our analysis scripts. Download make from this URL. Click on the downloaded zip-file to open it in the File Explorer and click the button in the “Extract” tab that reads “Extract all”. Change the extract location to C:\\Users\\YOUR_USERNAME\\make-4.3 (substituting in your actual username instead of YOUR_USERNAME) and click “Extract”. See the screenshots below if you’re unsure what to click.\n\n\n\nNote: It is advisable to show file extensions by default in the Windows File Explorer. Click the View tab and check the box next to File name extensions.\n\nNext we need to add make’s bin folder to our PATH so that we can use he command make from the terminal (like we did with R earlier). Open the bash configuration file with VS Code again by pasting this into a terminal:\ncode ~/.bash_profile\nAnd replace the section that reads:\n# Add R and Rscript to path\nexport PATH=\"${R_DIR}:$PATH\"\nwith the following to prepend make’s bin folder to the PATH (note that ${USERNAME} below will be automatically expanded to your actual username by bash, so you don’t need to replace it manually.\n# Add R, Rscript, and Make to path\nexport PATH=\"/c/Users/${USERNAME}/make-4.3/bin:${R_DIR}:$PATH\"\nThen save the file and exit VS Code. Launch a new terminal and run\nmake --version\nwhich should return something like\nGNU Make 4.3\nBuilt for Windows32\nCopyright (C) 1988-2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nDocker\nYou will use Docker to create reproducible, sharable and shippable computing environments for your analyses. For this you will need a Docker account. You can sign up for a free one here.\nAfter signing-up and signing into the Docker Store, go here and click on the “Get Docker” button on the right hand side of the screen. Then follow the installation instructions on that screen to install the stable version.\n\nNote: If you see a warning saying that your WSL installation is incomplete, you can click the link to install the kernel update and then restart per the instructions in the warning message.\n\nAfter installation (Docker will make you sign out to finish installing), launch a terminal and type\ndocker run hello-world\nwhich should output something like this:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n0e03bdcc26d7: Pulling fs layer\n0e03bdcc26d7: Verifying Checksum\n0e03bdcc26d7: Download complete\n0e03bdcc26d7: Pull complete\nDigest: sha256:49a1c8800c94df04e9658809b006fd8a686cab8028d33cfba2cc049724254202\nStatus: Downloaded newer image for hello-world:latest\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\nPost-installation notes\nYou have completed the installation instructions, well done 🙌! We have created a script to help you check that your installation was successful, and to provide instructions for how you can troubleshoot any potential issues. To run this script, please execute the following command from your terminal.\nbash <(curl -Ss https://raw.githubusercontent.com/UBC-DSCI/dsci-310-student/main/src/check_setup.sh)\nThe output from running the script will look something like this:\n# DSCI 310 setup check 1.0\n\nIf a program or package is marked as MISSING,\nthis means that you are missing the required version of that program or package.\nEither it is not installed at all or the wrong version is installed.\nThe required version is indicated with a number and an asterisk (*),\ne.g. 4.* means that all versions starting with 4 are accepted (4.0.1, 4.2.5, etc).\n\nYou can run the following commands to find out which version\nof a program or package is installed (if any):\n```\nname_of_program --version  # For system programs\nconda list  # For Python packages\nR -q -e \"installed.packages()[,c(Package, Version)]\"  # For R packages\n```\n\nChecking program and package versions...\n\n## Operating system\nMicrosoft Windows 10 Education\n64-bit\n10.0.19044\n\n## System programs\nOK        rstudio 1.4.1725\nOK        R 4.1.0 (2021-05-18) -- \"Camp Pontanezen\"\nOK        python 3.9.1\nOK        conda 4.10.3\nOK        bash 4.4.23(1)-release (x86_64-pc-msys)\nOK        git 2.32.0.windows.2\nOK        make 4.3\nOK        latex 3.141592653-2.6-1.40.23 (TeX Live 2021/W32TeX)\nOK        tlmgr revision 59291 (2021-05-21 05:14:40 +0200)\nOK        docker 20.10.7, build f0df350\nOK        code 1.58.2\n\n## Python packages\nMISSING   pandas=1.*\nMISSING   pyppeteer=0.*\nOK        nbconvert=6.3.0\nOK        jupyterlab=3.2.4\nOK        jupyterlab-git=0.34.0\nOK        jupytext=1.13.3\nOK        jupyterlab-spellchecker=0.7.2\nOK        jupyterlab PDF-generation was successful.\nMISSING   jupyterlab WebPDF-generation failed. It seems like you did not run `pip install \"nbconvert[webpdf]\"` to install pyppeteer.\nOK        jupyterlab HTML-generation was successful.\n\n## R packages\nOK        cowplot=1.1.1\nOK        GGally=2.1.2\nOK        kknn=1.3.1\nOK        scales=1.1.1\nOK        tidyverse=1.3.1\nOK        tidymodels=0.1.4\nOK        tinytex=0.36\nOK        rmarkdown PDF-generation was successful.\nOK        rmarkdown HTML-generation was successful.\n\nThis output and additional configuration details have been saved to the file /c/Users/joel/check-setup-mds.log.\ntogether with system configuration details and any detailed error messages about PDF and HTML generation.\nYou can open this folder in your file browser by typing `explorer .` (without the surrounding backticks).\nAs you can see at the end of the output, a log file is saved in your current directory. We might ask you to upload this file if we need to troubleshoot your installation, so that we can help you more effectively. If any of your packages are marked as “MISSING” you will need to figure out what is wrong and possibly reinstall them. Once all packages are marked as “OK” we will ask you to submit this log file, so that we can confirm that your installation was successful. Details on where to submit will be provided later.\n\nNote: In general you should be careful running scripts unless they come from a trusted source as in this case (just like how you should be careful when downloading and installing programs on your computer).\n\nAttributions\nUBC MDS Software Stack Install Instructions\nHarvard CS109\nUBC STAT 545 licensed under the CC BY-NC 3.0.\nSoftware Carpentry\nOracle - How do I set or change the PATH system variable?\nNumerical Methods - Getting started\nRStudio - New native pipe operator\n\n\n\n",
      "last_modified": "2022-01-04T16:50:59+00:00"
    },
    {
      "path": "syllabus.html",
      "title": "Syllabus",
      "description": "Course syllabus for DSCI 310: Reproducible and trustworthy workflows for data science.\n",
      "author": [],
      "contents": "\n\nContents\nTime and place\nCourse description\nTextbook\nHardware & software\nCourse-level learning outcomes\nTeaching team\nAssessment\nCourse breakdown\n\nSchedule at a glance\nAssessment schedule\n\nPolicies\nLate registration\nLate assignments / mid-term exam absence\nRe-grading\nMissed final exam\nAcademic concession policy\nAcademic integrity\nPlagiarism\n\nAttribution\n\nTime and place\nLecture Section 101: Online (Zoom), Tues/Thurs 09:00-10:30\nTutorial Section T1A: Online (Zoom), Fri 09:00-10:00\nCourse description\nData science methods to automate the running and testing of code and analytic reports, manage data analysis software dependencies, package and deploy software for data analysis, and collaborate with others using version control.\nPre-reqs: DSCI 100 and either (a) one of CPSC 203, CPSC 210, CPEN 221 or (b) one of MATH 210, ECON 323 and one of CPSC 107, CPSC 110.\nSee the Faculty of Science Credit Exclusion Lists: www.calendar.ubc.ca/vancouver/index.cfm?tree=12,215,410,414\nLong version: Data Science skills and tools are increasingly in demand across a large variety of disciplines. DSCI 310 aims to further students’ existing data science knowledge with reproducible and trustworthy workflows in the areas of creating and deploying data analysis, reports, and software. Particular focus will be placed on teaching the skills and tools currently used in academic research and industry settings.\nWithout deliberate and conscious effort towards project organization, tool choice, and workflows, complex and large data science projects can quickly grow out-of-hand and become irreproducible and untrustworthy. This course will focus on reproducible and trustworthy workflows for writing computer scripts, analytic reports and data analysis pipelines, as well as packaging, automated testing and deployment of software written for data analysis. An emphasis is also placed on how to collaborate effectively with others using version control tools, such as Git and GitHub. Such workflows act to mitigate chaos and maximize transparency, reproducibility, and productivity.\nWhile the course will be based on the use of the two leading languages in data science, Python and R, and related current tools (conda, Docker, Git, GitHub, Jupyter, etc.), the concepts and skills taught in the course aim to be discipline and tool agnostic, focussing on the importance of reproducible and trustworthy workflows for data analysis and the implications of failing to implement these when performing a data analysis.\nStudents who have completed this course will be able to complete complex data analysis projects with minimal technical debt – meaning that others can transparently follow how the analysis was done, reproduce the analysis for themselves if desired, and easily pickup on, and further extend the analysis in new areas. Strategies for collaboration on data science projects will also be emphasized.\nTextbook\nWe will be using a collection of resources available online. These include:\nDSCI 310 course notes\nR packages\nPython packages\nHardware & software\nStudents are required to bring a laptop to both lectures and tutorials. Students who do not own a laptop, chromebook, or tablet may be able to loan a laptop from the UBC library.\nCourse-level learning outcomes\nBy the end of the course, students will be able to:\nDefend and justify the importance of creating data science workflows that are reproducible and trustworthy and the elements that go into such a workflow (e.g., writing clear, robust, accurate and reproducible code, managing and sharing compute environments, defined collaboration strategies, etc).\nConstructively criticize the workflows and data analysis of others in regards to its reproducibility and trustworthiness.\nDevelop a data science project (including code and non-code documents such as reports) that uses reproducible and trustworthy workflows\nDemonstrate how to effectively share and collaborate on data science projects and software by creating robust code packages, using reproducible compute environments, and leveraging collaborative development tools.\nDefend and justify the benefit of, and employ automated testing regimes, continuous integration and continuous deployment for managing and maintaining data science projects and packages.\nDemonstrate strong communication, teamwork, and collaborative skills by working on a significant data science project with peers throughout the course.\nTeaching team\nNote that your TAs are students too; they may have class right before their office hours, and they may run a few minutes late. Please be patient!\nPosition\nName\nEmail\nOffice Hours\nOffice Location\nInstructor\nTiffany Timbers\ntiffany.timbers[-at-]stat.ubc.ca\nFriday 15:30-16:30\nZoom\nTA\nGiuseppe Tinti Tomio\ngiuseppe.tomio[-at-]stat.ubc.ca\nFriday 10:00-11:00\nZoom\nAssessment\nCourse breakdown\nDeliverable\nGrade\nLearning objectives addressed\nIndividual assignments\n5%\n1, 2, 4, 5\nProject milestone 1\n10%\n3, 6\nProject milestone 2\n10%\n3, 4, 6\nProject milestone 3\n10%\n3, 4, 5, 6\nFinal project\n20%\n3, 4, 5, 6\nPeer review\n4.5%\n2\nTeamwork\n10%\n6\nGitHub username quiz\n0.5%\nNA\nMid-term Exam\n10%\n1, 2, part of 4\nFinal Exam\n20%\n1, 2, 4, 5\nSchedule at a glance\nWeek\nDate\nTopic\nReading\nAssessments due\nNotes\n1\n2021/01/10\nHow do reproducible and trustworthy workflows impact data analysis?\n\n\n\n2\n2021/01/17\nVersion control for transparency and collaboration\n\nIndividual assignment 1 due & GitHub username quiz\n\n3\n2021/01/24\nIntegrated development environments, filenames and data science project organization\n\n\nTeam assignment for group projects & drafting of team work contract\n4\n2021/01/31\nManaging dependencies using virtual environments\n\nIndividual assignment 2 due\n\n5\n2021/02/07\nManaging dependencies using containerization\n\nIndividual assignment 3 due\n\n6\n2021/02/14\nIntroduction to testing code for data science\n\nMilestone 1 due\n\n7\n2021/02/21\nReading Break\n\n\n\n8\n2021/02/28\nNon-interactive scripts and data analysis pipelines\n\nMid-term exam\n\n9\n2021/03/07\nReproducible reports\n\nMilestone 2 due\n\n10\n2021/03/14\nAdvanced version control workflows\n\nIndividual assignment 4 due\n\n11\n2021/03/21\nPackaging and documenting code\n\nMilestone 3 due\n\n12\n2021/03/28\nAutomated testing and continuous integration\n\nIndividual assignment 5 & Peer review due\n\n13\n2021/04/04\nDeploying and publishing packages, copyright and licenses\n\nFinal project & Team work reflection due\n\nAssessment schedule\nAssessment\nDescription\nDue date\nIndividual assignment 1\nSetting up your computer\n2021/01/22 18:00\nGitHub username quiz\n\n2021/01/22 18:00\nIndividual assignment 2\nVersion control practice\n2021/01/29 18:00\nIndividual assignment 3\nDockerfile practice\n2021/02/05 18:00\nMilestone 1\nQuestion, data & rough draft of analysis in one monolithic literate code document, reproducible environment (full.ipynb, Dockerfile, docker-compose.yml)\n2021/02/19 18:00\nMid-term exam\n\n2021/03/04 09:00\nMilestone 2\nfunctions abstracted to a file/module & tests (reduced.ipynb, .R & test_*.R, function documentation)\n2021/03/12 18:00\nIndividual assignment 4\nReproducible reports practice\n2021/03/19 18:00\nMilestone 3\nliterate code document broken into scripts and a report & data analysis pipeline to stitch everything together (.R files & Make pipeline, bookdown or rticle report)\n2021/03/26 18:00\nPeer review\nreview of another group’s project\n2021/04/02 18:00\nIndividual assignment 5\nPackaging practice\n2021/04/02 18:00\nFinal project\npackage & CI (the full monty package - including docs)\n2021/04/09 18:00\nFinal exam\n\nTBD\nPolicies\nLate registration\nStudents who register for the class late have 1 week from their registration date on Canvas to complete all prior assignments.\nLate assignments / mid-term exam absence\nStudents must be present at the invigilation venue (in class, on Zoom, examination centre, etc) to take the mid-term exam; otherwise they will be considered to have missed the mid-term exam and will be assigned a grade of zero.\nStudents who will miss the mid-term exam must provide a self-declaration prior to the mid-term exam and make arrangements (e.g., schedule an oral make-up mid-term exam) with the Instructor. Failing to present a declaration within a reasonable timeframe before the mid-term exam will result in a grade of zero.\nA late submission is defined as any work submitted after the deadline. For a late submission, the student will receive a 75% scaling of their grade for the first occurrence, 50% scaling of their grade for the second occurrence, and will receive a grade of 0 for subsequent occurrences.\nStudents who miss an assignment or quiz can request an academic concession. From the UBC Senate policy on academic concession, grounds for academic concession can be illness, conflicting responsibilities, or compassionate grounds. Examples of compassionate grounds, from the above policy, include “a traumatic event experienced by the student, a family member, or a close friend; an act of sexual assault or other sexual misconduct experienced by the student, a family member, or a close friend; a death in the family or of a close friend.”\nTo request an academic concession, students should immediately email a completed and signed academic concession form to the course Instructor. Upon receiving the form, the Instructor will make a decision about how to proceed. Failure to present valid documentation may result in a failing grade.\nRe-grading\nIf you have concerns about the way your work was graded, please contact the TA who graded it within one week of having the grade returned to you through Piazza. After this one-week window, we may deny your request for re-evaluation. Also, please keep in mind that your grade may go up or down as a result of re-grading.\nMissed final exam\nStudents who miss the final quiz must report to their faculty advising office within 72 hours of the missed exam, and must supply supporting documentation. Only your faculty advising office can grant deferred standing in a course. You must also notify your instructor prior to (if possible) or immediately after the exam. Your instructor will let you know when you are expected to write your deferred exam. Deferred exams will ONLY be provided to students who have applied for and received deferred standing from their faculty.\nAcademic concession policy\nPlease see UBC’s concession policy for detailed information on dealing with missed coursework, quizzes, and exams under circumstances of an acute and unanticipated nature.\nAcademic integrity\nThe academic enterprise is founded on honesty, civility, and integrity. As members of this enterprise, all students are expected to know, understand, and follow the codes of conduct regarding academic integrity. At the most basic level, this means submitting only original work done by you and acknowledging all sources of information or ideas and attributing them to others as required. This also means you should not cheat, copy, or mislead others about what is your work. Violations of academic integrity (i.e., misconduct) lead to the breakdown of the academic enterprise, and therefore serious consequences arise and harsh sanctions are imposed. For example, incidences of plagiarism or cheating may result in a mark of zero on the assignment or exam and more serious consequences may apply if the matter is referred to the President’s Advisory Committee on Student Discipline. Careful records are kept in order to monitor and prevent recurrences.\nA more detailed description of academic integrity, including the University’s policies and procedures, may be found in the Academic Calendar at http://calendar.ubc.ca/vancouver/index.cfm?tree=3,54,111,0.\nPlagiarism\nStudents must correctly cite any code or text that has been authored by someone else or by the student themselves for other assignments. Cases of plagiarism may include, but are not limited to:\nthe reproduction (copying and pasting) of code or text with none or minimal reformatting (e.g., changing the name of the variables)\nthe translation of an algorithm or a script from a language to another\nthe generation of code by automatic code-generation software\nAn “adequate acknowledgement” requires a detailed identification of the (parts of the) code or text reused and a full citation of the original source code that has been reused.\nThe above attribution policy applies only to assignments. No code or text may be copied (with or without attribution) from any source during a quiz or exam. Answers must always be in your own words. At a minimum, copying will result in a grade of 0 for the related question.\nRepeated plagiarism of any form could result in larger penalties, including failure of the course.\nAttribution\nParts of this syllabus (particularly the policies) have been copied and derived from the UBC MDS Policies.\n\n\n\n",
      "last_modified": "2022-01-04T16:51:00+00:00"
    }
  ],
  "collections": []
}
