[
  {
    "objectID": "install_instructions/install_stack_mac.html",
    "href": "install_instructions/install_stack_mac.html",
    "title": "macOS (ARM)",
    "section": "",
    "text": "If you have already installed Git, Latex, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#installation-notes",
    "href": "install_instructions/install_stack_mac.html#installation-notes",
    "title": "macOS (ARM)",
    "section": "",
    "text": "If you have already installed Git, Latex, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we suggest you install the required software as specified below.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#web-browser",
    "href": "install_instructions/install_stack_mac.html#web-browser",
    "title": "macOS (ARM)",
    "section": "Web browser",
    "text": "Web browser\nIn DSCI 310 we will be using many tools that work most reliably on Google Chrome and Firefox (including our online quiz software), so we recommend that you use one of these browsers.\n\nTo install Chrome, go to https://www.google.com/chrome/, click on “Download Chrome” and follow the instructions on the website to finish the installation.\nTo install Firefox, go to https://www.mozilla.org/en-US/firefox/new/, click on “Download Firefox” and follow the instructions on the website to finish the installation."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#bash-shell",
    "href": "install_instructions/install_stack_mac.html#bash-shell",
    "title": "macOS (ARM)",
    "section": "Bash shell",
    "text": "Bash shell\nApple recently changed the Mac default shell in the Terminal to Zsh, however, we aim to teach with the same shell across all three operating systems we support, which is the Bash shell. Thus, we ask that you change the default shell in your Terminal to Bash by opening the Terminal (how to video) and typing:\nchsh -s /bin/bash\nYou will have to quit all instances of open Terminals and then restart the Terminal for this to take effect."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#visual-studio-code",
    "href": "install_instructions/install_stack_mac.html#visual-studio-code",
    "title": "macOS (ARM)",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\n\nInstalling\nThe open-source text editor Visual Studio Code (VS Code) is both a powerful text editor and a full-blown Python IDE, which we will use for more complex analysis. You can download and install the macOS version of VS Code from the VS code website https://code.visualstudio.com/download. Once the download is finished, click “Open with Archive utility”, and move the extracted VS Code application from “Downloads” to “Applications”. In addition to reading the getting started instructions, be sure to follow the “Launching from the command line” steps as well.\nYou can test that VS code is installed and can be opened from Terminal by restarting terminal and typing the following command:\ncode --version\nyou should see something like this if you were successful:\n1.81.1\n5763d909d5f12fe19f215cbfdd29a91c0fa9208a\narm64\n\nNote: If you get an error message such as -bash: code: command not found, but you can see the VS Code application has been installed, then something went wrong with setting up the launch from the command line. Try following these instructions again, in particular you might want to try the described manual method of adding VS Code to your path."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#github",
    "href": "install_instructions/install_stack_mac.html#github",
    "title": "macOS (ARM)",
    "section": "GitHub",
    "text": "GitHub\nIn DSCI 310 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#git",
    "href": "install_instructions/install_stack_mac.html#git",
    "title": "macOS (ARM)",
    "section": "Git",
    "text": "Git\nWe will be using the command line version of Git as well as Git through RStudio and JupyterLab. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the Xcode command line tools (not all of Xcode), which includes Git.\nOpen Terminal and type the following command to install Xcode command line tools:\nxcode-select --install\nAfter installation, in terminal type the following to ask for the version:\ngit --version\nyou should see something like this (does not have to be the exact same version) if you were successful:\ngit version 2.39.2 (Apple Git-143)\n\nNote: If you run into trouble, please see that Install Git Mac OS section from Happy Git and GitHub for the useR for additional help or strategies for Git installation.\n\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\nNote: To ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command code ~/.gitconfig) or by typing git config --list --global.\n\n\n\nSetting VS Code as the default editor\nTo make programs run from the terminal (such as git) use vscode by default, we will modify ~/.bash_profile. First, open it using VS Code (this will also create the file if it doesn’t already exist):\ncode ~/.bash_profile\n\nNote: If you see any existing lines in your ~/.bash_profile related to a previous Python or R installation, please remove these.\n\nNow append the following lines to ~/.bash_profile:\n# Set the default editor for programs launch from terminal\nEDITOR=\"code --wait\"\nVISUAL=$EDITOR  # Use the same value as for \"EDITOR\" in the line above\nThen save the file and exit VS Code.\n\nNote: Most terminal programs will read the EDITOR environmental variable when determining which editor to use, but some read VISUAL, so we’re setting both to the same value.\n\nIn some cases, VScode is not set as the default text editor for git even after appending the two lines above, so to make sure it is registered properly, also run the following from your terminal:\ngit config --global core.editor \"code --wait\"\nOn MacOS, VScode sometimes reads a different configuration file than your other programs. To avoid this, open your ~/.bashrc file:\ncode ~/.bashrc\nAnd append the following lines:\n# Do NOT add anything to this file, use `~/.bash_profile` instead.\n# The next line automatically loads your `~/.bash_profile`\n# any time a program tries to read your `~/.bashrc` file.\nif [ -f ~/.bash_profile ]; then . ~/.bash_profile; fi\nThe comment is a reminder to your future self who might open up this file a few months from now =)"
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#python-conda-and-jupyterlab",
    "href": "install_instructions/install_stack_mac.html#python-conda-and-jupyterlab",
    "title": "macOS (ARM)",
    "section": "Python, Conda, and JupyterLab",
    "text": "Python, Conda, and JupyterLab\n\nPython and Conda\nWe will be using Python for a large part of the program, and conda as our Python package manager. To install Python and the conda package manager, we will use the Miniforge platform (read more here).\nSelect the appropriate link:\nYou can find the Mac ARM and Intel download links here: https://conda-forge.org/miniforge/. Make sure you use the Miniforge3 installers, not the other ones listed. We will assume you downloaded the file into your Downloads folder.\nOnce downloaded, open up a terminal and run the following command\nbash ${HOME}/Downloads/Miniforge3.sh -b -p \"${HOME}/miniforge3\"\nAfter installation run the following commands\nsource \"${HOME}/miniforge3/etc/profile.d/conda.sh\"\nconda activate\nconda init\nAfter installation, restart the terminal. If the installation was successful, you will see (base) prepending to your prompt string. To confirm that conda is working, you can ask it which version was installed:\nconda --version\nwhich should return something like this:\nconda 23.5.2\n\nNote: If you see zsh: command not found: conda, see the section on Bash{:target=“_self”} above to set your default Terminal shell to Bash as opposed to Zsh.\n\nNext, type the following to ask for the version of Python:\npython --version\nMake sure it returns Python 3.11.0 or greater:\nPython 3.11.4\nIf you do not see Python &gt;3.11, close your terminal and open a new one. Confirm that you are in the (base) environment. Then update the base python with:\nconda install python=3.11"
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#installing-python-packages",
    "href": "install_instructions/install_stack_mac.html#installing-python-packages",
    "title": "macOS (ARM)",
    "section": "Installing Python packages",
    "text": "Installing Python packages\n`conda installs Python packages from different online repositories which are called “channels”. A package needs to go through thorough testing before it is included in the default channel, which is good for stability, but also means that new versions will be delayed and fewer packages are available overall. There is a community-driven effort called the conda-forge (read more here), which provides more up to date packages. Conda-forge is already set up when we installed Miniforge3\nTo install packages individually, we can now use the following command: conda install &lt;package-name&gt;. After running that command conda will show you the packages that will be downloaded, and you can press enter to proceed with the installation. If you want to answer yes by default and skip this confirmation step, you can replace conda install with conda install -y. Also note that we may occasionally need to install packages using pip, the standard Python package manager. The installation command is very similar to that of conda: pip install &lt;package-name&gt;.\nIn the next session we will use conda to install some of the key packages we will use in DSCI 310."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#jupyterlab-setup",
    "href": "install_instructions/install_stack_mac.html#jupyterlab-setup",
    "title": "macOS (ARM)",
    "section": "JupyterLab setup",
    "text": "JupyterLab setup\nJupyterLab is a coding environment that we will be using frequently throughout the course. The JupyterLab git extension facilitates using notebooks in JupyterLab together with Git & GitHub. The spellchecker helps us correcting typos in our writing. Install them via the following commands:\nconda install jupyterlab jupyterlab-git jupyterlab-spellchecker\nTo test that your JupyterLab installation is functional, you can type jupyter lab into a terminal, which should open a new tab in your default browser with the JupyterLab interface. To exit out of JupyterLab you can click File -&gt; Shutdown, or go to the terminal from which you launched JupyterLab and hold Ctrl while pressing c twice."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#r-xquartz-irkernel-and-rstudio",
    "href": "install_instructions/install_stack_mac.html#r-xquartz-irkernel-and-rstudio",
    "title": "macOS (ARM)",
    "section": "R, XQuartz, IRkernel, and RStudio",
    "text": "R, XQuartz, IRkernel, and RStudio\nR is the second language that we will be using frequently in this course. We will use R both in Jupyter notebooks and in RStudio.\n\nR\nGo to https://cran.r-project.org/bin/macosx/ and download the latest version of R for Mac. Open the file and follow the installer instructions. Pay attention that you will have to install R-4.3.2-arm64.pkg if you are working with a Apple silicon (M1/M2) Mac and R-4.3.2-x86_64.pkg if you are working in n older Intel Mac.\nAfter installation, open a new terminal window and type the following:\nR --version\nYou should see something like this if you were successful:\nR version 4.3.2 (2023-10-31) -- \"Eye Holes\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: aarch64-apple-darwin20 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under the terms of the\nGNU General Public License versions 2 or 3.\nFor more information about these matters see\nhttps://www.gnu.org/licenses/.\n\nNote: Although it is possible to install R through conda, we highly recommend not doing so. In case you have already installed R using conda you can remove it by executing conda uninstall r-base.\n\n\n\nXQuartz\nSome R packages rely on the dependency XQuartz which no longer ships with the Mac OS, thus we need to install it separately. Download it from here: https://www.xquartz.org/ and follow the installation instructions.\n\n\nRStudio\nDownload the macOS Desktop version (not Pro) of RStudio https://posit.co/download/rstudio-desktop/. Open the file and follow the installer instructions.\nTo see if you were successful, try opening RStudio by clicking on its icon (from Finder, Applications or Launchpad).\nNow we are going to change RStudio’s Insert Pipe shortcut so that it inserts the new native pipe operator |&gt;. Go to Tools &gt; Global Options &gt; Code &gt; Editing and tick the following option:\n\nOnce the change is made you can try in the RStudio console Command + Shift + m to check if works.\nFinally, let’s install a common R package that you used a lot in DSCI 100 by typing the following into the console inside RStudio:\ninstall.packages(\"tidyverse\")\n\n\nIRkernel\nThe IRkernel package is needed to make R work in Jupyter notebooks. To enable this kernel in the notebooks, install by pasting the following command into the RStudio Console:\ninstall.packages('IRkernel')\nNext, open a terminal and type the following (you can’t use RStudio for this step since it doesn’t honor $PATH changes in ~/.bash_profile)\nR -e \"IRkernel::installspec()\"\nTo see if you were successful, try running JupyterLab and check if you have a working R kernel. To launch JupyterLab, type the following in Terminal:\njupyter lab\nA browser should have launched and you should see a page that looks like the screenshot below. Now click on “R” notebook (circled in red on the screenshot below) to launch an JupyterLab with an R kernel.\n\nSometimes a kernel loads, but doesn’t work as expected. To test whether your installation was done correctly now type library(tidyverse) in the code cell and click on the run button to run the cell. If your R kernel works you should see something like the image below:\n\nTo improve the experience of using R in JupyterLab, we will add keyboard shortcuts for inserting the common R operators &lt;- and |&gt;. Go to Settings -&gt; Settings Editor. Then click JSON Settings Editor in the top right corner and click on Keyboard Shortcuts in the navigation panel to the left. You will see two panels, the right-most panel allows you to perform advanced modification of keyboards shortcuts in JupyterLab and it already contains quite a few shortcuts. We’re going to add two more shortcuts, by pasting a text snippet just before the first existing shortcut. Go ahead and create a new line just after the line that says \"shortcuts\": [ and paste the following:\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Alt -\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"&lt;- \"}\n            }\n        },\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Accel Shift M\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"|&gt; \"}\n            }\n        },\nAfter you have pasted this text, hit the small floppy disk in the top right (or Ctrl + s) to save the settings. Here is a screenshot of what it looks like with the settings saved:\n\nTo check that the extension is working, open JupyterLab, launch an R notebook, and try inserting the operators by pressing Alt + - or Command + Shift + m, respectively. You could add any arbitrary text insertion command the same way, but this is all that we suggest for this course."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#quarto-cli",
    "href": "install_instructions/install_stack_mac.html#quarto-cli",
    "title": "macOS (ARM)",
    "section": "Quarto CLI",
    "text": "Quarto CLI\nQuarto is an open-source scientific and technical publishing system that you can access from VSCode, Jupyter Lab, RStudio, or the terminal.\nThe RStudio version that you have downloaded is already equipped with the last version of Quarto. You can check this by opening a new document in File -&gt; New File -&gt; Quarto Document.\nQuarto can be used outside RStudio as well, this is why we are going to install Quarto CLI. Please, download the last version of Quarto CLI for MacOs.\nAfter the installation finishes, close all the terminals you may have open. Then, open a new one and try running this command:\nquarto --version\nIf the installation was successful you will read the output (the exact number may not match, that’s okay):\n1.6.40"
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#latex",
    "href": "install_instructions/install_stack_mac.html#latex",
    "title": "macOS (ARM)",
    "section": "LaTeX",
    "text": "LaTeX\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, run the following command to make sure that /usr/local/bin is writable:\nsudo chown -R $(whoami):admin /usr/local/bin\n\nNote: You might be asked to enter your password during installation.\n\nNow open RStudio and run the following commands to install the tinytex package and setup tinytex:\ninstall.packages('tinytex')\ntinytex::install_tinytex()\nYou can check that the installation is working by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.25 (TeX Live 2023)\nkpathsea version 6.3.5\nCopyright 2023 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.39; using libpng 1.6.39\nCompiled with zlib 1.2.13; using zlib 1.2.13\nCompiled with xpdf version 4.04\nThe above is all we need to have LaTeX work with R Markdown documents, however for Jupyter we need to add several more packages. Do this by opening a terminal and copying the following there press enter:\ntlmgr install eurosym \\\n  adjustbox \\\n  caption \\\n  collectbox \\\n  enumitem \\\n  environ \\\n  fp \\\n  jknapltx \\\n  ms \\\n  parskip \\\n  pdfcol \\\n  pgf \\\n  rsfs \\\n  soul \\\n  tcolorbox \\\n  titling \\\n  trimspaces \\\n  ucs \\\n  ulem \\\n  upquote \\\n  lwarp \\\n  oberdiek\nTo test that your latex installation is working with jupyter notebooks, launch jupyter lab from a terminal and open either a new notebook or the same one you used to test IRkernel above. Go to File -&gt; Save and Export Notebook as... -&gt; PDF. If the PDF file is created, your LaTeX environment is set up correctly.\n\nWebPDF export\nJupyter recently added another way to export notebooks to PDF which does not require Latex and makes the exported PDF look similar to notebooks exported to HTML. This requires the pyppeteer package, which we can install as follows.\npip install \"nbconvert[webpdf]\"\nplaywright install chromium\nTry this by going to File -&gt; Export notebook as... -&gt; Export Notebook to WebPDF."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#docker",
    "href": "install_instructions/install_stack_mac.html#docker",
    "title": "macOS (ARM)",
    "section": "Docker",
    "text": "Docker\nYou will use Docker to create reproducible, sharable and shippable computing environments for your analyses. For this you will need a Docker account. You can sign up for a free one here.\nAfter signing-up and signing into the Docker Store, go here: https://store.docker.com/editions/community/docker-ce-desktop-mac and click on the button “Mac with Intel chip” or “Mac with Apple chip”. Then follow the installation instructions on that screen to install the stable version.\nTo test if Docker is working, after installation open the Docker app by clicking on its icon (from Finder, Applications or Launchpad). Next open Terminal and type the following:\ndocker run hello-world\nyou should see something like this if you were successful:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete\nDigest: sha256:451ce787d12369c5df2a32c85e5a03d52cbcef6eb3586dd03075f3034f10adcd\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/"
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#vs-code-extensions-optional",
    "href": "install_instructions/install_stack_mac.html#vs-code-extensions-optional",
    "title": "macOS (ARM)",
    "section": "VS Code extensions (Optional!)",
    "text": "VS Code extensions (Optional!)\nThe real magic of VS Code is in the extensions that let you add languages, debuggers, and tools to your installation to support your specific workflow. Now that we have installed all our other Data Science tools, we can install the VS Code extensions that work really well with them. From within VS Code you can open up the Extension Marketplace (read more here) to browse and install extensions by clicking on the Extensions icon in the Activity Bar indicated in the figure below.\n\nTo install an extension, go to View -&gt; Extensions or click in the icon as you can see in the image above. Then, search for the names of the ones you are interested in the search bar, click the extension you want, and click “Install”. There are extensions available to make almost any workflow or task you are interested in more efficient! Here we are interested in setting up VS Code as a Python IDE. To do this, search for and install the following extensions:\n\nPython (everything Python: notebooks, debugging, linting, formatting, etc.)\nmarkdownlint (markdown linting and style checking extension)\nGitLens - Git supercharged (powerful extension that extends VS Code’s native git capabilities)\nGit History (intutive view of your git history)\nDocker (easily use Docker from VS Code)\nQuarto (integrated render and preview for Quarto documents and more)\n(Optional) Material Theme and/or Predawn Theme Kit (additional colour themes to choose from)\n(Optional) Material Icon Theme (great-looking custom file icons!)\n\nThis video tutorial is an excellent introduction to using VS Code in Python."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#post-installation-notes",
    "href": "install_instructions/install_stack_mac.html#post-installation-notes",
    "title": "macOS (ARM)",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌! We have created a script to help you check that your installation was successful, and to provide instructions for how you can troubleshoot any potential issues. To run this script, please execute the following command from your terminal.\nbash &lt;(curl -Ss https://raw.githubusercontent.com/UBC-DSCI/dsci-310-student/main/src/check_setup.sh)\nThe output from running the script will look something like this:\n# DSCI 310 setup check 2024.1\n\nIf a program or package is marked as MISSING,\nthis means that you are missing the required version of that program or package.\nEither it is not installed at all or the wrong version is installed.\nThe required version is indicated with a number and an asterisk (*),\ne.g. 4.* means that all versions starting with 4 are accepted (4.0.1, 4.2.5, etc).\n\nYou can run the following commands to find out which version\nof a program or package is installed (if any):\n\n\nname_of_program --version  # For system programs\nconda list  # For Python packages\nR -q -e \"as.data.frame(installed.packages()[,3])\"  # For R packages\n\n\nChecking program and package versions...\n\n## Operating system\nProductName:            macOS\nProductVersion:         13.4\nBuildVersion:           22F66\n\n## System programs\nOK        rstudio 2023.12.0+369\nOK        R 4.3.2 (2023-10-31) -- \"Eye Holes\"\nOK        python 3.11.6\nOK        conda 23\nOK        bash 3.2.57(1)-release (arm64-apple-darwin22)\nOK        git 2.39.2 (Apple Git-143)\nOK        make 3.81\nOK        latex 3.141592653-2.6-1.40.25 (TeX Live 2023)\nOK        tlmgr 5:21 +0200)\nOK        docker 24.0.6, build ed223bc\nOK        code 1.85.0\n\n## Python packages\nOK        nbconvert-core=7.8.0\nOK        playwright=1.40.0\nOK        jupyterlab=4.0.6\nOK        jupyterlab-git=0.41.0\nOK        jupyterlab-spellchecker=0.8.4\nOK        jupyterlab PDF-generation was successful.\nOK        jupyterlab WebPDF-generation was successful.\nOK        jupyterlab HTML-generation was successful.\n\n## R packages\nOK        IRkernel=1.3.2\nOK        tinytex=0.46\nOK        rmarkdown PDF-generation was successful.\nOK        rmarkdown HTML-generation was successful.\n\nThe above output has been saved to the file /Users/timberst/Documents/dsci-310/dsci-310-student/check-setup-310.log\ntogether with system configuration details and any detailed error messages about PDF and HTML generation.\nYou can open this folder in your file browser by typing `open .` (without the surrounding backticks).\nAs you can see at the end of the output, a log file is saved in your current directory. We might ask you to upload this file if we need to troubleshoot your installation, so that we can help you more effectively. If any of your packages are marked as “MISSING” you will need to figure out what is wrong and possibly reinstall them. Once all packages are marked as “OK” we will ask you to submit this log file, so that we can confirm that your installation was successful. Details on where to submit will be provided later.\n\nNote: In general you should be careful running scripts unless they come from a trusted source as in this case (just like how you should be careful when downloading and installing programs on your computer)."
  },
  {
    "objectID": "install_instructions/install_stack_mac.html#attributions",
    "href": "install_instructions/install_stack_mac.html#attributions",
    "title": "macOS (ARM)",
    "section": "Attributions",
    "text": "Attributions\n\nUBC MDS Software Stack Install Instructions\nHarvard CS109\nUBC STAT 545 licensed under the CC BY-NC 3.0\nSoftware Carpentry"
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html",
    "href": "install_instructions/install_stack_ubuntu.html",
    "title": "Ubuntu",
    "section": "",
    "text": "If you have already installed Git, Latex, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we require all students to install the software stack the same way.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#installation-notes",
    "href": "install_instructions/install_stack_ubuntu.html#installation-notes",
    "title": "Ubuntu",
    "section": "",
    "text": "If you have already installed Git, Latex, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we require all students to install the software stack the same way.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#ubuntu-software-settings",
    "href": "install_instructions/install_stack_ubuntu.html#ubuntu-software-settings",
    "title": "Ubuntu",
    "section": "Ubuntu software settings",
    "text": "Ubuntu software settings\nTo ensure that you are installing the right version of the software in this guide, open “Software & Updates” and make sure that the boxes in the screenshot are checked (this is the default configuration)."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#web-browser",
    "href": "install_instructions/install_stack_ubuntu.html#web-browser",
    "title": "Ubuntu",
    "section": "Web browser",
    "text": "Web browser\nIn DSCI 310 we will be using several tools that work most reliably on Google Chrome and Firefox (including our online quiz software), so we recommend that you use one of these browsers.\n\nFirefox comes preinstalled with Ubuntu, so there is not need to download anything.\nTo install Chrome, go to https://www.google.com/chrome/, click on “Download Chrome” choose the deb-file, download it to your computer and click on the downloaded file to install it.\n\n\nNote: If you select “open with” and try to open the file directly with the Ubuntu Software app instead of downloading it first, the software app might complain that the file is not supported."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#visual-studio-code",
    "href": "install_instructions/install_stack_ubuntu.html#visual-studio-code",
    "title": "Ubuntu",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nThe open-source text editor Visual Studio Code (VS Code) is both a powerful text editor and a full-blown Python IDE, which we will use for more complex analysis. You can install VS Code either via the Snap store/Ubuntu software app through this link or via the downloadable deb-file from the VS code website https://code.visualstudio.com/download. The getting started instructions are here: https://code.visualstudio.com/docs/?dv=linux64_deb.\nYou can test that VS code is installed and can be opened from Terminal by restarting terminal and typing the following command:\ncode --version\nyou should see something like this if you were successful:\n1.81.1\n6d9b74a70ca9c7733b29f0456fd8195364076dda\nx64"
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#github",
    "href": "install_instructions/install_stack_ubuntu.html#github",
    "title": "Ubuntu",
    "section": "GitHub",
    "text": "GitHub\nIn DSCI 310 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#git",
    "href": "install_instructions/install_stack_ubuntu.html#git",
    "title": "Ubuntu",
    "section": "Git",
    "text": "Git\nWe will be using the command line version of Git as well as Git through RStudio and JupyterLab. Some of the Git commands we will use are only available since Git 2.23, so if your Git is older than this version, we ask you to update it using the following commands:\nsudo apt update\nsudo apt install git\nYou can check your git version with the following command:\ngit --version\nyou should see something like this if you were successful:\ngit version 2.34.1\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\nNote: To ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command code ~/.gitconfig) or by typing git config --list --global.\n\n\n\nSetting VS Code as the default editor\nTo make programs run from the terminal (such as git) use VS Code by default, we will modify the bash configuration file ~/.bashrc. First, open it using VS Code:\ncode ~/.bashrc\n\nNote: If you see any existing lines in your ~/.bashrc related to a previous Python or R installation, please remove these.\n\nAppend the following lines:\n# Set the default editor for programs launch from terminal\nEDITOR=\"code --wait\"\nVISUAL=$EDITOR  # Use the same value as for \"EDITOR\" in the line above\nThen save the file and exit VS Code.\n\nNote: Most terminal programs will read the EDITOR environmental variable when determining which editor to use, but some read VISUAL, so we’re setting both to the same value.\n\nIn some cases, VScode is not set as the default text editor for git even after appending the two lines above, so to make sure it is registered properly, also run the following from your terminal:\ngit config --global core.editor \"code --wait\""
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#python-conda-and-jupyterlab",
    "href": "install_instructions/install_stack_ubuntu.html#python-conda-and-jupyterlab",
    "title": "Ubuntu",
    "section": "Python, Conda, and JupyterLab",
    "text": "Python, Conda, and JupyterLab\n\nPython and Conda\nWe will be using Python for a large part of the program, and conda as our Python package manager. To install Python and the conda package manager, we will use the Miniforge platform (read more here).\nSelect the appropriate link:\nYou can find the Mac ARM and Intel download links here: https://conda-forge.org/miniforge/. Make sure you use the Miniforge3 installers, not the other ones listed. We will assume you downloaded the file into your Downloads folder.\nOnce downloaded, open up a terminal and run the following command\nbash ${HOME}/Downloads/Miniforge3.sh -b -p \"${HOME}/miniforge3\"\nAfter installation run the following commands\nsource \"${HOME}/miniforge3/etc/profile.d/conda.sh\"\nconda activate\nconda init\nAfter installation, restart the terminal. If the installation was successful, you will see (base) prepending to your prompt string. To confirm that conda is working, you can ask it which version was installed:\nconda --version\nwhich should return something like this:\nconda 23.5.2\n\nNote: If you see zsh: command not found: conda, see the section on Bash{:target=“_self”} above to set your default Terminal shell to Bash as opposed to Zsh.\n\nNext, type the following to ask for the version of Python:\npython --version\nMake sure it returns Python 3.11.0 or greater:\nPython 3.11.4"
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#installing-python-packages",
    "href": "install_instructions/install_stack_ubuntu.html#installing-python-packages",
    "title": "Ubuntu",
    "section": "Installing Python packages",
    "text": "Installing Python packages\nconda installs Python packages from different online repositories which are called “channels”. A package needs to go through thorough testing before it is included in the default channel, which is good for stability, but also means that new versions will be delayed and fewer packages are available overall. There is a community-driven effort called the conda-forge (read more here), which provides more up to date packages. Conda-forge is already set up when we installed Miniforge3\nTo install packages individually, we can now use the following command: conda install &lt;package-name&gt;. After running that command conda will show you the packages that will be downloaded, and you can press enter to proceed with the installation. If you want to answer yes by default and skip this confirmation step, you can replace conda install with conda install -y. Also note that we may occasionally need to install packages using pip, the standard Python package manager. The installation command is very similar to that of conda: pip install &lt;package-name&gt;.\nIn the next session we will use conda to install some of the key packages we will use in DSCI 310."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#jupyterlab-setup",
    "href": "install_instructions/install_stack_ubuntu.html#jupyterlab-setup",
    "title": "Ubuntu",
    "section": "JupyterLab setup",
    "text": "JupyterLab setup\nJupyterLab is a coding environment that we will be using frequently throughout the course. The JupyterLab git extension facilitates using notebooks in JupyterLab together with Git & GitHub. The spellchecker helps us correcting typos in our writing. Install them via the following commands:\nconda install jupyterlab jupyterlab-git jupyterlab-spellchecker\nTo test that your JupyterLab installation is functional, you can type jupyter lab into a terminal, which should open a new tab in your default browser with the JupyterLab interface. To exit out of JupyterLab you can click File -&gt; Shutdown, or go to the terminal from which you launched JupyterLab and hold Ctrl while pressing c twice."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#r-irkernel-and-rstudio",
    "href": "install_instructions/install_stack_ubuntu.html#r-irkernel-and-rstudio",
    "title": "Ubuntu",
    "section": "R, IRkernel, and RStudio",
    "text": "R, IRkernel, and RStudio\nR is the second language that we will be using frequently in this course. We will use R both in Jupyter notebooks and in RStudio.\n\nR\nThe version of R available in the default Ubuntu repositories is older than the one we will be using in this course. To obtain the latest R packages, we need to add a new repository which is maintained directly by the r-project. To do this, first add the key for this repository by typing the following:\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\nThen add the URL to the repository:\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\nNext, install r-base and r-base-dev (useful for compiling R packages from source):\nsudo apt install r-base r-base-dev\nAfter installation, type the following in a new terminal window:\nR --version\nYou should see something like this if you were successful:\nR version 4.3.1 (2023-06-16) -- \"Beagle Scouts\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under the terms of the\nGNU General Public License versions 2 or 3.\nFor more information about these matters see\nhttps://www.gnu.org/licenses/.\n\nNote: See this page for additional instructions if you run into troubles while installing R.\n\n\nNote: Although it is possible to install R through conda, we highly recommend not doing so. In case you have already installed R using conda you can remove it by executing conda uninstall r-base.\n\n\n\nRStudio\nDownload the Ubuntu 22 Desktop version (not Pro) of RStudio from https://posit.co/download/rstudio-desktop/. Open the file and follow the installer instructions.\n\nNote: If you select “open with” and try to open the file directly with the Ubuntu Software app instead of downloading it first, the software app might complain that the file is not supported.\n\nTo see if you were successful, try opening RStudio by clicking on its icon or typing rstudio in a terminal.\n\nNote: Since we installed RStudio directly from a deb file rather than from a repository or a snap package, it will not be updated when we run sudo apt upgrade and not automatically as for snap packages. Instead, RStudio will notify you of any available updates when the program is launched.\n\nNow we are going to change RStudio’s Insert Pipe shortcut so that it inserts the new native pipe operator |&gt;. Go to Tools &gt; Global Options &gt; Code &gt; Editing and tick the following option:\n\nOnce the change is made you can try in the RStudio console Control + Shift + m to check if works.\nFinally, let’s install a common R package that you used a lot in DSCI 100 by typing the following into the console inside RStudio:\ninstall.packages(\"tidyverse\")\n\n\nIRkernel\nThe IRkernel package is needed to make R work in Jupyter notebooks. To enable this kernel in the notebooks, install by pasting the following command into the RStudio Console:\ninstall.packages('IRkernel')\nIRkernel::installspec()\n\nNote: If you see an error message saying “jupyter-client has to be installed…”, close RStudio and run the following line from your terminal instead R -e \"IRkernel::installspec()\".\n\nTo see if you were successful, try running JupyterLab and check if you have a working R kernel. To launch JupyterLab, type the following in a terminal:\njupyter lab\nA browser should have launched and you should see a page that looks like the screenshot below. Now click on “R” notebook (circled in red on the screenshot below) to launch an JupyterLab with an R kernel.\n\nSometimes a kernel loads, but doesn’t work as expected. To test whether your installation was done correctly now type library(tidyverse) in the code cell and click on the run button to run the cell. If your R kernel works you should see something like the image below:\n\nTo improve the experience of using R in JupyterLab, we will add keyboard shortcuts for inserting the common R operators &lt;- and |&gt;. Go to Settings -&gt; Settings Editor. Then click JSON Settings Editor in the top right corner and click on Keyboard Shortcuts in the navigation panel to the left. You will see two panels, the right-most panel allows you to perform advanced modification of keyboards shortcuts in JupyterLab and it already contains quite a few shortcuts. We’re going to add two more shortcuts, by pasting a text snippet just before the first existing shortcut. Go ahead and create a new line just after the line that says \"shortcuts\": [ and paste the following:\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Alt -\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"&lt;- \"}\n            }\n        },\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Accel Shift M\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"|&gt; \"}\n            }\n        },\nAfter you have pasted this text, hit the small floppy disk in the top right (or Ctrl + s) to save the settings. Here is a screenshot of what it looks like with the settings saved:\n\nTo check that the extension is working, open JupyterLab, launch an R notebook, and try inserting the operators by pressing Alt + - or Shift + Ctrl + m, respectively. You could add any arbitrary text insertion command the same way, but this is all that is required for this course."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#quarto-cli",
    "href": "install_instructions/install_stack_ubuntu.html#quarto-cli",
    "title": "Ubuntu",
    "section": "Quarto CLI",
    "text": "Quarto CLI\nQuarto is an open-source scientific and technical publishing system that you can access from VSCode, Jupyter Lab, RStudio, or the terminal.\nThe RStudio version that you have downloaded is already equipped with the last version of Quarto. You can check this by opening a new document in File -&gt; New File -&gt; Quarto Document.\nQuarto can be used outside RStudio as well, this is why we are going to install Quarto CLI. Please, download the last version of Quarto CLI for Linux.\nAfter the installation finishes, close all the terminals you may have open. Then, open a new one and try running this command:\nquarto --version\nIf the installation was successful you will read the output:\n1.3.450"
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#latex",
    "href": "install_instructions/install_stack_ubuntu.html#latex",
    "title": "Ubuntu",
    "section": "LaTeX",
    "text": "LaTeX\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, open RStudio and run the following commands to install the tinytex package and setup tinytex:\ninstall.packages('tinytex')\ntinytex::install_tinytex()\nAs recommended at the end of the installation, it is important to log out and in again for TinyTex to work properly (restarting the computer also works). Once you log back in, try running the following in a terminal:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.14159265-2.6-1.40.25 (TeX Live 2023)\nkpathsea version 6.3.2\nCopyright 2020 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.02\nThe above is all we need to have LaTeX work with R Markdown documents, however for Jupyter we need to install several more packages. To install the additional LaTeX packages needed for Jupyter paste the following into the new terminal instance and press enter:\ntlmgr install eurosym \\\n  adjustbox \\\n  caption \\\n  collectbox \\\n  enumitem \\\n  environ \\\n  fp \\\n  jknapltx \\\n  ms \\\n  parskip \\\n  pdfcol \\\n  pgf \\\n  rsfs \\\n  soul \\\n  tcolorbox \\\n  titling \\\n  trimspaces \\\n  ucs \\\n  ulem \\\n  upquote \\\n  lwarp \\\n  oberdiek\nTo test that your latex installation is working with jupyter notebooks, launch jupyter lab from a terminal and open either a new notebook or the same one you used to test IRkernel above. Go to File -&gt; Save and Export Notebook as... -&gt; PDF. If the PDF file is created, your LaTeX environment is set up correctly.\n\nWebPDF export\nJupyter recently added another way to export notebooks to PDF which does not require Latex and makes the exported PDF look similar to notebooks exported to HTML. This requires the an additional package, which we can install as follows.\npip install \"nbconvert[webpdf]\"\nplaywright install chromium\nNow you can try exporting by going to File -&gt; Save and Export Notebook As... -&gt; WebPDF."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#docker",
    "href": "install_instructions/install_stack_ubuntu.html#docker",
    "title": "Ubuntu",
    "section": "Docker",
    "text": "Docker\nYou will use Docker to create reproducible, sharable and shippable computing environments for your analyses. For this you will need a Docker account. You can sign up for a free one here.\nAfter signing-up, you also need to install Docker CE for Ubuntu. Install the stable version by following the installation instructions using the “Install using the repository” methods found here, including the subheadings “Set up the repository” and “Install Docker engine” (you can skip step 2 “Install a specific version of the docker engine” since we already got the latest from step 1).\nNext, follow the Linux post installation steps here so that you can run Docker without typing sudo (only the subheading “Managing docker as a non-root user”). Confirm that docker is working by following the verification instructions on that same page."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#vs-code-extensions-optional",
    "href": "install_instructions/install_stack_ubuntu.html#vs-code-extensions-optional",
    "title": "Ubuntu",
    "section": "VS Code extensions (Optional)",
    "text": "VS Code extensions (Optional)\nThe real magic of VS Code is in the extensions that let you add languages, debuggers, and tools to your installation to support your specific workflow. From within VS Code you can open up the Extension Marketplace (read more here) to browse and install extensions by clicking on the Extensions icon in the Activity Bar indicated in the figure below.\n\nTo install an extension, you simply search for it in the search bar, click the extension you want, and then click “Install”. There are extensions available to make almost any workflow or task you are interested in more efficient! Here we are interested in setting up VS Code as a Python IDE. To do this, search for and install the following extensions:\n\nPython (everything Python: notebooks, debugging, linting, formatting, etc.)\nmarkdownlint (markdown linting and style checking extension)\nGitLens (powerful extension that extends VS Code’s native git capabilities)\nGit History (intutive view of your git history)\nDocker (easily use Docker from VS Code)\n(Optional) Material Theme and/or Predawn Theme Kit (additional colour themes to choose from)\n(Optional) Material Icon Theme (great-looking custom file icons!)\n\nThis video tutorial is an excellent introduction to using VS Code in Python."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#post-installation-notes",
    "href": "install_instructions/install_stack_ubuntu.html#post-installation-notes",
    "title": "Ubuntu",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌! We have created a script to help you check that your installation was successful, and to provide instructions for how you can troubleshoot any potential issues. To run this script, please execute the following command from your terminal.\nbash &lt;(curl -Ss https://raw.githubusercontent.com/UBC-DSCI/dsci-310-student/main/src/check_setup.sh)\nThe output from running the script will look something like this:\n# DSCI 310 setup check 2024.1\n\nIf a program or package is marked as MISSING,\nthis means that you are missing the required version of that program or package.\nEither it is not installed at all or the wrong version is installed.\nThe required version is indicated with a number and an asterisk (*),\ne.g. 4.* means that all versions starting with 4 are accepted (4.0.1, 4.2.5, etc).\n\nYou can run the following commands to find out which version\nof a program or package is installed (if any):\n\n\nname_of_program --version  # For system programs\nconda list  # For Python packages\nR -q -e \"as.data.frame(installed.packages()[,3])\"  # For R packages\n\n\nChecking program and package versions...\n\n## Operating system\nProductName:            macOS\nProductVersion:         13.4\nBuildVersion:           22F66\n\n## System programs\nOK        rstudio 2023.12.0+369\nOK        R 4.3.2 (2023-10-31) -- \"Eye Holes\"\nOK        python 3.11.6\nOK        conda 23\nOK        bash 3.2.57(1)-release (arm64-apple-darwin22)\nOK        git 2.39.2 (Apple Git-143)\nOK        make 3.81\nOK        latex 3.141592653-2.6-1.40.25 (TeX Live 2023)\nOK        tlmgr 5:21 +0200)\nOK        docker 24.0.6, build ed223bc\nOK        code 1.85.0\n\n## Python packages\nOK        nbconvert-core=7.8.0\nOK        playwright=1.40.0\nOK        jupyterlab=4.0.6\nOK        jupyterlab-git=0.41.0\nOK        jupyterlab-spellchecker=0.8.4\nOK        jupyterlab PDF-generation was successful.\nOK        jupyterlab WebPDF-generation was successful.\nOK        jupyterlab HTML-generation was successful.\n\n## R packages\nOK        IRkernel=1.3.2\nOK        tinytex=0.46\nOK        rmarkdown PDF-generation was successful.\nOK        rmarkdown HTML-generation was successful.\n\nThe above output has been saved to the file /Users/timberst/Documents/dsci-310/dsci-310-student/check-setup-310.log\ntogether with system configuration details and any detailed error messages about PDF and HTML generation.\nYou can open this folder in your file browser by typing `open .` (without the surrounding backticks).\nAs you can see at the end of the output, a log file is saved in your current directory. We might ask you to upload this file if we need to troubleshoot your installation, so that we can help you more effectively. If any of your packages are marked as “MISSING” you will need to figure out what is wrong and possibly reinstall them. Once all packages are marked as “OK” we will ask you to submit this log file, so that we can confirm that your installation was successful. Details on where to submit will be provided later.\n\nNote: In general you should be careful running scripts unless they come from a trusted source as in this case (just like how you should be careful when downloading and installing programs on your computer)."
  },
  {
    "objectID": "install_instructions/install_stack_ubuntu.html#attributions",
    "href": "install_instructions/install_stack_ubuntu.html#attributions",
    "title": "Ubuntu",
    "section": "Attributions",
    "text": "Attributions\n\nUBC MDS Software Stack Install Instructions\nHarvard CS109\nUBC STAT 545 licensed under the CC BY-NC 3.0\nSoftware Carpentry"
  },
  {
    "objectID": "project/m3.html",
    "href": "project/m3.html",
    "title": "Milestone 3",
    "section": "",
    "text": "Functions abstracted to a file/module and addition of robust tests",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 3"
    ]
  },
  {
    "objectID": "project/m3.html#overall-project-summary",
    "href": "project/m3.html#overall-project-summary",
    "title": "Milestone 3",
    "section": "Overall project summary",
    "text": "Overall project summary\nIn this course you will work in assigned teams of three or four (see group assignments in Canvas) to answer a predictive question using a publicly available data set that will allow you to answer that question. To answer this question, you will perform a complete data analysis in R and/or Python, from data import to communication of results, while placing significant emphasis on reproducible and trustworthy workflows.\nYour data analysis project will evolve throughout the course from a single, monolithic Jupyter notebook, to a fully reproducible and robust data data analysis project, comprised of:\n\na well documented and modularized software package and scripts written in R and/or Python,\na data analysis pipeline automated with GNU Make,\na reproducible report powered by Quarto,\na containerized computational environment created and made shareable by Docker, and\nremote version control repositories on GitHub for project collaboration and sharing, as well as automation of test suite execution and documentation and software deployment.\n\nAn example final project from another course (where the project is similar) can be seen here: Breast Cancer Predictor",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 3"
    ]
  },
  {
    "objectID": "project/m3.html#milestone-3-summary",
    "href": "project/m3.html#milestone-3-summary",
    "title": "Milestone 3",
    "section": "Milestone 3 summary",
    "text": "Milestone 3 summary\nIn this milestone, you will:\n\nAbstract some code from your scripts to functions in a separate file, and write tests for those functions\nContinue to manage issues professionally\n\n\n1. Abstract some code from your scripts to functions in a separate file, and write tests for those functions\nIn every data science project, there is some code that is repetitive, and other code that may not be repetitive in the current project, but would likely be very useful in other, related future projects. It is well worth it to abstract such code to functions, making it easily reuseable in the future in other work. Examples of code that often repetitive in a data analysis projects:\n\ndata wrangling, cleaning or transformation code that gets applied to multiple columns or multiple data sets\ndata visualization code when many versions of a similar plot-type is used (e.g., many scatter plots with similar formatting)\ndata modeling workflow/pipeline code when tuning different models on the same data set\n\nAbstracting our analysis code into functions also makes it testable! Meaning you can assess whether your code works as expected. This alone is reason enough to use functions in your analysis code.\nYour job here is to create at least 3-4 functions from your scripts. One per group member is the minimum. When doing this task, follow the workflow for writing functions and tests for data science, remember this process will include:\n\nwriting thorough function specifications & documentation\nwriting robust unit tests for these functions to ensure they work as expected\nwriting the code that makes up the function body\n\nIf you are using R, these functions will live in an .R file (whose filename will be named after the function, or functions). It is OK to have one function per file, or all functions in one file. This/these file(s) will live in a sub-directory called R. If you are using Python, these functions will live in an .py file (whose filename will be named after the function, or functions). Again, it is OK to have one function per file, or all functions in one file. This/these file(s) will live in a sub-directory called src.\nYou will source (in the case of R) or import (in the case of Python) these functions in your scripts to use them in your analysis. Tests will live in a test directory, with files/subdirectories organized as per the testing framework you are using. If you are using R for your data analysis code, we expect you to use the testthat R package framework for writing software tests. If you are using Python, we expect you to use the pytest Python package framework.\nOf course, if it makes sense to have more than 3-4 you are welcome to increase the number! However, all functions must have the same standards in regards to software robustness. Your functions will be assessed for their quality (e.g., functions should do one thing, and generally return an object unless they were specifically designed for side-effects), usability, readability (follow the tidyverse style guide for R, or the black style guide for Python), documentation and quality of the test suite.\n\n\n5. Continue to manage issues professionally\nContinue managing issues effectively through project boards and milestones, make it clear who is responsible for what and what project milestone each task is associated with. In particular, create an issue for each task and/or sub-task needed for this milestone. Each of these issues must be assigned to a single person on the team. We want all of you to get coding experience in the project and each team member should be responsible for an approximately equal portion of the code.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 3"
    ]
  },
  {
    "objectID": "project/m3.html#submission-instructions",
    "href": "project/m3.html#submission-instructions",
    "title": "Milestone 3",
    "section": "Submission Instructions",
    "text": "Submission Instructions\nYou will submit two URLs to Canvas in the provided text box for milestone 3:\n\nthe URL of your project’s GitHub.com repository\nthe URL of a GitHub release of your project’s GitHub.com repository for this milestone.\n\n\nCreating a release on GitHub.com\nJust before you submit the milestone 3, create a release on your project repository on GitHub and name it something like 2.0.0 (how to create a release). This release allows us and you to easily jump to the state of your repository at the time of submission for grading purposes, while you continue to work on your project for the next milestone.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 3"
    ]
  },
  {
    "objectID": "project/m3.html#expectations",
    "href": "project/m3.html#expectations",
    "title": "Milestone 3",
    "section": "Expectations",
    "text": "Expectations\n\nEveryone should contribute equally to all aspects of the project (e.g., code, writing, project management). This should be evidenced by a roughly equal number of commits, pull request reviews and participation in communication via GitHub issues.\nEach group member should work in a GitHub flow workflow; where they create branches for each feature or fix, which are reviewed and critiqued by at least one other teammate before the the pull request is accepted.\nYou should be committing to git and pushing to GitHub.com every time you work on this project.\nGit commit messages should be meaningful. These will be marked. It’s OK if one or two are less meaningful, but most should be.\nUse GitHub issues to communicate to their team mate (as opposed to email or Slack).\nYour question, analysis and visualization should make sense. It doesn’t have to be complicated.\nYour analysis should be correct, and run reproducibly given the instructions provided in the README.\nYou should use proper grammar and full sentences in your README. Point form may occur, but should be less than 10% of your written documents.\nR code should follow the tidyverse style guide, and Python code should follow the black style guide for Python)\nYou should not have extraneous files in your repository that should be ignored.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 3"
    ]
  },
  {
    "objectID": "project/m1.html",
    "href": "project/m1.html",
    "title": "Milestone 1",
    "section": "",
    "text": "GitHub repository, statistical question, data & rough draft of analysis in one monolithic literate code document, reproducible environment (full.ipynb, Dockerfile, docker-compose.yml).",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 1"
    ]
  },
  {
    "objectID": "project/m1.html#overall-project-summary",
    "href": "project/m1.html#overall-project-summary",
    "title": "Milestone 1",
    "section": "Overall project summary",
    "text": "Overall project summary\nIn this course you will work in assigned teams of three or four (see group assignments in Canvas) to answer a predictive question using a publicly available data set that will allow you to answer that question. To answer this question, you will perform a complete data analysis in R and/or Python, from data import to communication of results, while placing significant emphasis on reproducible and trustworthy workflows.\nYour data analysis project will evolve throughout the course from a single, monolithic Jupyter notebook, to a fully reproducible and robust data data analysis project, comprised of:\n\nA well documented and modularized software package and scripts written in R and/or Python,\nA data analysis pipeline automated with GNU Make,\nA reproducible report powered by either Jupyter book or R Markdown,\nA containerized computational environment created and made shareable by Docker, and\nA remote version control repository on GitHub for project collaboration and sharing, As well as automation of test suite execution and documentation and software deployment.\n\nAn example final project from another course (where the project is similar) can be seen here: Breast Cancer Predictor",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 1"
    ]
  },
  {
    "objectID": "project/m1.html#milestone-1-summary",
    "href": "project/m1.html#milestone-1-summary",
    "title": "Milestone 1",
    "section": "Milestone 1 summary",
    "text": "Milestone 1 summary\nIn this milestone, you will:\n\nDraft a team work contract\nSet-up a public GitHub repository\nSelect a data analysis project to work with\nCreate an appropriate file and directory structure for a data analysis project\nAdd the data analysis as a literate code document\nMake the computation environment reproducible through containerization with Docker\n\nAn example project milestone 1 is available here: https://github.com/UBC-DSCI/predict-airbnb-nightly-price/tree/v1.0.2\n\n1. Draft a team work contract\nThis document will govern the working relationships on your team, and if done correctly, it should help you manage and resolve any issues that might arise when working in a group. A sample team work contract from a past data science project can be found here.\nA team work contract communicates specifically how the core group of people who are working together and gives detail about the logistics of working together and the expectations you have for each other.\nSome aspects of the team work contract could be:\n\nHow will work be distributed in a fair and equitable way?\nWhat are the expected work hours for the project?\nHow often will group meetings occur (here is a nice article on meetings)?\nWill you have meeting agendas and minutes? If so, what will be the system for rotating through these responsibilities?\nWhat will be the style of working?\n\nWill you start each day with stand-ups, or submit a summary of your contributions 4 hours before each meeting? or something else?\n\nWhat is the quality of work each team member expects from themselves and each other?\nWhen are team members not available (e.g., evenings and Sundays because of family obligations).\nAnd any other similar things that govern your working relationships.\n\nUse this opportunity to use your prior knowledge/experience to improve your teamwork, communication, leadership, and organizational skills.\n\n\n\n\n\n\nNote\n\n\n\nThis document is fairly personal and does NOT need to reside in your public GitHub.com repo.\nPlease submit this contract under a separate assignment.\n\n\n\n\n2. Set-up a GitHub repository\nNow set-up a public GitHub repository for your project in the format: dsci-310-group-XX-&lt;optional_team_name&gt;. You will create this project in the course github organization (not under a personal account).\nWe are using github.com and public repositories because we will eventually be using some fancy tooling (e.g., GitHub Actions) in this project. For this to work, all your work for this project (including scripts) should be developed and live in this repository on GitHub.com. Additionally, this will help you build a portfolio of your work you can share with others.\n\n\n\n\n\n\nNote\n\n\n\nIf you need to change the name of your project repository later, you can.\n\n\nThe tracking of the project will be done using GitHub milestones. When you create a milestone, you can associate it with issues and pull requests. After creating issues you can link them to a milestone associating each them to a project due date.\nIn order to make more efficient team workflow, organize the issues you have previously associated with milestones into a GitHub project board.\nThe project board should show the current status of the project to the team. Each collaborator is responsible of converting the issues to cards and then moving them through the board columns as the project evolves.\n\n\n3. Select a data analysis project to work with\nThe content of this analysis project should be a narrated analysis that asks and answers a predictive question using a classification or regression method taught in the prerequisite course, DSCI 100. For milestone 1, the code and analysis narrative should be contained within a single Jupyter notebook (e.g., .ipynb file), RMarkdown file (e.g., .Rmd file), or Quarto document (e.g., .qmd file). The analysis narrative should be rich, and at the level of the final project from DSCI 100. Either R or Python can be used to do this. However, all group members must have past experience using the language chosen and permission of the instructor must be given. The restrictions on the analysis methods and programming language are put in place to ensure that all group members can contribute equally to the project.\nThe data for the project should be publicly available, and clearly licensed to be shared and used openly on the internet. We strongly suggest you avoid using data sets where authentication is needed for access (e.g., Kaggle) as this adds another layer of complexity when making these projects reproducible.\n\nPossible data set sources\n\npast DSCI 100 projects (note: if you reuse part or all of a past DSCI 100 project, you will be required to provide documentation of written permission of all past teammates from that project)\nUCI Machine Learning Repository: Data Sets\nfivethirtyeight R package (if you use this, see the note below!)\nGovernment of Canada open data\nGitHub repo of awesome public datasets\ntidytuesday data set\nGoogle Data set search engine\n\n\n\n\n\n\n\nNote\n\n\n\nIf you choose a data set from the fivethirtyeight R package, you cannot copy their scientific question, visualizations or methods from the original FiveThirtyEight articles from where the data sets were first reported on. Finally, with the fivethirtyeight R package data sets, we want you to get practice reading them using the read_* functions in R or Python, so please use the versions of the data sets listed here: https://github.com/rudeboybert/fivethirtyeight/tree/master/data-raw\n\n\n\n\n\n4. Create an appropriate file and directory structure for a data analysis project\nFor this project, you are expected to follow the best practices we have learned about in regards to project directory and file structures. This should be reflected in your GitHub repository. Specifically for this milestone, please ensure that you include at least the following 7 files and directories in your project’s GitHub repository:\n\nREADME.md\nCODE_OF_CONDUCT.md\nCONTRIBUTING.md\ndata/\nanalysis.Rmd or analysis.qmd\nDockerfile\n.github/workflows/publish_docker_image.yml\nLICENSE.md\n\nThe description of each of them follows.\n\ni. README.md\nIn the main README.md file for this project you should include: - the project title - the list of contributors/authors - a short summary of the project (view from 10,000 feet) - how to run your data analysis - a list of the dependencies needed to run your analysis - the names of the licenses contained in LICENSE.md\nNote - this document should live in the root of your public GitHub.com repo.\n\n\nii. CODE_OF_CONDUCT.md\nIn an attempt to create a safe, positive, productive, and happy community, many organizations and developers create a code of conduct for their projects. A code of conduct in a Data Science project informs others of social norms, acceptable behaviour and general etiquette. It is more outward facing than the team work contract discussed above. We recommend Project Include for a comprehensive guide to writing an effective Code of Conduct.\nAt minimum, we believe that a good/effective code of conduct should include:\n\nA Statement on diversity and inclusivity\nDetails on expected, and unacceptable behaviour\nA list of consequences for unacceptable behaviour\nA procedure for reporting and dealing with unacceptable behaviour\n\n\nSample Codes of Conduct:\n\nUBC Data Science 100 CoC\nidocde Coc\nPython Community CoC\nTidyverse CoC\nPandas CoC\nVox Media CoC\n\nNote - this document should live in the root of your public GitHub.com repository.\n\n\n\niii. CONTRIBUTING.md\nIt is a good practice to include information about how others outside the core team can contribute to your project somewhere in your repository. This is typically done as a separate file in a repository called CONTRIBUTING.md. Here are some examples of this file:\n\nAltair\ndplyr\nAtom editor (very comprehensive)\n\nIf you’re interested in this, here’s a quick guide to creating this file from GitHub, but in the meantime, you can use the following snippet as a template:\nWe welcome all contributions to this project!\nIf you notice a bug, or have a feature request,\nplease open up an issue [here](https://github.com/UBC-DSCI/REPOSITORY_NAME/issues).\nIf you'd like to contribute a feature or bug fix,\nyou can fork our repo and submit a pull request.\nWe will review pull requests within 7 days.\nAll contributors must abide by our [code of conduct](CODE_OF_CONDUCT.md).\nNote - this document should live in the root of your public GitHub.com repository.\n\n\niv. data/\nThe data directory should contain a copy of the downloaded data (written there by code). An exception to this can be made if the data set is extremely large (&gt; 100 MB per file). In such cases, please reach out to the instructional team to make an alternative plan.\n\n\nv. analysis.ipynb / analysis.Rmd / analysis.qmd\nFor this milestone, the analysis code and narration should be contained within a single literate code document (e.g., Jupyter notebook, RMarkdown file, or Quarto document). This document should not actually be named analysis.***, but have a more descriptive title, related to the project title.\n\n\nvi. Dockerfile\nThe Dockerfile is the file used to specify and create the Docker image from which containers can be run to create an reproducible computational environment for your analysis. For this project, we recommend using a base Docker image that already has most of the software dependencies needed for your analysis. Examples of these include the Jupyter core team Docker images (documentation) and the Rocker team Docker images (documentation). When you add other software dependencies to this Dockerfile, ensure that you pin the version of the software that you add.\nNote - this document should live in the root of your public GitHub.com repository.\n\n\nvii. .github/workflows/publish_docker_image.yml\nIn this milestone, we expect you to add a GitHub Actions workflow to automatically build the image, push it to DockerHub, and version the image (using latest is okay for now) and GitHub repo when changes are pushed to the Dockerfile\nYou will need to add your DockerHub username and password (naming them DOCKER_USERNAME and DOCKER_PASSWORD, respectively) as GitHub secrets to this repository for this to work.\nThis part is similar to Individual Assignment 3.\n\n\nviii. LICENSE.md\nLicense’s tell others how they may (or may not) use your work. We will learn more about licenses later in the course, and for now we recommend using an MIT license for the project code and a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0) license for the project report. As long as your group agrees, these can be changed later in the course when you learn more about licenses. If you want to spend some time choosing different licenses now, we can recommend these two websites to help get you started:\n\nhttps://choosealicense.com/\nhttps://chooser-beta.creativecommons.org/\n\n\n\n\n5. Add the data analysis as a literate code document\nFor this milestone, the analysis code and narration should be contained within a single literate code document (i.e., Jupyter notebook). The following sections should be included:\n\nTitle\nSummary\nIntroduction:\n\nprovide some relevant background information on the topic so that someone unfamiliar with it will be prepared to understand the rest of your report\nclearly state the question you tried to answer with your project\nidentify and describe the dataset that was used to answer the question\n\nMethods & Results:\n\ndescribe in written english the methods you used to perform your analysis from beginning to end that narrates the code the does the analysis.\nyour report should include code which:\nloads data from the original source on the web\nwrangles and cleans the data from it’s original (downloaded) format to the format necessary for the planned classification or clustering analysis\nperforms a summary of the data set that is relevant for exploratory data analysis related to the planned classification analysis\ncreates a visualization of the dataset that is relevant for exploratory data analysis related to the planned classification analysis\nperforms classification or regression analysis\ncreates a visualization of the result of the analysis\nnote: all tables and figure should have a figure/table number and a legend\n\nDiscussion:\n\nsummarize what you found\ndiscuss whether this is what you expected to find?\ndiscuss what impact could such findings have?\ndiscuss what future questions could this lead to?\n\nReferences:\n\nat least 4 citations relevant to the project (format is your choose, just be consistent across the references).\n\n\n\n\n6. Make the computation environment reproducible through containerization with Docker\nFor this project, we will be making the computation environment reproducible through containerization with Docker. We will use Docker containers for collaborative project development, as well as for sharing a reproducible analysis at the end of the project. It is expected that: - the Docker image, from which containers are generated, will be specified by a Dockerfile that lives in the root of the project’s GitHub repository - the building of the Docker image and distribution of it via DockerHub will be automated via GitHub Actions - an explanation of how to run and use Docker to develop and execute the analysis will be documented in the README.md file.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 1"
    ]
  },
  {
    "objectID": "project/m1.html#submission-instructions",
    "href": "project/m1.html#submission-instructions",
    "title": "Milestone 1",
    "section": "Submission Instructions",
    "text": "Submission Instructions\nYou will submit two URLS’s to Canvas in the provided text box for milestone 1:\n\nthe URL of your project’s GitHub.com repository\nthe URL of a GitHub release of your project’s project’s GitHub.com repository\nIn a separate file / Submission, your teamwork contract\n\n\nCreating a release on GitHub.com\nJust before you submit the milestone 1, create a release on your project repository on GitHub and name it 0.0.1 (how to create a release). This release allows us and you to easily jump to the state of your repository at the time of submission for grading puroposes, while you continue to work on your project for the next milestone.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 1"
    ]
  },
  {
    "objectID": "project/m1.html#expectations",
    "href": "project/m1.html#expectations",
    "title": "Milestone 1",
    "section": "Expectations",
    "text": "Expectations\n\nEveryone should contribute equally to all aspects of the project (e.g., code, writing, project management). This should be evidenced by a roughly equal number of commits, pull request reviews and participation in communication via GitHub issues.\nAfter the repository is set-up, each group member should work in a GitHub flow workflow; where they create branches for each feature or fix, which are reviewed and critiqued by at least one other teammate before the the pull request is accepted.\nYou should be committing to git and pushing to GitHub.com every time you work on this project.\nGit commit messages should be meaningful. These will be marked. It’s OK if one or two are less meaningful, but most should be.\nUse GitHub issues to communicate to their team mate (as opposed to email or Slack).\nYour question, analysis and visualization should make sense. It doesn’t have to be complicated.\nYou should use proper grammar and full sentences in your README. Point form may occur, but should be less than 10% of your written documents.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 1"
    ]
  },
  {
    "objectID": "tutorials/t9.html",
    "href": "tutorials/t9.html",
    "title": "Tutorial 9",
    "section": "",
    "text": "Creating a quarto website.\nYou can see the course notes for quarto + github pages here: https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/lectures/930-quarto-ghpages.html\nYou will be doing the final exercise listed in the chapter for the tutorial.\n*Creating and Deploying a Quarto Website**\nObjective: By completing this exercise, students will gain hands-on experience in creating a Quarto website and deploying it using GitHub Pages.\nInstructions:\n\nCreate a New Quarto Website Project:\n\nOpen your command line interface (Terminal on Mac/Linux, Command Prompt/PowerShell on Windows).\nUse the quarto create project command to create a new Quarto website project.\n\nquarto create project\n\nSelect “website” as the project type and provide a directory name for your project.\n\nNavigate to Your Project Directory:\n\nChange into the newly created project directory.\n\ncd your_project_directory\nCustomize Your Quarto Website:\n\nOpen the _quarto.yml file in a text editor and customize the settings as needed.\n\nproject:\n  type: website\n  output-dir: docs\n\nModify the content of the index.qmd and about.qmd files to personalize your website.\n\nRender Your Quarto Website:\n\nUse the quarto render command to generate the HTML files for your website.\n\nquarto render\n\nVerify that the output is created in the docs directory.\n\nInitialize a Git Repository:\n\nIf you haven’t already, initialize a Git repository in your project directory.\n\ngit init\n\nAdd all files to the Git repository and commit them.\n\ngit add .\ngit commit -m \"Initial commit of Quarto website\"\nPush Your Project to GitHub:\n\nCreate a new repository on GitHub and follow the instructions to push your local repository to GitHub.\n\ngit remote add origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPOSITORY_NAME.git\ngit branch -M main\ngit push -u origin main\nEnable GitHub Pages:\n\nGo to the settings of your GitHub repository.\nUnder the “Pages” section, set the source to the docs folder on the main branch.\nSave the settings and wait for GitHub to publish your website.\n\nVerify Your Website:\n\nNavigate to https://YOUR_GITHUB_USERNAME.github.io/YOUR_REPOSITORY_NAME to see your published Quarto website.\n\nMigrate the website to the gh-pages branch\n\ndelete the docs folder that renders your website\nignore the docs and _site folder in your .gitignore\nCreate and publish your website to the gh-pages branch\n\ngit checkout --orphan gh-pages\ngit reset --hard # make sure all changes are committed before running this!\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\ngit push origin gh-pages\n\nquarto publish gh-pages\nYou can still use regular quarto render or quarto preview to build your site locally, you will no longer need to manually build and push the site to the main branch\nAuto build the site using a github action\n\nAuto build the website when changes are pushed to main. make sure you manually publish to the gh-pages branch before creating the workflow.\n\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}",
    "crumbs": [
      "Tutorials",
      "Tutorial 9"
    ]
  },
  {
    "objectID": "tutorials/t6.html",
    "href": "tutorials/t6.html",
    "title": "Tutorial 6: Refactor Quarto Doc",
    "section": "",
    "text": "Below you fill find the text for an example data analysis report using R and Quarto.\n\nCopy the text below into your own quarto document\nRender the document to check it is all working\nYour task is to refactor each section into separate R scripts (01_load_data.R, 02_methods.R, 03_model.R, 04_results.R) and make sure each script can completely run independently from one another without source()ing another script.\nYour scripts should save out what ever data artifact it needs for both the pipline code and the quarto report\nCreate a Makefile with a target named all that will run all the scripts in the correct order.\nEdit the quarto report such that it does not need to run any of the script code and loads up any table data or figure it needs in the report. You can load data from the script and write code to make a table prettier in quarto if you’d like.\n\nYou can download the sample quarto document here: https://github.com/UBC-DSCI/dsci-310-student/blob/main/example_files/t6-quarto.qmd",
    "crumbs": [
      "Tutorials",
      "Tutorial 6: Refactor Quarto Doc"
    ]
  },
  {
    "objectID": "tutorials/t6.html#refactoring-a-quarto-report",
    "href": "tutorials/t6.html#refactoring-a-quarto-report",
    "title": "Tutorial 6: Refactor Quarto Doc",
    "section": "",
    "text": "Below you fill find the text for an example data analysis report using R and Quarto.\n\nCopy the text below into your own quarto document\nRender the document to check it is all working\nYour task is to refactor each section into separate R scripts (01_load_data.R, 02_methods.R, 03_model.R, 04_results.R) and make sure each script can completely run independently from one another without source()ing another script.\nYour scripts should save out what ever data artifact it needs for both the pipline code and the quarto report\nCreate a Makefile with a target named all that will run all the scripts in the correct order.\nEdit the quarto report such that it does not need to run any of the script code and loads up any table data or figure it needs in the report. You can load data from the script and write code to make a table prettier in quarto if you’d like.\n\nYou can download the sample quarto document here: https://github.com/UBC-DSCI/dsci-310-student/blob/main/example_files/t6-quarto.qmd",
    "crumbs": [
      "Tutorials",
      "Tutorial 6: Refactor Quarto Doc"
    ]
  },
  {
    "objectID": "tutorials/t5.html",
    "href": "tutorials/t5.html",
    "title": "Tutorial 5",
    "section": "",
    "text": "Create a repository and clone it down\nCreate a bash script that lists (using a bash command) the files of your current working directory, the root of the repo. Name it list.sh\nCreate a dockerfile that uses the rocker/rstudio container, using version 4.2.2.\nCopy the list.sh into the container\nRun the script in the container\nDocument how to run the container and run the script in the container. We must follow the steps until we are able to run and see the output. Put your steps in the README.md file\nFor Tuesday: Create a github action that also runs this bash script",
    "crumbs": [
      "Tutorials",
      "Tutorial 5"
    ]
  },
  {
    "objectID": "tutorials/t2.html",
    "href": "tutorials/t2.html",
    "title": "Tutorial 2",
    "section": "",
    "text": "This tutorial will focus on Git + GitHub practice",
    "crumbs": [
      "Tutorials",
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorials/t2.html#git-github",
    "href": "tutorials/t2.html#git-github",
    "title": "Tutorial 2",
    "section": "Git + GitHub",
    "text": "Git + GitHub\n\nCreate a github repository from github.com\nclone it down to your computer\nCreate/Edit the README file and write a short definition for the following commands:\n\ngit branch\ngit switch\ngit log --oneline --graph --all\n\nadd/commit/push your definitions to your github repository",
    "crumbs": [
      "Tutorials",
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorials/t2.html#branches-and-pull-requests-prs",
    "href": "tutorials/t2.html#branches-and-pull-requests-prs",
    "title": "Tutorial 2",
    "section": "Branches and Pull Requests (PRs)",
    "text": "Branches and Pull Requests (PRs)\n\nCreate a new branch (does not matter what name you give it)\nIn the new branch define the following terms:\n\nbranch\npull request\n\nPush your branch up to github and create a pull request\nMake a comment in your own pull request\nMerge your pull request into main\nUpdate your local main branch",
    "crumbs": [
      "Tutorials",
      "Tutorial 2"
    ]
  },
  {
    "objectID": "tutorials/t2.html#extra-merge-conflicts",
    "href": "tutorials/t2.html#extra-merge-conflicts",
    "title": "Tutorial 2",
    "section": "Extra: Merge Conflicts",
    "text": "Extra: Merge Conflicts\nLet’s create a PR with a merge conflict\n\nCreate a new branch from main, edit the readme file, at the top and define the follow terms\n\ngit add\ngit commit\n\nPush this branch and create a PR, but DO NOT merge it\nOn your local machine, go back to your main branch\nCreate yet another branch from main (you should not be on your previous branch)\nAt the top of your readme file define the following terms\n\ngit push ...\ngit pull ...\n\nadd/commit/push your branch\nCreate another PR from your second branch\nTry to merge both branches now, you should see a merge conflict when you try to merge the 2nd branch",
    "crumbs": [
      "Tutorials",
      "Tutorial 2"
    ]
  },
  {
    "objectID": "individual_assignment/ia2.html",
    "href": "individual_assignment/ia2.html",
    "title": "Individual assignment 2",
    "section": "",
    "text": "The purpose of this assignment is to start familiarizing yourselves with version control with Git and GitHub. It will build on the git demos in class as well as the TA tutorials from week 1 (intro shell/bash) and week 2 (merge conflicts). Specifically, we will create a toy repository with a merge conflict and learn how to resolve it. A merge conflict occurs when Git is unable to automatically determine how to incorporate new changes. This can can occur when two branches modify the same line, or when a file is deleted when someone else is changing it. You can read more about merge conflicts here: Git merge conflicts.\nFollow the instructions listed below. You will be graded for completion.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 2"
    ]
  },
  {
    "objectID": "individual_assignment/ia2.html#step-1-create-a-repository",
    "href": "individual_assignment/ia2.html#step-1-create-a-repository",
    "title": "Individual assignment 2",
    "section": "Step 1: Create a repository",
    "text": "Step 1: Create a repository\nCreate a new public repository on GitHub.com\n\nNamed {date}-learning-about-version-control\nReplace the {date} part of the repository name with a date. This way you can come back and re-do this assignment for exam practice. We won’t be grading on when you create the repository.\nCreate it under your own github account (Not the course organization)\n\nMake sure the repository:\n\nIncludes a README.md that has a header that says “Learning about Version Control” and has your name listed as the author.\nIs public\nYou may edit the README.md file using the web interface.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 2"
    ]
  },
  {
    "objectID": "individual_assignment/ia2.html#step-2-clone-your-repository",
    "href": "individual_assignment/ia2.html#step-2-clone-your-repository",
    "title": "Individual assignment 2",
    "section": "Step 2: Clone your repository",
    "text": "Step 2: Clone your repository\nClone your {date}-learning-about-version-control repository to your local computer.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 2"
    ]
  },
  {
    "objectID": "individual_assignment/ia2.html#step-3-merge-conflict",
    "href": "individual_assignment/ia2.html#step-3-merge-conflict",
    "title": "Individual assignment 2",
    "section": "Step 3: Merge Conflict",
    "text": "Step 3: Merge Conflict\nCreate and resolve a merge conflict 😱!\n\nOn your remote version control repository, use the pen tool to add a line to the README that says “Solving merge conflicts is easy!”\nOn your local version control repository, edit the same line in the README that you just edited, but this time write “Solving merge conflicts is soooooo hard!”\nAdd and commit your local changes to the README, and the try to push the file so that you create the merge conflict.\nResolve the merge conflict on your local computer so that the line reads “Solving merge conflicts takes conscious effort, but I can do it!”. Take a screen shot while you are resolving the conflict to document you did this.\nPush the local changes to your remote version control repository.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 2"
    ]
  },
  {
    "objectID": "individual_assignment/ia2.html#step-4-pull-request",
    "href": "individual_assignment/ia2.html#step-4-pull-request",
    "title": "Individual assignment 2",
    "section": "Step 4: Pull request",
    "text": "Step 4: Pull request\nCreate and accept a pull request!\n\nCreate a new Git branch on your local version control repository named opinions and switch to that branch.\nEdit your README so that you add at least one sentence about what you like most about version control, and add at least one sentence about what you find most challenging/confusing/frustrating about version control (we all have opinions on this one…). Add and commit your changes to local version control.\nPush the changes to the README that you made on the opinions branch to the remote repository on GitHub.com.\nVisit GitHub.com and create a pull request to suggest that the changes on the opinions branch should be merged into the main branch.\nAccept the pull request you opened to merge your changes from the opinions branch into the main branch.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 2"
    ]
  },
  {
    "objectID": "individual_assignment/ia2.html#submission-instructions",
    "href": "individual_assignment/ia2.html#submission-instructions",
    "title": "Individual assignment 2",
    "section": "Submission Instructions",
    "text": "Submission Instructions\nYou will submit a PDF to Gradescope for individual assignment 1 that includes:\n\nthe URL of the commit history of GitHub.com repository you created and worked on for this assignment (it will be something like: https://github.com/&lt;YOURUSERNAME&gt;/&lt;DATE&gt;learning-about-version-control/commits/main)\nthe screenshot of your resolved merge conflict\nan explanation (2-3 sentences and in your own words) of why it is useful to work in a branch-pull-request workflow instead of working by directly committing each change to the main branch.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 2"
    ]
  },
  {
    "objectID": "individual_assignment/ia2.html#rubric",
    "href": "individual_assignment/ia2.html#rubric",
    "title": "Individual assignment 2",
    "section": "Rubric",
    "text": "Rubric\nThis assignment will be graded for completion as follows:\n\n\n\n\n\n\n\nGrade\nDescription\n\n\n\n\n100%\nGitHub history (check under pull request tab in repo) indicates a successfully merged pull request from opinions into main, clearly demonstrated solving the merge conflict in screenshot and well explained why it is useful to work in a branch-pull-request workflow\n\n\n-25%\nGitHub history (check under pull request tab in repo) does not indicate a successfully merged pull request from opinions into main\n\n\n-25%\nDid not clearly demonstrate solving the merge conflict in screenshot.\n\n\n-25%\nDid not well explain why it is useful to work in a branch-pull-request workflow.\n\n\n-100%\nNo repository or attempt",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 2"
    ]
  },
  {
    "objectID": "individual_assignment/ia1.html",
    "href": "individual_assignment/ia1.html",
    "title": "Individual assignment 1",
    "section": "",
    "text": "Complete the computer setup installation instructions which corresponds to your computer’s operating system:\n\nComputer setup installation instructions",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 1"
    ]
  },
  {
    "objectID": "individual_assignment/ia1.html#instructions",
    "href": "individual_assignment/ia1.html#instructions",
    "title": "Individual assignment 1",
    "section": "",
    "text": "Complete the computer setup installation instructions which corresponds to your computer’s operating system:\n\nComputer setup installation instructions",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 1"
    ]
  },
  {
    "objectID": "individual_assignment/ia1.html#submission",
    "href": "individual_assignment/ia1.html#submission",
    "title": "Individual assignment 1",
    "section": "Submission",
    "text": "Submission\nYou will submit a PDF to Gradescope for individual assignment 1 that includes a copy of the output of the check_setup.sh script you ran (instructions in “Post-installation notes” section of the computer setup instructions)",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 1"
    ]
  },
  {
    "objectID": "individual_assignment/ia1.html#troubleshooting",
    "href": "individual_assignment/ia1.html#troubleshooting",
    "title": "Individual assignment 1",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nWe understand that you may encounter issues when following the installation instructions. If/when you do, please post your issues on the course Piazza forum to obtain assistance trouble shooting these. When asking for help on Piazza please ensure you include the following information in your post to ensure we can help you:\n\nOperating system type (e.g., Windows, Mac x86, Mac ARM, or Ubuntu) and version\nWhat you did that led to the issue (command/code typed, software that was attempted to be installed)\nClear description and/or screenshot of the issue\n\nWhen possible please share commands typed and error messages as text, not screenshots, as text can be copied and pasted by the teaching team to help search for solutions.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 1"
    ]
  },
  {
    "objectID": "individual_assignment/ia1.html#rubric",
    "href": "individual_assignment/ia1.html#rubric",
    "title": "Individual assignment 1",
    "section": "Rubric",
    "text": "Rubric\nThis assignment will be graded for completion as follows:\n\n\n\n\n\n\n\nGrade\nDescription\n\n\n\n\n100%\nThe output of the check_setup.sh script indicates that 90% or more of the installation instructions were attempted.\n\n\n50%\nThe output of the check_setup.sh script indicates that only 50%, or less, of the installation instructions were attempted.\n\n\n0%\nNo output from the check_setup.sh script was provided, or the output of the check_setup.sh script indicates that only 25%, or less, of the installation instructions were attempted.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 1"
    ]
  },
  {
    "objectID": "individual_assignment/ia5.html",
    "href": "individual_assignment/ia5.html",
    "title": "Individual assignment 5",
    "section": "",
    "text": "The purpose of this assignment is to ensure that everyone gains hands-on practice creating software packages in R or Python (or both for bonus points)! This will help prepare you to work on and complete your group project for this course.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 5"
    ]
  },
  {
    "objectID": "individual_assignment/ia5.html#motivation",
    "href": "individual_assignment/ia5.html#motivation",
    "title": "Individual assignment 5",
    "section": "",
    "text": "The purpose of this assignment is to ensure that everyone gains hands-on practice creating software packages in R or Python (or both for bonus points)! This will help prepare you to work on and complete your group project for this course.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 5"
    ]
  },
  {
    "objectID": "individual_assignment/ia5.html#exercise-instructions",
    "href": "individual_assignment/ia5.html#exercise-instructions",
    "title": "Individual assignment 5",
    "section": "Exercise instructions",
    "text": "Exercise instructions\nThis assignment you will follow the tutorial to create a toy/practice package using the language you are using for your course project. Follow the instructions in the chapters linked to below. Use the code they provide for the package functions.\n\nMake an R package:\n\nRead through and follow the instructions in The Whole Game to create a toy/practice package in the R programming language. Push all your work to GitHub.com in a repository under your personal username.\n\n\n\nAnd/or make a Python package:\n\nRead through and follow the instructions in How to package a Python to create a toy/practice package in the Python programming language. Note - you only need to publish your package to TestPyPI, not PyPI. Push all your work to GitHub.com in a repository under your personal username.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 5"
    ]
  },
  {
    "objectID": "individual_assignment/ia5.html#submission-instructions",
    "href": "individual_assignment/ia5.html#submission-instructions",
    "title": "Individual assignment 5",
    "section": "Submission Instructions",
    "text": "Submission Instructions\nYou will submit a PDF to Gradescope for this individual assignment that includes:\n\nthe URL of the GitHub.com repository containing your toy/practice package in the Python programming language\nthe URL of the GitHub.com repository containing your toy/practice package in the R programming language",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 5"
    ]
  },
  {
    "objectID": "individual_assignment/ia5.html#rubric",
    "href": "individual_assignment/ia5.html#rubric",
    "title": "Individual assignment 5",
    "section": "Rubric",
    "text": "Rubric\nThis assignment will be graded for completion as follows:\n\n\n\n\n\n\n\nGrade\nDescription\n\n\n\n\n110%\nA complete and working toy R package, as well as a complete and working toy Python package\n\n\n100%\nA complete and working toy R or Python package\n\n\n75%\nA complete but non-working toy R or Python package\n\n\n50%\nA complete but non-working toy R or Python package\n\n\n50%\nAn incomplete but non-working toy R or Python package\n\n\n0%\nThe assignment was not attempted.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 5"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "See UBC Calendar"
  },
  {
    "objectID": "syllabus.html#time-and-place",
    "href": "syllabus.html#time-and-place",
    "title": "Syllabus",
    "section": "",
    "text": "See UBC Calendar"
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course description",
    "text": "Course description\nData science methods to automate the running and testing of code and analytic reports, manage data analysis software dependencies, package and deploy software for data analysis, and collaborate with others using version control.\nPre-reqs: DSCI 100 and either (a) one of CPSC 203, CPSC 210, CPEN 221 or (b) one of MATH 210, ECON 323 and one of CPSC 107, CPSC 110.\nSee the Faculty of Science Credit Exclusion Lists: www.calendar.ubc.ca/vancouver/index.cfm?tree=12,215,410,414\nLong version: Data Science skills and tools are increasingly in demand across a large variety of disciplines. DSCI 310 aims to further students’ existing data science knowledge with reproducible and trustworthy workflows in the areas of creating and deploying data analysis, reports, and software. Particular focus will be placed on teaching the skills and tools currently used in academic research and industry settings.\nWithout deliberate and conscious effort towards project organization, tool choice, and workflows, complex and large data science projects can quickly grow out-of-hand and become irreproducible and untrustworthy. This course will focus on reproducible and trustworthy workflows for writing computer scripts, analytic reports and data analysis pipelines, as well as packaging, automated testing and deployment of software written for data analysis. An emphasis is also placed on how to collaborate effectively with others using version control tools, such as Git and GitHub. Such workflows act to mitigate chaos and maximize transparency, reproducibility, and productivity.\nWhile the course will be based on the use of the two leading languages in data science, Python and R, and related current tools (conda, Docker, Git, GitHub, Jupyter, etc.), the concepts and skills taught in the course aim to be discipline and tool agnostic, focussing on the importance of reproducible and trustworthy workflows for data analysis and the implications of failing to implement these when performing a data analysis.\nStudents who have completed this course will be able to complete complex data analysis projects with minimal technical debt – meaning that others can transparently follow how the analysis was done, reproduce the analysis for themselves if desired, and easily pickup on, and further extend the analysis in new areas. Strategies for collaboration on data science projects will also be emphasized."
  },
  {
    "objectID": "syllabus.html#textbook",
    "href": "syllabus.html#textbook",
    "title": "Syllabus",
    "section": "Textbook",
    "text": "Textbook\nWe will be using a collection of resources available online. These include:\n\nDSCI 310 course notes\nR packages\nPython packages"
  },
  {
    "objectID": "syllabus.html#hardware-software",
    "href": "syllabus.html#hardware-software",
    "title": "Syllabus",
    "section": "Hardware & software",
    "text": "Hardware & software\nStudents are required to bring a laptop to both lectures and tutorials. Students who do not own a laptop, chromebook, or tablet may be able to loan a laptop from the UBC library."
  },
  {
    "objectID": "syllabus.html#course-level-learning-outcomes",
    "href": "syllabus.html#course-level-learning-outcomes",
    "title": "Syllabus",
    "section": "Course-level learning outcomes",
    "text": "Course-level learning outcomes\nBy the end of the course, students will be able to:\n\nDefend and justify the importance of creating data science workflows that are reproducible and trustworthy and the elements that go into such a workflow (e.g., writing clear, robust, accurate and reproducible code, managing and sharing compute environments, defined collaboration strategies, etc).\nConstructively criticize the workflows and data analysis of others in regards to its reproducibility and trustworthiness.\nDevelop a data science project (including code and non-code documents such as reports) that uses reproducible and trustworthy workflows\nDemonstrate how to effectively share and collaborate on data science projects and software by creating robust code packages, using reproducible compute environments, and leveraging collaborative development tools.\nDefend and justify the benefit of, and employ automated testing regimes, continuous integration and continuous deployment for managing and maintaining data science projects and packages.\nDemonstrate strong communication, teamwork, and collaborative skills by working on a significant data science project with peers throughout the course."
  },
  {
    "objectID": "syllabus.html#teaching-team",
    "href": "syllabus.html#teaching-team",
    "title": "Syllabus",
    "section": "Teaching team",
    "text": "Teaching team\nNote that your TAs are students too; they may have class right before their office hours, and they may run a few minutes late. Please be patient!\n\n\n\n\n\n\n\n\nPosition\nName\nEmail\nOffice Hours\nLocation\n\n\n\n\nInstructor\nDaniel Chen\nSee Canvas\nSee Canvas\nSee Canvas\n\n\nTA\nNA\nSee Canvas\nSee Canvas\nSee Canvas\n\n\nTA\nNA\nSee Canvas\nSee Canvas\nSee Canvas"
  },
  {
    "objectID": "syllabus.html#assessment",
    "href": "syllabus.html#assessment",
    "title": "Syllabus",
    "section": "Assessment",
    "text": "Assessment\n\nCourse breakdown\nThis course includes a substantial group project component. You will work in randomly assigned groups of four for the project milestones. There are also individual assignments that act as stepping stones to the project milestones. Given that collaboration is so important in data science, a portion of your final grade will be an assessment of the evidence you provide that you were an effective and productive team member. A combination of peer evaluation and GitHub history will be used to evaluate this. Your individual knowledge on the course materials (concepts and practical skills) will be evaluated on two summative assessments (midterm and final exam).\nFinally, this course is delivered in a blended format, with some pre-work (video watching or reading) expected to be done before each lecture. These will be provided in the course Canvas shell. Each in class lecture session will start with iClicker cloud questions to probe your understanding of the pre-lecture material and then we will work through demonstrations and exercises in class to build off of this.\n\n\n\n\n\n\n\n\n\nGrade (%)\nLearning Objectives Addressed\n\n\n\n\niClicker cloud1\n1\n1 – 6\n\n\nIndividual assignments\n1\n1, 2, 4, 5\n\n\nProject milestone 1\n5\n3, 6\n\n\nProject milestone 2\n5\n3, 4, 6\n\n\nProject milestone 3\n5\n3, 4, 5, 6\n\n\nFinal project\n5\n3, 4, 5, 6\n\n\nPeer review\n2.5\n2\n\n\nTeamwork\n5\n6\n\n\nGitHub username quiz\n0.5\nNA\n\n\nMidterm exam2\n20\n1, 2, part of 4\n\n\nFinal exam3\n50\n1, 2, 4, 5\n\n\n\n1 We will be using iClicker cloud in the lectures regularly. You will be graded on both participation and performance (50% each). The three lowest iClicker marks will not be counted.\n\n\n2 A higher final exam grade can be used to replace a lower midterm exam grade.\n\n\n3 You must pass the final exam to pass the course."
  },
  {
    "objectID": "syllabus.html#schedule-at-a-glance",
    "href": "syllabus.html#schedule-at-a-glance",
    "title": "Syllabus",
    "section": "Schedule at a glance",
    "text": "Schedule at a glance\n\n\n\n\n\n\n\n\nWeek\nDate\nTopic\nAssessments due\nNotes\n\n\n\n\n1\nJan 7\nHow do reproducible and trustworthy workflows impact data analysis?\nNA\nStart working on your installation instructions\n\n\n2\nJan 14\nVersion control for transparency and collaboration\nIndividual assignment 1 & GitHub username quiz\nNA\n\n\n3\nJan 21\nIntegrated development environments, filenames and data science project organization\nIndividual assignment 2\nNA\n\n\n4\nJan 28\nManaging dependencies using virtual environments\nNA\nTeam assignment for group projects & drafting of team work contract\n\n\n5\nFeb 4\nManaging dependencies using containerization\nIndividual assignment 3\nNA\n\n\n6\nFeb 11\nNon-interactive scripts and reproducible reports\nNA\nNA\n\n\n6\nFeb 14\nMid-term exam\nNA\nYou will need to have git, github, and docker working for the exam\n\n\n7\nFeb 18\nReading Break\nNA\nNA\n\n\n8\nFeb 25\nData analysis pipelines\nMilestone 1\nNA\n\n\n9\nMar 4\nIntroduction to testing code for data science\nIndividual assignment 4\nNA\n\n\n10\nMar 11\nAdvanced version control workflows\nMilestone 2\nNA\n\n\n11\nMar 18\nPackaging and project work session\nNA\nNA\n\n\n12\nMar 25\nProject work session & documenting code\nMilestone 3\nNA\n\n\n13\nApr 1\nAutomated testing and continuous integration\nIndividual assignment 5 & Peer review\nNA\n\n\n14\nApr 8\nDeploying and publishing packages, copyright and licenses\nFinal project & Team work reflection\nNA\n\n\n\n\n\n\n\n\nAssessment schedule\nIn general, assignments will be due 11:59 PM on Saturdays. However, in the final week of classes, all assignments need to be submitted by the final day of classes, thus we have two alternative due dates that week.\n\n\n\n\n\n\n\n\n\nDescription\nDue Date1\nDue Week\n\n\n\n\nIndividual assignment 1\nSetting up your computer\nJan 18\n2\n\n\nGitHub username quiz\nCreate a GitHub account (if you haven’t already) and let us know what it is\nJan 18\n2\n\n\nIndividual assignment 2\nVersion control practice\nJan 25\n3\n\n\nIndividual assignment 3\nDockerfile practice\nFeb 8\n5\n\n\nMid-term exam2,3\nThe midterm is a summative assessment\nFeb 14\n6\n\n\nMilestone 1\nQuestion, data & rough draft of analysis in one monolithic literate code document, reproducible environment\nMar 1\n8\n\n\nIndividual assignment 4\nReproducible reports practice\nMar 8\n9\n\n\nMilestone 2\nliterate code document broken into scripts and a report & data analysis pipeline to stitch everything together\nMar 15\n10\n\n\nMilestone 3\nfunctions abstracted to a file/module & tests, function documentation\nMar 29\n12\n\n\nPeer review\nreview of another group's project\nApr 5\n13\n\n\nIndividual assignment 5\nPackaging practice\nApr 5\n13\n\n\nFinal project\npackage & CI (the full monty package - including docs)\nApr 11\n14\n\n\nTeam work\nReflection of how the group worked together, as well as individual performance\nApr 11\n14\n\n\nFinal exam2,3,4\nThe Final Exam will include all the material covered in all the components of the course (cumulative). This is a summative assessment.\nNA\nNA\n\n\n\n1 Assignments are due at 23:59 Vancouver time unless otherwise stated.\n\n\n2 These are summative assessments, you can learn more about them here: https://www.cmu.edu/teaching/assessment/basics/formative-summative.html\n\n\n3 A higher final exam score can be used to replace a lower midterm exam score.\n\n\n4 You must pass the final to pass the course."
  },
  {
    "objectID": "syllabus.html#policies",
    "href": "syllabus.html#policies",
    "title": "Syllabus",
    "section": "Policies",
    "text": "Policies\n\nCode of Conduct\nAll participants in our course and communications are expected to show respect and courtesy to others. To creating a friendly and respectful place for learning, teaching and contributing, you are expected to read and follow the DSCI 310 Code of Conduct.\n\n\nLate registration\nStudents who register for the class late have 1 week from their registration date on Canvas to complete all prior assignments.\n\n\nLate assignments / mid-term exam absence\nStudents must be present at the invigilation venue (in class, on Zoom, examination centre, etc) to take the mid-term exam; otherwise they will be considered to have missed the mid-term exam and will be assigned a grade of zero.\nStudents who will miss the mid-term exam must provide a self-declaration prior to the mid-term exam and make arrangements (e.g., schedule an oral make-up mid-term exam) with the Instructor. Failing to present a declaration within a reasonable timeframe before the mid-term exam will result in a grade of zero.\nA late submission is defined as any work submitted after the deadline. For a late submission, the student will receive a 75% scaling of their grade for the first occurrence, 50% scaling of their grade for the second occurrence, and will receive a grade of 0 for subsequent occurrences.\nStudents who miss an assignment or quiz can request an academic concession. From the UBC Senate policy on academic concession, grounds for academic concession can be illness, conflicting responsibilities, or compassionate grounds. Examples of compassionate grounds, from the above policy, include “a traumatic event experienced by the student, a family member, or a close friend; an act of sexual assault or other sexual misconduct experienced by the student, a family member, or a close friend; a death in the family or of a close friend.”\nTo request an academic concession, students should immediately email a completed and signed academic concession form to the course Instructor. Upon receiving the form, the Instructor will make a decision about how to proceed. Failure to present valid documentation may result in a failing grade.\n\n\nRe-grading\nIf you have concerns about the way your work was graded, please contact the TA who graded it within one week of having the grade returned to you through Piazza. After this one-week window, we may deny your request for re-evaluation. Also, please keep in mind that your grade may go up or down as a result of re-grading.\n\n\nMissed final exam\nStudents who miss the final quiz must report to their faculty advising office within 72 hours of the missed exam, and must supply supporting documentation. Only your faculty advising office can grant deferred standing in a course. You must also notify your instructor prior to (if possible) or immediately after the exam. Your instructor will let you know when you are expected to write your deferred exam. Deferred exams will ONLY be provided to students who have applied for and received deferred standing from their faculty.\n\n\nAcademic concession policy\nPlease see UBC’s concession policy for detailed information on dealing with missed coursework, quizzes, and exams under circumstances of an acute and unanticipated nature.\n\n\nAcademic integrity\nThe academic enterprise is founded on honesty, civility, and integrity. As members of this enterprise, all students are expected to know, understand, and follow the codes of conduct regarding academic integrity. At the most basic level, this means submitting only original work done by you and acknowledging all sources of information or ideas and attributing them to others as required. This also means you should not cheat, copy, or mislead others about what is your work. Violations of academic integrity (i.e., misconduct) lead to the breakdown of the academic enterprise, and therefore serious consequences arise and harsh sanctions are imposed. For example, incidences of plagiarism or cheating may result in a mark of zero on the assignment or exam and more serious consequences may apply if the matter is referred to the President’s Advisory Committee on Student Discipline. Careful records are kept in order to monitor and prevent recurrences.\nA more detailed description of academic integrity, including the University’s policies and procedures, may be found in the Academic Calendar at http://calendar.ubc.ca/vancouver/index.cfm?tree=3,54,111,0.\n\n\nPlagiarism\nStudents must correctly cite any code or text that has been authored by someone else or by the student themselves for other assignments. Cases of plagiarism may include, but are not limited to:\n\nthe reproduction (copying and pasting) of code or text with none or minimal reformatting (e.g., changing the name of the variables)\nthe translation of an algorithm or a script from a language to another\nthe generation of code by automatic code-generation software\n\nAn “adequate acknowledgement” requires a detailed identification of the (parts of the) code or text reused and a full citation of the original source code that has been reused.\nThe above attribution policy applies only to assignments. No code or text may be copied (with or without attribution) from any source during a quiz or exam. Answers must always be in your own words. At a minimum, copying will result in a grade of 0 for the related question.\nRepeated plagiarism of any form could result in larger penalties, including failure of the course."
  },
  {
    "objectID": "syllabus.html#attribution",
    "href": "syllabus.html#attribution",
    "title": "Syllabus",
    "section": "Attribution",
    "text": "Attribution\nParts of this syllabus (particularly the policies) have been copied and derived from the UBC MDS Policies."
  },
  {
    "objectID": "coc.html",
    "href": "coc.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "We are committed to creating a friendly and respectful place for learning, teaching and contributing. All participants in our course and communications are expected to show respect and courtesy to others.\nTo make clear what is expected, everyone participating in DSCI 310 activities is required to conform to the Code of Conduct. This Code of Conduct applies to all spaces managed by DSCI 310 including, but not limited to, class meetings, email communication, and online forums such as Piazza and GitHub. The DSCI 310 teaching team are expected to assist with the enforcement of the Code of Conduct.\nThe DSCI 310 Instructor(s) is responsible for enforcing the Code of Conduct. All reports will be reviewed by the Instructor(s) and will be kept confidential."
  },
  {
    "objectID": "coc.html#attribution",
    "href": "coc.html#attribution",
    "title": "Code of Conduct",
    "section": "Attribution",
    "text": "Attribution\n\nDerived from the Carpentries Code of Conduct"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSCI 310",
    "section": "",
    "text": "Welcome to the course website for DSCI 310! Course-specific information is contained within this website. General resources (course notes and textbook readings) are located at the links below:\n\nDSCI 310 course notes\nR packages\nPython packages\n\nWe will also be using Canvas for this course. Please ensure you can access the DSCI 310 Canvas course shell at canvas.ubc.ca."
  },
  {
    "objectID": "assessments.html",
    "href": "assessments.html",
    "title": "Assessment schedule",
    "section": "",
    "text": "This course includes a substantial group project component. You will work in randomly assigned groups of four for the project milestones. There are also individual assignments that act as stepping stones to the project milestones. Given that collaboration is so important in data science, a portion of your final grade will be an assessment of the evidence you provide that you were an effective and productive team member. A combination of peer evaluation and GitHub history will be used to evaluate this. Your individual knowledge on the course materials (concepts and practical skills) will be evaluated on two summative assessments (midterm and final exam).\nFinally, this course is delivered in a blended format, with some pre-work (video watching or reading) expected to be done before each lecture. These will be provided in the course Canvas shell. Each in class lecture session will start with iClicker cloud questions to probe your understanding of the pre-lecture material and then we will work through demonstrations and exercises in class to build off of this.\nIn general, assignments will be due 11:59 PM on Saturdays. However, in the final week of classes, all assignments need to be submitted by the final day of classes, thus we have two alternative due dates that week.\n\n\n\n\n\n\n\n\n\nDescription\nDue Date1\nDue Week\n\n\n\n\nIndividual assignment 1\nSetting up your computer\nJan 18\n2\n\n\nGitHub username quiz\nCreate a GitHub account (if you haven’t already) and let us know what it is\nJan 18\n2\n\n\nIndividual assignment 2\nVersion control practice\nJan 25\n3\n\n\nIndividual assignment 3\nDockerfile practice\nFeb 8\n5\n\n\nMid-term exam2,3\nThe midterm is a summative assessment\nFeb 14\n6\n\n\nMilestone 1\nQuestion, data & rough draft of analysis in one monolithic literate code document, reproducible environment\nMar 1\n8\n\n\nIndividual assignment 4\nReproducible reports practice\nMar 8\n9\n\n\nMilestone 2\nliterate code document broken into scripts and a report & data analysis pipeline to stitch everything together\nMar 15\n10\n\n\nMilestone 3\nfunctions abstracted to a file/module & tests, function documentation\nMar 29\n12\n\n\nPeer review\nreview of another group's project\nApr 5\n13\n\n\nIndividual assignment 5\nPackaging practice\nApr 5\n13\n\n\nFinal project\npackage & CI (the full monty package - including docs)\nApr 11\n14\n\n\nTeam work\nReflection of how the group worked together, as well as individual performance\nApr 11\n14\n\n\nFinal exam2,3,4\nThe Final Exam will include all the material covered in all the components of the course (cumulative). This is a summative assessment.\nNA\nNA\n\n\n\n1 Assignments are due at 23:59 Vancouver time unless otherwise stated.\n\n\n2 These are summative assessments, you can learn more about them here: https://www.cmu.edu/teaching/assessment/basics/formative-summative.html\n\n\n3 A higher final exam score can be used to replace a lower midterm exam score.\n\n\n4 You must pass the final to pass the course.",
    "crumbs": [
      "Assessments",
      "Assessment schedule"
    ]
  },
  {
    "objectID": "computer-setup.html",
    "href": "computer-setup.html",
    "title": "Computer setup",
    "section": "",
    "text": "These instructions will walk you through how to install the required Data Science software stack for DSCI 310. Before starting with the installation instructions, ensure that your laptop meets our program requirements. If your computer does not meet the requirements please reach out to the teaching team on Piazza and describe how it does not. We will work to accommodate you where we can."
  },
  {
    "objectID": "computer-setup.html#laptop-requirements",
    "href": "computer-setup.html#laptop-requirements",
    "title": "Computer setup",
    "section": "Laptop requirements",
    "text": "Laptop requirements\n\nRuns one of the following operating systems: Ubuntu 20.04 (any version &gt;=20.04 will likely work), macOS (version 11.4.x or higher), Windows 11 (version 2004, 20H2, 21H1 or higher).\n\nWhen installing Ubuntu, checking the box “Install third party…” will (among other things) install proprietary drivers, which can be helpful for wifi and graphics cards.\n\nCan connect to networks via a wireless connection for on campus work\nHas access to an internet connection that is fast and stable enough for video calling and conducting online quizzes\nHas at least 30 GB disk space available (50 GB is recommended)\nHas at least 4 GB of RAM (8 GB is recommended)\nUses a 64-bit CPU\nIs at most 6 years old (4 years old or newer is recommended)\nUses English as the default language\nStudent user has full administrative access to the computer"
  },
  {
    "objectID": "computer-setup.html#software-installation-instructions",
    "href": "computer-setup.html#software-installation-instructions",
    "title": "Computer setup",
    "section": "Software installation instructions",
    "text": "Software installation instructions\nPlease click the appropriate link below to view the installation instructions for your operating system:\n\nmacOS arm\nUbuntu\nWindows\n\nThe following people contributed to these instructions: Daniel Chen, Anmol Jawandha, Tomas Beuzen, Rodolfo Lourenzutti, Joel Ostblom, Arman Seyed-Ahmadi, Florencia D’Andrea, and Tiffany Timbers."
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Tutorials for the Friday sessions",
    "crumbs": [
      "Tutorials"
    ]
  },
  {
    "objectID": "individual_assignment/ia4.html",
    "href": "individual_assignment/ia4.html",
    "title": "Individual assignment 4",
    "section": "",
    "text": "The purpose of this assignment is to ensure that everyone gains hands-on practice creating reproducible reports using Quarto.\nThroughout the pre-requisites for DSCI 310, you have become familiar with using Jupyter Notebooks to interweave narration and runnable code into a single document. This allowed you to pass your analysis over to a co-worker or reviewer, who could reproduce your work by running your notebook from top to bottom.\nBut are Jupyter Notebooks all there is to creating reproducible reports? Not entirely… For example, Jupyter Notebooks struggle with organization and configuration. Imagine you have an extremely long and complicated report packed into a single Jupyter Notebook. Writing out a table of contents, formatting a bibliography, and adding labels to figures can become extremely cumbersome, especially as they evolve with your analysis during the review process.\nImagine you have 25 figures and tables labelled 1 to 25 and you decide to add a new figure at the very start of your report; figure 1 now needs to be renamed to figure 2, table 2 now needs to be renamed to table 3, figure 3 now needs to be renamed to figure 4…\nThis is where Quarto (and related tools) can come in handy. Although they have their own set of disadvantages, they are certainly an improvement over plain Jupyter Notebooks. They allow for the automatic creation and formatting of a table of contents, a bibliography, and those pesky figure labels, among many other features. During this individual assignment, you will start to familiarize yourself with Quarto reports, start to understand their advantages and disadvantages, and begin to recognize their similarities and differences from basic Jupyter notebooks.\n\n\nWe suggest you read through the instructions first before doing them in sequence.\n\n\nGoal: Create a copy from the template repository.\n\nCreate a copy of either the R template repository or the Python template repository on GitHub.com under your personal username\n\nNotes:\n\nDo not create it under the DSCI-310 organization\nWe, the teaching team, also need to be able to see this repository in order to grade it so we strongly suggest making it public.\n\n\n\n\nGoal: Get familiar with the repository\nInside the the R template repository or the Python template repository, there are several directories and files. Here is a quick rundown of each:\n\ndata: contains data used in the analysis (do not edit)\nreports: contains the Quarto report file (ends in qmd_example.qmd) that contains the narrative of the analysis report and the code to display the analysis artifacts (tables and figures) (incomplete - you will need to edit this), and the BibTeX references file (references.bib) for the report (do not edit)\nMakefile: declares commands used to build the Quarto report (do not edit)\n\nThis file has all the commands you need to do this assignment.\n\nresults: output of the script in source\nsource/generate_figures.R or source/generate_figures.py: a script that performs the analysis and outputs various plots and a table that are to be used in the report (do not edit)\n\n\n\n\nGoal: Familiarize yourself with the Makefile targets\n\nThe Makefile has all the targets needed to render the final Quarto report.\nYou will want to have GNU Make build the qmd target to do this.\n\nNotes:\n\nThe HTML version of the report is saved to docs/qmd_example.html\nThe PDF version will be saved to docs/qmd_example.pdf\nThe Makefile commands will help you\n\n\n\n\nGoal: Create the example report so that it is a polished academic manuscript.\nEdit reports/qmd_example.rmd (using either R or Python Quarto syntax, the choice is yours) so that:\n\nAdd header formatting to sections (e.g., “Aim”, “Data”, “Methods”, “Results”, “References”) and Quarto configuration so that a table of contents that is automatically generated from the document headers will be created when the document is rendered (docs on how to do this)\nAdd correctly formatted inline bibtex references so that a nicely formatted reference list will be present at the end of the document (docs on how to do this)\nEdit the figure formatting (docs on how to do this) so that Quarto:\n\nautomatically numbers them\nhas a label for easy cross referencing\ncontrols the figure sizes so the figures are not too big (in particular the second figure in the report should be only 60-70% of the default width)\n\nadd a table description argument so that they are automatically numbered by Quarto and use cross referencing to link to the table if/when it is discussed in the text (docs on how to do this)\nEdit the narrative so it uses cross-referencing to refer to the figures and tables instead of having their reference hardcode the figure and table numbers.\nreplace the ??? in the Quarto report narrative text with inline Quarto code, so that the text will be automatically updated with the correct value (docs on how to do this)\nchange the code chunk options so that no code is viewable in the rendered report, just the code outputs where needed (e.g., figures and tables) (docs on how to do this)\n(optional) Turn on GitHub pages so that it serves up the docs directory so that the report is viewable on the web. For this optional and extra credit step, you may need to edit the Makefile.\n\n\n\n\n\nYou will submit a PDF to Gradescope for individual assignment 3 that includes:\n\nA link to the GitHub.com repository that you create for this assignment.\n(optional) link to the HTML report served on GitHub pages.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 4"
    ]
  },
  {
    "objectID": "individual_assignment/ia4.html#instructions",
    "href": "individual_assignment/ia4.html#instructions",
    "title": "Individual assignment 4",
    "section": "",
    "text": "The purpose of this assignment is to ensure that everyone gains hands-on practice creating reproducible reports using Quarto.\nThroughout the pre-requisites for DSCI 310, you have become familiar with using Jupyter Notebooks to interweave narration and runnable code into a single document. This allowed you to pass your analysis over to a co-worker or reviewer, who could reproduce your work by running your notebook from top to bottom.\nBut are Jupyter Notebooks all there is to creating reproducible reports? Not entirely… For example, Jupyter Notebooks struggle with organization and configuration. Imagine you have an extremely long and complicated report packed into a single Jupyter Notebook. Writing out a table of contents, formatting a bibliography, and adding labels to figures can become extremely cumbersome, especially as they evolve with your analysis during the review process.\nImagine you have 25 figures and tables labelled 1 to 25 and you decide to add a new figure at the very start of your report; figure 1 now needs to be renamed to figure 2, table 2 now needs to be renamed to table 3, figure 3 now needs to be renamed to figure 4…\nThis is where Quarto (and related tools) can come in handy. Although they have their own set of disadvantages, they are certainly an improvement over plain Jupyter Notebooks. They allow for the automatic creation and formatting of a table of contents, a bibliography, and those pesky figure labels, among many other features. During this individual assignment, you will start to familiarize yourself with Quarto reports, start to understand their advantages and disadvantages, and begin to recognize their similarities and differences from basic Jupyter notebooks.\n\n\nWe suggest you read through the instructions first before doing them in sequence.\n\n\nGoal: Create a copy from the template repository.\n\nCreate a copy of either the R template repository or the Python template repository on GitHub.com under your personal username\n\nNotes:\n\nDo not create it under the DSCI-310 organization\nWe, the teaching team, also need to be able to see this repository in order to grade it so we strongly suggest making it public.\n\n\n\n\nGoal: Get familiar with the repository\nInside the the R template repository or the Python template repository, there are several directories and files. Here is a quick rundown of each:\n\ndata: contains data used in the analysis (do not edit)\nreports: contains the Quarto report file (ends in qmd_example.qmd) that contains the narrative of the analysis report and the code to display the analysis artifacts (tables and figures) (incomplete - you will need to edit this), and the BibTeX references file (references.bib) for the report (do not edit)\nMakefile: declares commands used to build the Quarto report (do not edit)\n\nThis file has all the commands you need to do this assignment.\n\nresults: output of the script in source\nsource/generate_figures.R or source/generate_figures.py: a script that performs the analysis and outputs various plots and a table that are to be used in the report (do not edit)\n\n\n\n\nGoal: Familiarize yourself with the Makefile targets\n\nThe Makefile has all the targets needed to render the final Quarto report.\nYou will want to have GNU Make build the qmd target to do this.\n\nNotes:\n\nThe HTML version of the report is saved to docs/qmd_example.html\nThe PDF version will be saved to docs/qmd_example.pdf\nThe Makefile commands will help you\n\n\n\n\nGoal: Create the example report so that it is a polished academic manuscript.\nEdit reports/qmd_example.rmd (using either R or Python Quarto syntax, the choice is yours) so that:\n\nAdd header formatting to sections (e.g., “Aim”, “Data”, “Methods”, “Results”, “References”) and Quarto configuration so that a table of contents that is automatically generated from the document headers will be created when the document is rendered (docs on how to do this)\nAdd correctly formatted inline bibtex references so that a nicely formatted reference list will be present at the end of the document (docs on how to do this)\nEdit the figure formatting (docs on how to do this) so that Quarto:\n\nautomatically numbers them\nhas a label for easy cross referencing\ncontrols the figure sizes so the figures are not too big (in particular the second figure in the report should be only 60-70% of the default width)\n\nadd a table description argument so that they are automatically numbered by Quarto and use cross referencing to link to the table if/when it is discussed in the text (docs on how to do this)\nEdit the narrative so it uses cross-referencing to refer to the figures and tables instead of having their reference hardcode the figure and table numbers.\nreplace the ??? in the Quarto report narrative text with inline Quarto code, so that the text will be automatically updated with the correct value (docs on how to do this)\nchange the code chunk options so that no code is viewable in the rendered report, just the code outputs where needed (e.g., figures and tables) (docs on how to do this)\n(optional) Turn on GitHub pages so that it serves up the docs directory so that the report is viewable on the web. For this optional and extra credit step, you may need to edit the Makefile.\n\n\n\n\n\nYou will submit a PDF to Gradescope for individual assignment 3 that includes:\n\nA link to the GitHub.com repository that you create for this assignment.\n(optional) link to the HTML report served on GitHub pages.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 4"
    ]
  },
  {
    "objectID": "individual_assignment/ia4.html#rubric",
    "href": "individual_assignment/ia4.html#rubric",
    "title": "Individual assignment 4",
    "section": "Rubric",
    "text": "Rubric\nThis assignment will be graded for completion as follows:\n\n\n\n\n\n\n\nGrade\nDescription\n\n\n\n\n110%\nAll 6 of the required edits to the .qmd document above were met and the HTML version of the report was served up on GitHub pages\n\n\n100%\nAll 6 of the required edits to the .qmd document above were met and the report generates a working PDF and HTML file via the Makefile.\n\n\n85%\n5/6 of the required edits to the .qmd document listed above were met.\n\n\n70%\n4/6 of the required edits to the .qmd document listed above were met.\n\n\n55%\n3/6 of the required edits to the .qmd document listed above were met.\n\n\n40%\n2/6 of the required edits to the .qmd document listed above were met.\n\n\n25%\n1/6 of the required edits to the .qmd document listed above were met.\n\n\n0%\nThe assignment was not attempted.\n\n\n\n\nYou will only get the extra points for serving up the HTML version of the report on GitHub pages if all of the main assignment components were completed.",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 4"
    ]
  },
  {
    "objectID": "individual_assignment/ia3.html",
    "href": "individual_assignment/ia3.html",
    "title": "Individual assignment 3",
    "section": "",
    "text": "Practice building Docker images",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 3"
    ]
  },
  {
    "objectID": "individual_assignment/ia3.html#instructions",
    "href": "individual_assignment/ia3.html#instructions",
    "title": "Individual assignment 3",
    "section": "Instructions",
    "text": "Instructions\nThe purpose of this assignment is to ensure that everyone gains hands-on practice on creating Docker images from Dockerfiles.\n\nSubmission instructions\nIn the text box provided for this assignment on Canvas, you must submit:\n\nA link to the GitHub.com repository that you create for this assignment.\n\nYou should name your GitHub.com repository dsci310-ia3-&lt;USERNAME&gt;-docker.\nYou need to create this assignment in the course organization: https://github.com/DSCI-310-2025\n\nA the link to your Docker image on DockerHub. You should name your DockerHub repository dsci310-ia3-&lt;USERNAME&gt;-docker.\n\n\n\n\n\n\n\nWarning\n\n\n\nMake sure your repository is under the DSCI-310-2025 organization. You can do a “repository transfer” if you need to, but your submission needs to be in the correct org.\n\n\n\n\nExercise instructions\n\nCreate a public repository on GitHub.com repo under your personal username called dsci310-ia3-&lt;USERNAME&gt;-docker\n\nYou can choose a pre-made .gitignore or manually create one yourself\n\nAdd a Dockerfile to it. This Dockerfile should be based off of the rocker/rstudio:4.4.2 Docker image\n\nlink to rocker/rstudio DockerHub repository\nlink to rocker/rstudio:4.4.2 Dockerfile\n\nAdd at least one new R package to the Dockerfile using (ensure that you pin the version of the package you add).\n\nThere are 2 ways of doing this. There are different benefits to each of the methods depicted. You only need to do one of them for the assignment.\nOne way is to turn your dsci310-ia3-&lt;USERNAME&gt;-docker into a local RStudio project then do the following steps:\n\nOpen the RStudio project locally\nInitialize the project with renv\nUse {renv} to install a package (e.g., cowsay) and then make sure you create a script that loads/uses the {cowsay} package.\nIn your Dockerfile COPY all your renv files into the container\nUse the outputs from renv to help you specify which functions to use to install the libraries\n\n\nHint: you might need to toggle the USER in the Dockerfile between rstudio and root to get everything working.\n\nAnother way is to RUN commands directly in the Dockerfile to install packages\n\nHint: You cannot use install.packages() because you can’t pin a version number.\nHint: You can run R code directly from the command line. For example, Rscript -e \"print('something to say...')\". Make sure to change the double quotes \"\" to single quotes '' in the R code.\nHint: You will need to first install the {remotes} package, and then use the remotes::install_version() function\n\n\nBuild your Dockerfile and test it locally.\nAdd a GitHub Actions workflow to automatically build the image, push it to DockerHub, and version the image and GitHub repo when changes are pushed to the Dockerfile\n\nUse the “Docker image” workflow\n\nYou can also start off with an empty file and paste in a workflow by clicking “Skip this and setup a workflow yourself”.\n\nYou will need to add your DockerHub username and password (naming them DOCKER_USERNAME and DOCKER_PASSWORD, respectively) as GitHub secrets to this repository for this to work.\nHere are some resources to help you create your own Github Action Workflow:\n\nGithub Actions Docker reference: https://docs.github.com/en/actions/publishing-packages/publishing-docker-images\n\n\n\n(As Needed): Make sure you make at least one change to the Dockerfile once the GitHub Actions have been setup so that you get the image automatically built and pushed to DockerHub at least once. - You can also add a workflow_dispatch: trigger and manually trigger a workflow\n\nNote: If you are making an renv.lock file and you notice it’s not updating with renv::snapshot(), take a look at this FAQ",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 3"
    ]
  },
  {
    "objectID": "individual_assignment/ia3.html#rubric",
    "href": "individual_assignment/ia3.html#rubric",
    "title": "Individual assignment 3",
    "section": "Rubric",
    "text": "Rubric\nThis assignment will be graded for completion as follows:\n\nA Docker image named dockerfile-practice and tagged with a version exists under the student’s username on DockerHub.\nThe Dockerfile used to create the Docker image lives in a GitHub repository named dsci310-ia3-&lt;USERNAME&gt;-docker under the DSCI-310 org.\nThere is evidence that a GitHub Actions workflow can successfully build a Docker image from the Dockerfile in the GitHub repository, and publish it to DockerHub.\nThe Docker image version tag is in sync with the GitHub repository release tag. (Not needed – Free Point)\nAt least one new R package was added to the Dockerfile and the version of that package was pinned.\n\n\n\n\n\n\n\n\nGrade\nDescription\n\n\n\n\n100%\n5/5 of the criteria listed above were met.\n\n\n75%\n4/5 of the criteria listed above were met.\n\n\n50%\n3/5 of the criteria listed above were met.\n\n\n25%\n2/5 of the criteria listed above were met.\n\n\n0%\nOnly 1/5 of the criteria listed above were met or the assignment was not attempted.\n\n\n50%\nMaximum amount of points if created in the wrong organization\n\n\n\nAdditional points taken off:\n\n-2% for checking in files that are not supposed to be in the repository (temporary system files, thumbnail files, IDE user files, etc)",
    "crumbs": [
      "Assessments",
      "Individual Assignments",
      "Individual assignment 3"
    ]
  },
  {
    "objectID": "tutorials/t3.html",
    "href": "tutorials/t3.html",
    "title": "Tutorial 3",
    "section": "",
    "text": "Here we’ll practice with programming language environments.\nIf conda and python does not apply to you, you may skip the conda and python portion of the tutorial. If you are taking, have taken, or planning to take a class that uses python it will still be worth practicing and familiarizing yourself with conda environments.",
    "crumbs": [
      "Tutorials",
      "Tutorial 3"
    ]
  },
  {
    "objectID": "tutorials/t3.html#r-environments-renv",
    "href": "tutorials/t3.html#r-environments-renv",
    "title": "Tutorial 3",
    "section": "R Environments: renv",
    "text": "R Environments: renv\n\nOpen up RStudio\nrun getwd() in the r console, and note the default starting working directory in R when not in a project.\nCreate an RStudio Project (either from an existing folder, or create a new folder)\nrun getwd() again and see how the working directory changes\nInstall the renv package (if you do not have it installed)\nNote all the current installed R packages you have in the packages panel\nRun the renv::init() in the current project (you can also choose to library(renv) and then init() as 2 separate steps\nNow note the packages in the package panel\nInstall the palmerpenguins package in R\nLibrary the palmerpenguins package\nyou should now have access to the penguins dataframe\nupdate the lock file with renv::snapshot()\nOpen a new RStudio or close the current project\nYou should not be in your project now, and notice the packages listed listed. And notice how the packages change again when you open up the project you just made",
    "crumbs": [
      "Tutorials",
      "Tutorial 3"
    ]
  },
  {
    "objectID": "tutorials/t3.html#python-environments-conda",
    "href": "tutorials/t3.html#python-environments-conda",
    "title": "Tutorial 3",
    "section": "Python Environments: conda",
    "text": "Python Environments: conda\n\nOpen up a terminal, you should be in a conda base environment\nRun python --version and which python to check the python version you have and which one is actually being used\ncreate a new conda environment with a different python version from the one you currently have in base\nactivate this environment\ninstall jupyterlab and pandas in the new environment\ncreate an environment.yml file for your new environment. it should only list the packages you explicitly installed (not list dependencies)\ndeactivate your python environment",
    "crumbs": [
      "Tutorials",
      "Tutorial 3"
    ]
  },
  {
    "objectID": "tutorials/t1.html",
    "href": "tutorials/t1.html",
    "title": "Tutorial 1",
    "section": "",
    "text": "Computer Setup Help, Bash, and Git",
    "crumbs": [
      "Tutorials",
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorials/t1.html#create-a-repository",
    "href": "tutorials/t1.html#create-a-repository",
    "title": "Tutorial 1",
    "section": "Create a repository",
    "text": "Create a repository\n\nCreate a new repository on GitHub (e.g., YYYY-MM-DD-git). You can create it with an existing README.md file (or create a new one later)\n\n\n\n\n\n\n\nTip\n\n\n\nCreating a repository with a date is a quick way to make a unique name where you can practice and redo a tutorial again in the future.\n\n\n\nClone down the repository to your local computer",
    "crumbs": [
      "Tutorials",
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorials/t1.html#make-changes-to-a-file",
    "href": "tutorials/t1.html#make-changes-to-a-file",
    "title": "Tutorial 1",
    "section": "Make Changes to a file",
    "text": "Make Changes to a file\n\nCreate a README.md file if you don’t have one already\nEdit the README.md file by adding a line about your favorite food\nAdd / commit / push your changes up to github",
    "crumbs": [
      "Tutorials",
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorials/t1.html#update-changes-from-remote",
    "href": "tutorials/t1.html#update-changes-from-remote",
    "title": "Tutorial 1",
    "section": "Update changes from remote",
    "text": "Update changes from remote\n\nNow edit the README.md file on the remote github repository\nAdd a new line by naming your favorite color\nCommit the changes on github.com\nConfirm your changes in github.com are made in the web interface\npull down your changes to your local computer",
    "crumbs": [
      "Tutorials",
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorials/t4.html",
    "href": "tutorials/t4.html",
    "title": "Tutorial 4",
    "section": "",
    "text": "Virtual environments and docker containers. We’ll practice creating virtual environments again (just like last tutorial), so we can compare it with creating docker containers.",
    "crumbs": [
      "Tutorials",
      "Tutorial 4"
    ]
  },
  {
    "objectID": "tutorials/t4.html#r-environments",
    "href": "tutorials/t4.html#r-environments",
    "title": "Tutorial 4",
    "section": "R Environments",
    "text": "R Environments\n\nCreate a new RStudio Project\nNote the currently installed packages\nInstall the renv library if you do not have it installed\nInitialize the current project as an renv project\nNote the new packages in the environment.\nInstall an R package\nSnapsnot the package\nNote how the renv.lock file does not change\nCreate and save an R script that uses the package you just installed\nRe-snapshot the project\nNote how the renv.lock file updates now\nClose the current RStudio project\nNote how you have your old packages back\nRe-open the RStudio project you just created and see how t5he packages change.",
    "crumbs": [
      "Tutorials",
      "Tutorial 4"
    ]
  },
  {
    "objectID": "tutorials/t4.html#optional-python-environment",
    "href": "tutorials/t4.html#optional-python-environment",
    "title": "Tutorial 4",
    "section": "Optional: Python environment",
    "text": "Optional: Python environment\nFor people and teams working on a python project and want to practice conda environments.\n\n\n\n\n\n\nNote\n\n\n\nconda environments are not going to be on the exam. This exercise is solely to give you instructions to practice creating python environments.\n\n\n\nCheck that you are currently in the base conda environment:\n\nconda info\n\nNote the packages in the current conda environment and their versions\n\nconda list\n\nCreate a new conda environment (we are going to name it myenv) with python 3.12\n\nconda create -n myenv -c conda-forge python=3.12\n\nActivate this environment\nRun python and compare your python versions and see if you are able to import pandas\nconda install another package into the environment, pandas and import it from the new environment.",
    "crumbs": [
      "Tutorials",
      "Tutorial 4"
    ]
  },
  {
    "objectID": "tutorials/t4.html#run-a-docker-container",
    "href": "tutorials/t4.html#run-a-docker-container",
    "title": "Tutorial 4",
    "section": "Run a docker container",
    "text": "Run a docker container\nLet’s get some practice with running docker containers\nDocker Desktop needs to be runnign in the background.\n\nYour first container\nWe did this in the Computer Setup process, but let’s run the hello-world container with docker run\n$ docker run hello-world\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n$\nThis command runs a container that executes a script that prints out the hello docker text. When this script runs, it exits and the container exits to give you your prompt back\n\n\nAn R Container\n\nCompare the version of R you have right now on your computer. You can open up and launch R or run R --version to get your current R version. 2.Run the R 4.3.2 container:\n\ndocker run --rm -it rocker/r-ver:4.3.2\n\nCompare the version from the version you have on your computer\nTry to load a package you have installed on your computer in the container (it should fail)\nExit out of this docker container\n\n\n\nAn RStudio Container\n\n\n\n\n\n\nNote\n\n\n\nIf you are on an ARM based M-chip mac, you need to pass in the --platform=linux/amd64 flag to the docker run command. https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/lectures/110-containerization-2.html#specifying-the-image-architectureplatform\n\n\n\nRun the RStudio container and connect it to your local computer’s port 8787\n\ndocker run --rm -e PASSWORD=\"pizza\" -p 8787:8787 rocker/rstudio:4.4.2\n\nExplain in your own words what each of the flags are doing in the docker run command. You can use the official docker run documentation: https://docs.docker.com/reference/cli/docker/container/run/\nOpen and log into the RStudio container and try to run some R code in a script\nSave this script\nClose the container and run it again\nNotice how all your work inside the container is lost\n\n\n\nAn RStudio Tidyverse Container\n\nDo the same process as before, but this time use the rocker/tidyverse:4.4.2 container.\nWithout turning off this container, open a new terminal and run a separate rocker/rstudio:4.4.2 container\n\n\nYou will need to change the local port mapping\n\n\nMake sure you are able to log into and run both RStudio sessions in the container\n\n\nNote how only one of the RStudio sessions has tidyverse installed and the other doesn’t",
    "crumbs": [
      "Tutorials",
      "Tutorial 4"
    ]
  },
  {
    "objectID": "tutorials/t7.html",
    "href": "tutorials/t7.html",
    "title": "Tutorial 7",
    "section": "",
    "text": "Rendering a quarto document into the docs directory and publish it into github pages.\nWe are going to work with the repository we’ve been using in class this week. This is the final version of the repo after learning about command line scripts and Make:\nhttps://github.com/chendaniely/2025-03-06-make-quarto\nIt has been set up as a Template. Click on the green “Use this template” button and then select “Create a new repository” to copy the repository into your github account.",
    "crumbs": [
      "Tutorials",
      "Tutorial 7"
    ]
  },
  {
    "objectID": "tutorials/t7.html#step-1-run-the-current-set-of-files",
    "href": "tutorials/t7.html#step-1-run-the-current-set-of-files",
    "title": "Tutorial 7",
    "section": "Step 1: Run the current set of files",
    "text": "Step 1: Run the current set of files\nRun the report target from the repository. This should generate the index.html file in the project root.\nIf you open this document, it should open a basic quarto document with a single figure in it.",
    "crumbs": [
      "Tutorials",
      "Tutorial 7"
    ]
  },
  {
    "objectID": "tutorials/t7.html#step-2-enable-github-pages",
    "href": "tutorials/t7.html#step-2-enable-github-pages",
    "title": "Tutorial 7",
    "section": "Step 2: Enable GitHub Pages",
    "text": "Step 2: Enable GitHub Pages\nPush the files (index.html) into your github repository, then enable GitHub Pages via the repository settings &gt; pages panel.\n\nUnder Source, select “Deploy from a branch”\nUnder Branch, select “main” and / (root)\n\nwait a few minutes for github pages to build and publish the site.",
    "crumbs": [
      "Tutorials",
      "Tutorial 7"
    ]
  },
  {
    "objectID": "tutorials/t7.html#step-3-turn-the-project-into-a-quarto-project",
    "href": "tutorials/t7.html#step-3-turn-the-project-into-a-quarto-project",
    "title": "Tutorial 7",
    "section": "Step 3: Turn the project into a Quarto Project",
    "text": "Step 3: Turn the project into a Quarto Project\nWe are now going to turn this project into a quarto project, specifically a manuscript:\nhttps://quarto.org/docs/projects/quarto-projects.html\nThe current repository has an empty _quarto.yml file, we will edit it to become a quarto manuscript project.\n\nEdit the _quarto.yml file\nEdit the _quarto.yml file so it looks like this:\nproject:\n  type: manuscript\n  output-dir: docs\n\nmanuscript:\n  article: index.qmd\n\nformat:\n  html:\n    comments:\n      hypothesis: true\n  docx: default\nThis will set the project type, some of the html formats, and also generate a doc file of our report. We will also have our documents render into the docs directory instead of the root directory.\nYou will also notice that the article option is looking for index.qmd. We will address this part next.\n\n\nCreate the index file for web publishing\n\nMove and rename the report/report.qmd to index.qmd in the repository root.\n\nThis will allow quarto to find and render the manuscript project.\nAfter doing this, you should be able to run quarto render on its own, and the report will render into the docs/` directory.\n\n\nClean up the repository,\nRun the clean target in the repository and confirm that the index.html is no longer created in the root directory.\n\n\nEdit the Makefile\n\nEdit the clean target so that it also deletes the docs/ directory\nEdit the index.html target such that it is really creating the docs/index.html file.\n\nNow when you run make clean followed by make report (a phony target), you should be able to re-create your report file.\n\n\nPush your changes to github\nPush your new repository changes to github. Including your new docs folder.\nYou should also no loger have an index.html file in the project root.",
    "crumbs": [
      "Tutorials",
      "Tutorial 7"
    ]
  },
  {
    "objectID": "tutorials/t7.html#step-4-publish-your-side-from-docs",
    "href": "tutorials/t7.html#step-4-publish-your-side-from-docs",
    "title": "Tutorial 7",
    "section": "Step 4: Publish your side from docs",
    "text": "Step 4: Publish your side from docs\nWe have now created a quarto project that renders into the docs directory, not the root directory.\nYour current website may be broken since index.html does not exist in the root.\nGo back to your Settings &gt; pages repository settings and change the main publishing from root to docs.\nYour website should now be published from the docs directory.",
    "crumbs": [
      "Tutorials",
      "Tutorial 7"
    ]
  },
  {
    "objectID": "tutorials/t8.html",
    "href": "tutorials/t8.html",
    "title": "Tutorial 8",
    "section": "",
    "text": "This tutorial we’ll practice writing Tests for our functions.\nWe will write a function that calculates whether or not a particular year is a leap year. This is how the Gregorian calendar calculates leap years:\nWrite a function named is_leap. It should:\nHere are some examples of what the function should return:\nIn addition from the above examples, here are some test cases you should write as well\nWhat are some other edge cases you can think of?",
    "crumbs": [
      "Tutorials",
      "Tutorial 8"
    ]
  },
  {
    "objectID": "tutorials/t8.html#r",
    "href": "tutorials/t8.html#r",
    "title": "Tutorial 8",
    "section": "R",
    "text": "R\n\nWrite an R function that meets the above criteria\nUsing {testthat} write unit tests that can test your function\nYou may opt to source your function file in your test file.",
    "crumbs": [
      "Tutorials",
      "Tutorial 8"
    ]
  },
  {
    "objectID": "tutorials/t8.html#python-optional",
    "href": "tutorials/t8.html#python-optional",
    "title": "Tutorial 8",
    "section": "Python (optional)",
    "text": "Python (optional)\n\nWrite an R function that meets the above criteria\nWrite tests for your function that can be run with pytest\nFor this tutorial, create your function and test files in the same directory, so it’s easier to import your function module for testing.",
    "crumbs": [
      "Tutorials",
      "Tutorial 8"
    ]
  },
  {
    "objectID": "project/m2.html",
    "href": "project/m2.html",
    "title": "Milestone 2",
    "section": "",
    "text": "Literate code document (i.e., *.ipynb or .Rmd) broken into scripts and a Quarto report. Data analysis pipeline using GNU Make to stitch everything together and automate their execution and rendering (.R files, and reproducible Quarto report).",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 2"
    ]
  },
  {
    "objectID": "project/m2.html#overall-project-summary",
    "href": "project/m2.html#overall-project-summary",
    "title": "Milestone 2",
    "section": "Overall project summary",
    "text": "Overall project summary\nIn this course you will work in assigned teams of three or four (see group assignments in Canvas) to answer a predictive question using a publicly available data set that will allow you to answer that question. To answer this question, you will perform a complete data analysis in R and/or Python, from data import to communication of results, while placing significant emphasis on reproducible and trustworthy workflows.\nYour data analysis project will evolve throughout the course from a single, monolithic Jupyter notebook, to a fully reproducible and robust data data analysis project, comprised of:\n\na well documented and modularized software package and scripts written in R and/or Python,\na data analysis pipeline automated with GNU Make,\na reproducible report powered by Quarto,\na containerized computational environment created and made shareable by Docker, and\nremote version control repositories on GitHub for project collaboration and sharing, as well as automation of test suite execution and documentation and software deployment.\n\nAn example final project from another course (where the project is similar) can be seen here: Breast Cancer Predictor",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 2"
    ]
  },
  {
    "objectID": "project/m2.html#milestone-2-summary",
    "href": "project/m2.html#milestone-2-summary",
    "title": "Milestone 2",
    "section": "Milestone 2 summary",
    "text": "Milestone 2 summary\nIn this milestone, you will:\n\nUpgrade your project’s computational environment to a container.\nAbstract more code from your literate code document (*.ipynb, *.Rmd, or .qmd) to scripts (e.g., .R or .py). You should aim to split the analysis code into 4, or more, R or Python scripts. Where the code in each script is contributing to a related step in your analysis.\nConvert your *.ipynb or *.Rmd files into a Quarto document (*.qmd). Edit your Quarto document so that it’s sole job is to narrate your analysis, display your analysis artifacts (i.e., figures and tables), and nicely format the report. The goal is that non-data scientists would not be able to tell that code was used to perform your analysis or format your report (i.e., no code should be visible in the rendered report).\nWrite another script, a Makefile (literally called Makefile), to act as a driver script to rule them all. This script should run the others in sequence, hard coding in the appropriate arguments.\nContinue to manage issues professionally.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 2"
    ]
  },
  {
    "objectID": "project/m2.html#milestone-2-specifics",
    "href": "project/m2.html#milestone-2-specifics",
    "title": "Milestone 2",
    "section": "Milestone 2 specifics",
    "text": "Milestone 2 specifics\n\n0. Address any issues with your document or code from Milestone 1\nThese milestones build on one another, addressing issues from the previous milestone will make moving on to the next one easier.\n\n\n1. Upgrade your project’s computational environment to a container.\nWrite a Dockerfile to create a custom container for the computational environment for your project. Build your container using GitHub Actions, and publish your container image on DockerHub. Once this is done, shift the development of your project from working in a virtual environment to working in a container!\nThe Dockerfile is the file used to specify and create the Docker image from which containers can be run to create an reproducible computational environment for your analysis. For this project, we recommend using a base Docker image that already has most of the software dependencies needed for your analysis. Examples of these include the Jupyter core team Docker images (documentation) and the Rocker team Docker images (documentation). When you add other software dependencies to this Dockerfile, ensure that you pin the version of the software that you add.\nNote - this document should live in the root of your public GitHub.com repository.\nIn this milestone, we expect you to add a GitHub Actions workflow to automatically build the image, push it to DockerHub, and version the image (using the corresponding GitHub SHA) and GitHub repo when changes are pushed to the Dockerfile.\nYou will need to add your DockerHub username and password (naming them DOCKER_USERNAME and DOCKER_PASSWORD, respectively) as GitHub secrets to this repository for this to work. This part is similar to Individual Assignment 2.\nAdditionally, document how to use your container image in your README. This is important to make it easy for you and your team to shift to a container solution for your computational environment. We highly recommend using Docker Compose so that launching your containers is as frictionless as possible (which makes you more likely to use this tool in your workflow)!\n\n\n2. Abstract more code from your literate code document (*.ipynb, *.Rmd, or .qmd) to scripts (e.g., .R or .py).\nThis code need not be converted to a function, but can simply be files that call the functions needed to run your analysis. You should aim to split the analysis code into 4, or more, R or Python scripts. Where the code in each script is contributing to a related step in your analysis.\nThe output of the first script must be the input of the second, and so on. All scripts should have command line arguments and we expect you to use either the docopt R package or the click Python package for parsing command line arguments.\nThey scripts could be organized something like this:\n\nA first script that downloads the data from the internet and saves it locally. This should take at least two arguments:\n\nthe path to the input file (a URL or a relative local path, such as data/file.csv), as well as\na path/filename where to write the file to and what to call it (e.g., data/cleaned_data.csv).\n\nNote: choose more descriptive filenames than the ones used above. These are general for illustrative purposes.\nA second script that reads the data from the first script and performs and data cleaning/pre-processing, transforming, and/or partitioning that needs to happen before exploratory data analysis or modeling takes place. This should take at least two arguments:\n\na path/filename pointing to the data to be read in\na path/filename pointing to where the cleaned/processed/transformed/partitioned data should live.\n\nA third script which creates exploratory data visualization(s) and table(s) that are useful to help the reader/consumer understand that data set. These analysis artifacts should be written to files. This should take at least two arguments:\n\na path/filename pointing to the data,\na path/filename prefix where to write the figure to and what to call it (e.g., results/this_eda.png).\n\nA fourth script that reads the data from the second script, performs the modeling and summarizes the results as a figure(s) and a table(s). These analysis artifacts should be written to files. This should take at least two arguments:\n\na path/filename pointing to the data\na path/filename prefix where to write the figure(s)/table(s) to and what to call it (e.g., results/this_analysis)\n\n\n\n\n3. Convert your *.ipynb or *.Rmd files into a Quarto document (*.qmd). Edit your Quarto document so that it’s sole job is to narrate your analysis, display your analysis artifacts (i.e., figures and tables), and nicely format the report\nThe goal is that non-data scientists would not be able to tell that code was used to perform your analysis or format your report (i.e., no code should be visible in the rendered report). You should do all the things you did for the report in individual assignment 4, including:\n\nUse markdown headers and Quarto configuration so that a table of contents will be created when the document is rendered.\nAdd correctly formatted inline bibtex references so that a nicely formatted reference list will be present at the end of the document.\nEdit the figure formatting so that Quarto:\n\nautomatically numbers them,\nhas a label for easy cross referencing, and\ncontrols the figure sizes so the figures are not too big.\n\nAdd a table description argument so that they are automatically numbered by Quarto and use cross referencing to link to the table if/when it is discussed in the text.\nEdit the narrative so it uses cross-referencing to refer to the figures and tables instead of having their reference hardcode the figure and table numbers.\nReplace any hard-coded values in the Quarto report narrative text with inline Quarto code, so that the text will be automatically updated with the correct value.\nChange the code chunk options so that no code is viewable in the rendered report, just the code outputs where needed (e.g., figures and tables).\n\n\n\n4. Write another script, a Makefile (literally called Makefile), to act as a driver script to rule them all\nThis script should run the others in sequence, hard coding in the appropriate arguments. This script should:\n\nlive in the project’s root directory and be named Makefile\nbe well documented (using the project README and comments inside the Makefile to explain what it does and how to use it)\nhave a all target so that you can easily run the entire analysis from top to bottom by running make all at the command line\nhave a clean target so that you can easily “undo” your analysis by running make clean at the command line (e.g., deletes all generate data and files).\n\nTip:\n\nThe all target can be a .PHONY target\nYou can create other targets that link up all the dependencies\n\nFor example, data, analysis, figures, pdf, etc, so your build process only runs what’s necessary during development\n\n\n\n\n5. Continue to manage issues professionally\nContinue managing issues effectively through project boards and milestones, make it clear who is responsible for what and what project milestone each task is associated with. In particular, create an issue for each task and/or sub-task needed for this milestone. Each of these issues must be assigned to a single person on the team. We want all of you to get coding experience in the project and each team member should be responsible for an approximately equal portion of the code.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 2"
    ]
  },
  {
    "objectID": "project/m2.html#submission-instructions",
    "href": "project/m2.html#submission-instructions",
    "title": "Milestone 2",
    "section": "Submission Instructions",
    "text": "Submission Instructions\nYou will submit three URLs to Canvas in the provided text box for milestone 2:\n\nthe URL of your project’s GitHub.com repository\nthe URL of a GitHub release of your project’s GitHub.com repository for this milestone.\nThe URL of your Dockerhub image that can be pulled and used to run your analysis following your README.md instructions.\n\n\nCreating a release on GitHub.com\nJust before you submit the milestone 2, create a release on your project repository on GitHub and name it something like 1.0.0 (how to create a release). This release allows us and you to easily jump to the state of your repository at the time of submission for grading purposes, while you continue to work on your project for the next milestone.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 2"
    ]
  },
  {
    "objectID": "project/m2.html#expectations",
    "href": "project/m2.html#expectations",
    "title": "Milestone 2",
    "section": "Expectations",
    "text": "Expectations\n\nEveryone should contribute equally to all aspects of the project (e.g., code, writing, project management). This should be evidenced by a roughly equal number of commits, pull request reviews and participation in communication via GitHub issues.\nEach group member should work in a GitHub flow workflow; where they create branches for each feature or fix, which are reviewed and critiqued by at least one other teammate before the the pull request is accepted.\nYou should be committing to git and pushing to GitHub.com every time you work on this project.\nGit commit messages should be meaningful. These will be marked. It’s OK if one or two are less meaningful, but most should be.\nUse GitHub issues to communicate to their team mate (as opposed to email or Slack).\nYour question, analysis and visualization should make sense. It doesn’t have to be complicated.\nYour analysis should be correct, and run reproducibly given the instructions provided in the README.\nYou should use proper grammar and full sentences in your README. Point form may occur, but should be less than 10% of your written documents.\nR code should follow the tidyverse style guide, and Python code should follow the black style guide for Python)\nYou should not have extraneous files in your repository that should be ignored.",
    "crumbs": [
      "Assessments",
      "Milestone",
      "Milestone 2"
    ]
  },
  {
    "objectID": "project/teamwork_contract.html",
    "href": "project/teamwork_contract.html",
    "title": "Sample teamwork contract",
    "section": "",
    "text": "Sample project teamwork contract from a group of students for a past data science group project.\nTeam Contract\nExpectations\nThe time expected for group members to work on DSCI 5XX will be a maximum of 6 hours unless all the team members agree to lengthen the time expected. If team members cannot complete their sections within the maximum hours, members should give notice on Slack at least 24 hours before the group submission date (Saturday 6am) to see if work should be redistributed or if the expected time should be increased.\nAll submissions are expected to meet the criteria of the milestones as set out in the instructions. This includes making sure all scripts are working, creating tests for all your functions, and using proper grammar in written submissions.\nMeetings\nMeeting times were established during the initial team meeting held on 202X-XX-XX. Meetings will be held in or meet outside LOCATION on the following dates:\n\nThursday 2/27: 4-5pm\nMonday 3/2: 4-5pm (if needed)\nThursday 3/5: 1-2pm\nMonday 3/9: 4-5pm (if needed)\nWednesday 3/11: 12:30-2pm\nThursday 3/12: 4-5pm (if needed)\nMonday 3/16: 4-5pm (if needed)\nThursday 3/19: 1-2pm\nThursday 3/19 (same day): 4-5pm (if needed)\nThursday 3/26: 10am - 1pm\n\nThe group will have a second formal meeting during the lab for 524 on Mondays at 2 pm. All members are expected to attend the meetings. If a member cannot make a meeting, written notice must be given 24 hours before the meeting to discuss alternative options.\nCommunication\nAll communication outside of the meetings will be through Slack or Github. Github will be the primary communication tool for ideas, suggestions, submitting work and reviewing work. Slack will be the primary communication tool for informal communication and scheduling meetings.\nReviews\nAll members are expected to submit a pull request for their work on the repository for the group project on Github.com. Members are expected to add teammates as reviewers to have all pull request reviewed by another teammate. Pull request should be reviewed within 24 hours after creation.\nRoles\nThere are two roles team members will be responsible for each week. The roles are as follows:\n\nScribe:\n\nResponsible for taking notes at the meetings and in-class lab sessions and adding as a GitHub issue.\nResponsible for sharing with all notes and in-class activities to teammates.\n\nProof-reader\n\nResponsible for doing a final check of the submission before the deadline to make sure all requirements are satisfied.\n\n\nPositions will be rotated each week to ensure that each team member does each position once.\nDeadlines\nDeadlines for individual items will be assigned during meetings. The proof-reader will review the work on Saturday and ensure that the final version is ready for submission and create the required version tag.\nBreach of Contract\nFailure to follow the team contract will result in a three-step warning system:\n\nThe first step is a written notice that outlines the violation of the team contract and a reminder of the team contract conditions.\nThe second step is a meeting to discuss the behaviour and write an agreement to follow the team contract is required by the member.\nThe third step is to reach out to the lab instructor or TAs of the issues with the teammate",
    "crumbs": [
      "Assessments",
      "Teamwork",
      "Sample teamwork contract"
    ]
  },
  {
    "objectID": "install_instructions/install_stack_windows.html",
    "href": "install_instructions/install_stack_windows.html",
    "title": "Windows",
    "section": "",
    "text": "If you have already installed Git, Latex, Make, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we require all students to install the software stack the same way.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#installation-notes",
    "href": "install_instructions/install_stack_windows.html#installation-notes",
    "title": "Windows",
    "section": "",
    "text": "If you have already installed Git, Latex, Make, or any of the R or Python related packages please uninstall these and follow the instructions below to reinstall them (make sure to also remove any user configuration files and backup them if desired). In order to be able to support you effectively and minimize setup issues and software conflicts, we require all students to install the software stack the same way.\nIn all the sections below, if you are presented with the choice to download either a 64-bit (also called x64) or a 32-bit (also called x86) version of the application always choose the 64-bit version.\nOnce you have completed these installation instructions, make sure to follow the post-installation notes at the end to check that all software is setup correctly."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#web-browser",
    "href": "install_instructions/install_stack_windows.html#web-browser",
    "title": "Windows",
    "section": "Web browser",
    "text": "Web browser\nIn DSCI 310 we will be using several tools that work most reliably on Google Chrome and Firefox (including our online quiz software), so we recommend that you use one of these browsers.\n\nTo install Chrome, go to https://www.google.com/chrome/, click on “Download Chrome” and follow the instructions on the website to finish the installation.\nTo install Firefox, go to https://www.mozilla.org/en-US/firefox/new/, click on “Download Firefox” and follow the instructions on the website to finish the installation."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#visual-studio-code",
    "href": "install_instructions/install_stack_windows.html#visual-studio-code",
    "title": "Windows",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\nThe open-source text editor Visual Studio Code (VS Code) is both a powerful text editor and a full-blown Python IDE, which we will use for more complex analysis. Go to https://code.visualstudio.com/download and download the windows version of VS Code. After the download has finished, run the installer and accept the default configuration for all pages except for the following:\n\nOptional On the Select Additional Tasks page, check “Create a desktop icon” under “Additional icons”.\nAlso on the Select Additional Tasks page check all four boxes under “Other”\n\n“Add ‘Open with Code’ action to Windows file context menu”\n“Add ‘Open with Code’ action to Windows directory context menu”\n“Register Code as an editor for supported file types”\n“Add to PATH” (this should be selected by default)."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#github",
    "href": "install_instructions/install_stack_windows.html#github",
    "title": "Windows",
    "section": "GitHub",
    "text": "GitHub\nIn DSCI 310 we will use the publicly available GitHub.com. If you do not already have an account, please sign up for one at GitHub.com\nSign up for a free account at GitHub.com if you don’t have one already."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#git-bash-and-windows-terminal",
    "href": "install_instructions/install_stack_windows.html#git-bash-and-windows-terminal",
    "title": "Windows",
    "section": "Git, Bash, and Windows Terminal",
    "text": "Git, Bash, and Windows Terminal\nAlthough these three are separate programs, we are including them in the same section here since they are packaged together in the same installer on Windows. Briefly, we will be using the Bash shell to interact with our computers via a command line interface, Git to keep a version history of our files and upload to/download from to GitHub, and Windows Terminal to run the both Bash and Git.\nGo to https://git-scm.com/download/win and download the windows version of git. After the download has finished, run the installer and accept the default configuration for all pages except for the following:\n\nOn the Select Components page, add a Git Bash profile to Windows Terminal.\n\nOn the Choosing the default editor used by Git page, select “Use Visual Studio Code as Git’s default editor” from the drop-down menu’\n\nSet the default branch name to main\n\n\nTo install windows terminal visit this link and click Get to open it in Windows Store. Inside the Store, click Get again and then click Install. After installation, click Launch to start Windows Terminal. In the top of the window, you will see the tab bar with one open tab, a plus sign, and a down arrow. Click the down arrow and select Settings (or type the shortcut Ctrl + ,). In the Startup section, click the dropdown menu under Default profile and select Git Bash.\n\nYou can now launch the Windows terminal from the start menu or pin it to the taskbar like any other program (you can read the rest of the article linked above for additional tips if you wish). To make sure everything worked, close down Windows Terminal, and open it again. Git Bash should open by default, the text should be green and purple, and the tab should read MINGW64:/c/Users/$USERNAME (you should also see /c/Users/$USERNAME if you type pwd into the terminal). This screenshot shows what it should look like:\n\n\nNote: Whenever we refer to “the terminal” in these installation instructions, we want you to use the Windows Terminal that you just installed with the Git Bash profile. Do not use Windows PowerShell, CMD, or anything else unless explicitly instructed to do so.\n\nTo open a new tab you can click the plus sign or use Ctrl + Shift + t (you can close a tab with Ctrl + Shift + w). To copy text from the terminal, you can highlight it with the mouse and then click Ctrl + Shift + c. To paste text you use Ctrl + Shift + v, try it by pasting the following into the terminal to check which version of Bash you just installed:\nbash --version\nThe output should look similar to this:\nGNU bash, version 5.2.15(1)-release (x86_64-pc-msys)\nCopyright (C) 2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\n\nThis is free software; you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nNote: If there is a newline (the enter character) in the clipboard when you are pasting into the terminal, you will be asked if you are sure you want to paste since this newline will act as if you pressed enter and run the command. As a guideline you can press Paste anyway unless you are sure you don’t want this to happen.\n\nLet’s also check which version of git was installed:\ngit --version\ngit version 2.42.0.windows.2\n\nNote: Some of the Git commands we will use are only available since Git 2.23, so make sure your if your Git is at least this version.\n\nYou can launch many windows programs from the terminal, e.g. to launch VS Code that we installed previously, you would type in code, let’s use this to check the version of vscode that we installed:\ncode --version\n1.81.1\n6d9b74a70ca9c7733b29f0456fd8195364076dda\nx64\n\nConfiguring Git user info\nNext, we need to configure Git by telling it your name and email. To do this, type the following into the terminal (replacing Jane Doe and janedoe@example.com, with your name and email that you used to sign up for GitHub, respectively):\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email janedoe@example.com\n\nNote: To ensure that you haven’t made a typo in any of the above, you can view your global Git configurations by either opening the configuration file in a text editor (e.g. via the command code ~/.gitconfig) or by typing git config --list --global.\n\n\n\nSetting VS Code as the default editor\nTo make programs run from the terminal (such as git) use VS Code by default, we will modify ~/.bash_profile. First, open it using VS Code:\ncode ~/.bash_profile\n\nNote: If you see any existing lines in your ~/.bash_profile related to a previous Python or R installation, please remove these.\n\nAppend the following lines:\n# Set the default editor for programs launch from terminal\nEDITOR=\"code --wait\"\nVISUAL=$EDITOR  # Use the same value as for \"EDITOR\" in the line above\nThen save the file and exit VS Code.\n\nNote: Most terminal programs will read the EDITOR environmental variable when determining which editor to use, but some read VISUAL, so we’re setting both to the same value.\n\nIn some cases, VScode is not set as the default text editor for git even after appending the two lines above, so to make sure it is registered properly, also run the following from your terminal:\ngit config --global core.editor \"code --wait\"\nOn Windows, VScode sometimes reads a different configuration file than Git Bash. To avoid this, open your ~/.bashrc file:\ncode ~/.bashrc\nAnd append the following line:\n# Do NOT add anything to this file, use `~/.bash_profile` instead.\n# The next line automatically loads your `~/.bash_profile`\n# any time a program tries to read your `~/.bashrc` file.\nif [ -f ~/.bash_profile ]; then . ~/.bash_profile; fi\nThe comment is a reminder to your future self who might open up this file a few months from now =)\n\n\nSetting Git Bash as the default VS Code terminal profile\nFinally, let’s make sure the VS Code uses our newly installed Git Bash shell as its default terminal profile:\n\nOpen Up VS Code and go to the general preferences / settings (shortcut Ctrl + ,).\nType in “Default terminal profile” and find the entry that reads Terminal &gt; Integrated &gt; Default profile: Windows.\nSelect Git Bash from the drop down menu of this entry.\n\nNow Git Bash should be opened automatically each time you open a new terminal in side VS Code."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#python-conda-and-jupyterlab",
    "href": "install_instructions/install_stack_windows.html#python-conda-and-jupyterlab",
    "title": "Windows",
    "section": "Python, Conda, and JupyterLab",
    "text": "Python, Conda, and JupyterLab\n\nPython and Conda\nIn DSCI 310 we will be using Python and the conda package manager. To install Python and the conda package manager, we will use the Miniforge platform (read more here).\nSelect the appropriate link:\nYou can find the Windows download links here: https://conda-forge.org/miniforge/. Make sure you use the Miniforge3 installers, not the other ones listed. We will assume you downloaded the file into your Downloads folder.\nOnce downloaded, run the installer.\nUse all the default options in the installer.\nThe install location should look something like: C:\\Users\\YOUR_USER_NAME\\miniforge3\n\nNote: Do not add miniforge to PATH. We will set this up later.\n\nAfter installation, open the Start Menu and search for the program called “Miniforge Prompt”. When this opens you will see a prompt similar to (base) C:\\Users\\your_name. Type the following to check that your Python installation is working:\npython --version\nwhich should return Python 3.11.0 or greater:\nPython 3.11.0\nIf not, run the following command in the Miniforge Prompt, Confirm that you are in the (base) environment. Then update the base python with:\nconda install python=3.11\n\n\nIntegrating Python with the Git Bash terminal\nTo avoid having to open the separate Anaconda Prompt every time we want to use Python, we can make it available from the (Git Bash) terminal, which is what we will be using most of the time. To set this up, open the “Anaconda Prompt (miniconda3)” again and type:\nconda init bash\nYou will see that this modified a few configuration files, which makes conda visible to the terminal. Close all open terminal windows and launch a new one, you should now see that the prompt string has changed to include the word (base) as in the screenshot below:\n\nIf you type\npython --version\nyou should now see the same output as above:\nPython 3.11.0\nLet’s also check the version of the conda package manager. If you type\nconda --version\nyou should see something like this\nconda 23.5.2\n\nOptional: One annoyance with our current terminal setup is that the word (base) is not on the same row as the rest of the prompt string (the part with your_name@your_computer. To fix this we can edit the .bash_profile configuration file to indicate that we do not want a newline at the beginning of the prompt string. Open up the configuration file using VS Code by typing the following command into a terminal:\ncode \"/c/Program Files/Git/etc/profile.d/git-prompt.sh\"\nDelete the line that reads the following (it should be line 13):\nPS1=\"$PS1\"'\\n'       # new line\nWhile we are in this file, let’s also remove the line that says PS1=\"$PS1\"'$MSYSTEM '          # show MSYSTEM (line 17), to remove some clutter from the terminal.\nClick to save the file, when VS Code prompts you that the saving failed, click “Retry as Admin” and then “Yes”. That’s it! Now if you launch a new terminal instance, you will see (base) on the same line as the rest of the prompt string as in the screenshot below."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#installing-python-packages",
    "href": "install_instructions/install_stack_windows.html#installing-python-packages",
    "title": "Windows",
    "section": "Installing Python packages",
    "text": "Installing Python packages\nconda installs Python packages from different online repositories which are called “channels”. A package needs to go through thorough testing before it is included in the default channel, which is good for stability, but also means that new versions will be delayed and fewer packages are available overall. There is a community-driven effort called the conda-forge (read more here), which provides more up to date packages. Conda-forge is already set up when we installed Miniforge3\nTo install packages individually, we can now use the following command: conda install &lt;package-name&gt;. After running that command conda will show you the packages that will be downloaded, and you can press enter to proceed with the installation. If you want to answer yes by default and skip this confirmation step, you can replace conda install with conda install -y. Also note that we may occasionally need to install packages using pip, the standard Python package manager. The installation command is very similar to that of conda: pip install &lt;package-name&gt;.\nIn the next session we will use conda to install some of the key packages we will use in DSCI 310."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#jupyterlab-setup",
    "href": "install_instructions/install_stack_windows.html#jupyterlab-setup",
    "title": "Windows",
    "section": "JupyterLab setup",
    "text": "JupyterLab setup\nJupyterLab is a coding environment that we will be using frequently throughout the course. The JupyterLab git extension facilitates using notebooks in JupyterLab together with Git & GitHub. The spellchecker helps us correcting typos in our writing. Install them via the following commands:\nconda install jupyterlab jupyterlab-git jupyterlab-spellchecker\nTo test that your JupyterLab installation is functional, you can type jupyter lab into a terminal, which should open a new tab in your default browser with the JupyterLab interface. To exit out of JupyterLab you can click File -&gt; Shutdown, or go to the terminal from which you launched JupyterLab and hold Ctrl while pressing c twice."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#r-irkernel-rtools-and-rstudio",
    "href": "install_instructions/install_stack_windows.html#r-irkernel-rtools-and-rstudio",
    "title": "Windows",
    "section": "R, IRkernel, Rtools, and RStudio",
    "text": "R, IRkernel, Rtools, and RStudio\nR is the second language that we will be using frequently in this course. We will use R both in Jupyter notebooks and in RStudio.\n\nR\nGo to https://cran.r-project.org/bin/windows/base/ and download the latest version of R for Windows. Open the file and follow the installer instructions accepting the default configuration.\nAfter the installation is complete, we will add the R executables to the PATH variable in terminal so that you can use it without typing the full path to R each time Open a terminal and type:\ncode ~/.bash_profile\nAppend the following lines to the file\n# Automatically expand the R version number\nR_DIR=(/c/Program\\ Files/R/*/bin/x64)\n# Add R and Rscript to PATH\nexport PATH=\"$R_DIR:$PATH\" # double quote is important here\nThen save the file and exit VS Code. Now you can open a new terminal window and type\nR --version\nwhich should return something like:\nR version 4.2.1 (2022-06-23 ucrt) -- \"Funny-Looking Kid\"\nCopyright (C) 2022 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under the terms of the\nGNU General Public License versions 2 or 3.\nFor more information about these matters see\nhttps://www.gnu.org/licenses/.\n\nNote: Although it is possible to install R through conda, we highly recommend not doing so. In case you have already installed R using conda you can remove it by executing conda uninstall r-base.\n\n\n\nRStudio\nDownload the Windows preview version of RStudio Desktop (not Pro) from https://www.rstudio.com/products/rstudio/download/preview. Open the file and follow the installer instructions.\nTo see if you were successful, try opening RStudio by clicking on its icon.\nNext, we will make sure that Rstudio uses the same directories as R from terminal for its configuration. To do this, we will need to set an environmental variable in Windows. First, open the start menu, type “env” and select the match that reads “Edit the system environment variables”. Click the button at the bottom that reads “Environmental Variables…”:\n\nUnder “User variable” click the “New…” button:\n\nAnd type in R_USER as the “Variable name” and C:\\Users\\username as the “Variable value”, replacing username with your actual user name (if you don’t know your user name, look at the top of the screenshot above where it says “User variables for your_username”):\n\nClick “OK” on all of the three windows we opened above and you’re done! If you open the console in RStudio and also R from the Windows Terminal (open Windows Terminal, type R, and then press enter) and type the following in both:\n.libPaths()\nboth applications should return the same values, and the first one should be a path inside your user directory e.g.\n\"C:/Users/florencia/R/win-library/4.2\" \"C:/Program Files/R/R-4.2.2/library\"\nIf they don’t return the same paths, please try to setting up your environmental variable again and making sure that it is pointing to the correct folder.\nDo not continue unless both R from terminal and R from RStudio return the same paths here or later parts of the installation will fail.\nNow we are going to change RStudio’s Insert Pipe shortcut so that it inserts the new native pipe operator |&gt;. Go to Tools &gt; Global Options &gt; Code &gt; Editing and tick the following option:\n\nOnce the change is made you can try in the RStudio console Ctrl + Shift + m to check if works.\nFinally, let’s install a common R package that you used a lot in DSCI 100 by typing the following into the console inside RStudio:\ninstall.packages(\"tidyverse\")\n\n\nRtools\nWindows users will also need to install Rtools, which will allow you to use external libraries. Go to http://cran.r-project.org/bin/windows/Rtools/ and download the latest version (e.g., rtools40v2-x86_64.exe). After the download has finished, run the installer with the default configuration. Do not follow the Rtools’ website instructions for “Putting Rtools on the PATH”. RStudio will put Rtools on the PATH automatically when it is needed.\nTo test if your installation was successful, open RStudio (restart it if you already have it open) and type the following into the Console:\ninstall.packages(\"jsonlite\", type = \"source\")\nIf the jsonlite package installs without errors, Rtools is setup correctly.\n\n\nIRkernel\nThe IRkernel package is needed to make R work in Jupyter notebooks. To enable this kernel in the notebooks, install by pasting the following command into the RStudio Console:\ninstall.packages('IRkernel')\nNext, open the Windows terminal and type the following (you can’t use RStudio for this step since it doesn’t honor $PATH changes)\nR -e \"IRkernel::installspec()\"\nTo see if you were successful, try running JupyterLab and check if you have a working R kernel. To launch the JupyterLab type the following in the terminal:\njupyter lab\nA browser should have launched and you should see a page that looks like the screenshot below. Now click on “R” notebook (circled in red on the screenshot below) to launch an JupyterLab with an R kernel.\n\nSometimes a kernel loads, but doesn’t work as expected. To test whether your installation was done correctly now type library(tidyverse) in the code cell and click on the run button to run the cell. If your R kernel works you should see something like the image below:\n\nTo improve the experience of using R in JupyterLab, we will add keyboard shortcuts for inserting the common R operators &lt;- and |&gt;. Go to Settings -&gt; Settings Editor. Then click JSON Settings Editor in the top right corner and click on Keyboard Shortcuts in the navigation panel to the left. You will see two panels, the right-most panel allows you to perform advanced modification of keyboards shortcuts in JupyterLab and it already contains quite a few shortcuts. We’re going to add two more shortcuts, by pasting a text snippet just before the first existing shortcut. Go ahead and create a new line just after the line that says \"shortcuts\": [ and paste the following:\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Alt -\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"&lt;- \"}\n            }\n        },\n        {\n            \"command\": \"apputils:run-first-enabled\",\n            \"selector\": \"body\",\n            \"keys\": [\"Accel Shift M\"],\n            \"args\": {\n                \"commands\": [\n                    \"console:replace-selection\",\n                    \"fileeditor:replace-selection\",\n                    \"notebook:replace-selection\",\n                ],\n                \"args\": {\"text\": \"|&gt; \"}\n            }\n        },\nAfter you have pasted this text, hit the small floppy disk in the top right (or Ctrl + s) to save the settings. Here is a screenshot of what it looks like with the settings saved:\n\nTo check that the extension is working, open JupyterLab, launch an R notebook, and try inserting the operators by pressing Alt + - or Shift + Ctrl + m, respectively. You could add any arbitrary text insertion command the same way, but this is all that is required for this course."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#quarto-cli",
    "href": "install_instructions/install_stack_windows.html#quarto-cli",
    "title": "Windows",
    "section": "Quarto CLI",
    "text": "Quarto CLI\nQuarto is an open-source scientific and technical publishing system that you can access from VSCode, Jupyter Lab, RStudio, or the terminal.\nThe RStudio version that you have downloaded is already equipped with the last version of Quarto. You can check this by opening a new document in File -&gt; New File -&gt; Quarto Document.\nQuarto can be used outside RStudio as well, this is why we are going to install Quarto CLI. Please, download the last version of Quarto CLI for Windows.\nAfter the installation finishes, close all the terminals you may have open. Then, open a new one and try running this command:\nquarto --version\nIf the installation was successful you will read the output:\n1.3.450\n\nNote: Pay attention that due to the Windows settings suggested in this installation you will always have to write quarto.cmd instead of quarto to run Quarto commands. Read more here."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#latex",
    "href": "install_instructions/install_stack_windows.html#latex",
    "title": "Windows",
    "section": "LaTeX",
    "text": "LaTeX\nWe will install the lightest possible version of LaTeX and its necessary packages as possible so that we can render Jupyter notebooks and R Markdown documents to html and PDF. If you have previously installed LaTeX, please uninstall it before proceeding with these instructions.\nFirst, open RStudio and run the following commands to install the tinytex package and setup tinytex:\ninstall.packages('tinytex')\ntinytex::install_tinytex()\nNote that you might see two error messages regarding lua during the installation, you can safely ignore these, the installation will complete successfully after clicking “OK”.\nIn order for Git Bash to be able to find the location of TinyTex, you will need to sign out of Windows and back in again. After doing that, you can check that the installation worked by opening a terminal and asking for the version of latex:\nlatex --version\nYou should see something like this if you were successful:\npdfTeX 3.141592653-2.6-1.40.24 (TeX Live 2022)\nkpathsea version 6.3.4\nCopyright 2022 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.37; using libpng 1.6.37\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 4.03\nThe above is all we need to have LaTeX work with R Markdown documents, however for Jupyter we need to add several more packages.\nWhen you sign back in, install the additional LaTeX packages needed for Jupyter by pasting the following into the new terminal instance and press enter: by pasting the following:\ntlmgr.bat install eurosym \\\n  adjustbox \\\n  caption \\\n  collectbox \\\n  enumitem \\\n  environ \\\n  fp \\\n  jknapltx \\\n  ms \\\n  parskip \\\n  pdfcol \\\n  pgf \\\n  rsfs \\\n  soul \\\n  tcolorbox \\\n  titling \\\n  trimspaces \\\n  ucs \\\n  ulem \\\n  upquote \\\n  lwarp \\\n  oberdiek\nTo test that your latex installation is working with jupyter notebooks, launch jupyter lab from a terminal and open either a new notebook or the same one you used to test IRkernel above. Go to File -&gt; Save and Export Notebook as... -&gt; PDF. If the PDF file is created, your LaTeX environment is set up correctly.\n\nWebPDF export\nJupyter recently added another way to export notebooks to PDF which does not require Latex and makes the exported PDF look similar to notebooks exported to HTML. This requires the pyppeteer package, which we can install by typing the following into Windows Terminal.\npip install \"nbconvert[webpdf]\"\nplaywright install chromium\nNow try exporting a notebook by clicking File -&gt; Save and Export Notebook As... -&gt; WebPDF."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#make",
    "href": "install_instructions/install_stack_windows.html#make",
    "title": "Windows",
    "section": "Make",
    "text": "Make\nLater in the program, we will be using make to automate our analysis scripts. Download make from this URL. Click on the downloaded zip-file to open it in the File Explorer and click the button in the “Extract” tab that reads “Extract all”. Change the extract location to C:\\Users\\YOUR_USERNAME\\make-4.3 (substituting in your actual username instead of YOUR_USERNAME) and click “Extract”. See the screenshots below if you’re unsure what to click.\n\n\n\nNote: It is advisable to show file extensions by default in the Windows File Explorer. Click the View tab and check the box next to File name extensions.\n\nNext we need to add make’s bin folder to our PATH so that we can use he command make from the terminal (like we did with R earlier). Open the bash configuration file with VS Code again by pasting this into a terminal:\ncode ~/.bash_profile\nAnd replace the section that reads:\n# Add R and Rscript to path\nexport PATH=\"${R_DIR}:$PATH\"\nwith the following to prepend make’s bin folder to the PATH (note that ${USERNAME} below will be automatically expanded to your actual username by bash, so you don’t need to replace it manually.\n# Add R, Rscript, and Make to path\nexport PATH=\"/c/Users/${USERNAME}/make-4.3/bin:${R_DIR}:$PATH\"\nThen save the file and exit VS Code. Launch a new terminal and run\nmake --version\nwhich should return something like\nGNU Make 4.3\nBuilt for Windows32\nCopyright (C) 1988-2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#docker",
    "href": "install_instructions/install_stack_windows.html#docker",
    "title": "Windows",
    "section": "Docker",
    "text": "Docker\nYou will use Docker to create reproducible, sharable and shippable computing environments for your analyses. For this you will need a Docker account. You can sign up for a free one here.\nAfter signing-up and signing into the Docker Store, go here and click on the “Get Docker Desktop” button on the right hand side of the screen. Then follow the installation instructions on that screen to install the stable version.\n\nNote: If you see a warning saying that your WSL installation is incomplete, you can click the link to install the kernel update and then restart per the instructions in the warning message.\n\nAfter installation (Docker will make you sign out to finish installing), launch a terminal and type\ndocker run hello-world\nwhich should output something like this:\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n0e03bdcc26d7: Pulling fs layer\n0e03bdcc26d7: Verifying Checksum\n0e03bdcc26d7: Download complete\n0e03bdcc26d7: Pull complete\nDigest: sha256:49a1c8800c94df04e9658809b006fd8a686cab8028d33cfba2cc049724254202\nStatus: Downloaded newer image for hello-world:latest\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/"
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#vs-code-extensions-optional",
    "href": "install_instructions/install_stack_windows.html#vs-code-extensions-optional",
    "title": "Windows",
    "section": "VS Code extensions (Optional)",
    "text": "VS Code extensions (Optional)\nThe real magic of VS Code is in the extensions that let you add languages, debuggers, and tools to your installation to support your specific workflow. From within VS Code you can open up the Extension Marketplace to browse and install extensions by clicking on the Extensions icon in the Activity Bar indicated in the figure below.\n\nTo install an extension, you simply search for it in the search bar, click the extension you want, and then click “Install”. There are extensions available to make almost any workflow or task you are interested in more efficient! Here we are interested in setting up VS Code as a Python IDE. To do this, search for and install the following extensions:\n\nPython (everything Python: notebooks, debugging, linting, formatting, etc.)\nmarkdownlint (markdown linting and style checking extension)\nGitLens (powerful extension that extends VS Code’s native git capabilities)\nGit History (intutive view of your git history)\nDocker (easily use Docker from VS Code)\nQuarto (integrated render and preview for Quarto documents and more)\n(Optional) Material Theme and/or Predawn Theme Kit (additional colour themes to choose from)\n(Optional) Material Icon Theme (great-looking custom file icons!)\n\nThis video tutorial is an excellent introduction to using VS Code in Python."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#post-installation-notes",
    "href": "install_instructions/install_stack_windows.html#post-installation-notes",
    "title": "Windows",
    "section": "Post-installation notes",
    "text": "Post-installation notes\nYou have completed the installation instructions, well done 🙌! We have created a script to help you check that your installation was successful, and to provide instructions for how you can troubleshoot any potential issues. To run this script, please execute the following command from your terminal.\nbash &lt;(curl -Ss https://raw.githubusercontent.com/UBC-DSCI/dsci-310-student/main/src/check_setup.sh)\nThe output from running the script will look something like this:\n# DSCI 310 setup check 2024.1\n\nIf a program or package is marked as MISSING,\nthis means that you are missing the required version of that program or package.\nEither it is not installed at all or the wrong version is installed.\nThe required version is indicated with a number and an asterisk (*),\ne.g. 4.* means that all versions starting with 4 are accepted (4.0.1, 4.2.5, etc).\n\nYou can run the following commands to find out which version\nof a program or package is installed (if any):\n\nname_of_program --version  # For system programs\nconda list  # For Python packages\nR -q -e \"as.data.frame(installed.packages()[,3])\"  # For R packages\n\n\nChecking program and package versions...\n\n## Operating system\nProductName:            macOS\nProductVersion:         13.4\nBuildVersion:           22F66\n\n## System programs\nOK        rstudio 2023.12.0+369\nOK        R 4.3.2 (2023-10-31) -- \"Eye Holes\"\nOK        python 3.11.6\nOK        conda 23\nOK        bash 3.2.57(1)-release (arm64-apple-darwin22)\nOK        git 2.39.2 (Apple Git-143)\nOK        make 3.81\nOK        latex 3.141592653-2.6-1.40.25 (TeX Live 2023)\nOK        tlmgr 5:21 +0200)\nOK        docker 24.0.6, build ed223bc\nOK        code 1.85.0\n\n## Python packages\nOK        nbconvert-core=7.8.0\nOK        playwright=1.40.0\nOK        jupyterlab=4.0.6\nOK        jupyterlab-git=0.41.0\nOK        jupyterlab-spellchecker=0.8.4\nOK        jupyterlab PDF-generation was successful.\nOK        jupyterlab WebPDF-generation was successful.\nOK        jupyterlab HTML-generation was successful.\n\n## R packages\nOK        IRkernel=1.3.2\nOK        tinytex=0.46\nOK        rmarkdown PDF-generation was successful.\nOK        rmarkdown HTML-generation was successful.\n\nThe above output has been saved to the file /Users/timberst/Documents/dsci-310/dsci-310-student/check-setup-310.log\ntogether with system configuration details and any detailed error messages about PDF and HTML generation.\nYou can open this folder in your file browser by typing `open .` (without the surrounding backticks).\nAs you can see at the end of the output, a log file is saved in your current directory. We might ask you to upload this file if we need to troubleshoot your installation, so that we can help you more effectively. If any of your packages are marked as “MISSING” you will need to figure out what is wrong and possibly reinstall them. Once all packages are marked as “OK” we will ask you to submit this log file, so that we can confirm that your installation was successful. Details on where to submit will be provided later.\n\nNote: In general you should be careful running scripts unless they come from a trusted source as in this case (just like how you should be careful when downloading and installing programs on your computer)."
  },
  {
    "objectID": "install_instructions/install_stack_windows.html#attributions",
    "href": "install_instructions/install_stack_windows.html#attributions",
    "title": "Windows",
    "section": "Attributions",
    "text": "Attributions\n\nUBC MDS Software Stack Install Instructions\nHarvard CS109\nUBC STAT 545 licensed under the CC BY-NC 3.0.\nSoftware Carpentry\nOracle - How do I set or change the PATH system variable?\nNumerical Methods - Getting started\nRStudio - New native pipe operator"
  }
]